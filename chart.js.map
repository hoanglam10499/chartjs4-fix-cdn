{"version":3,"file":"chart.js","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\r\n\r\n/**\r\n * @typedef { import('./core.animation.js').default } Animation\r\n * @typedef { import('./core.controller.js').default } Chart\r\n */\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is export for typedoc\r\n */\r\nexport class Animator {\r\n  constructor() {\r\n    this._request = null;\r\n    this._charts = new Map();\r\n    this._running = false;\r\n    this._lastDate = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(chart, anims, date, type) {\r\n    const callbacks = anims.listeners[type];\r\n    const numSteps = anims.duration;\r\n\r\n    callbacks.forEach(fn => fn({\r\n      chart,\r\n      initial: anims.initial,\r\n      numSteps,\r\n      currentStep: Math.min(date - anims.start, numSteps)\r\n    }));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _refresh() {\r\n    if (this._request) {\r\n      return;\r\n    }\r\n    this._running = true;\r\n\r\n    this._request = requestAnimFrame.call(window, () => {\r\n      this._update();\r\n      this._request = null;\r\n\r\n      if (this._running) {\r\n        this._refresh();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(date = Date.now()) {\r\n    let remaining = 0;\r\n\r\n    this._charts.forEach((anims, chart) => {\r\n      if (!anims.running || !anims.items.length) {\r\n        return;\r\n      }\r\n      const items = anims.items;\r\n      let i = items.length - 1;\r\n      let draw = false;\r\n      let item;\r\n\r\n      for (; i >= 0; --i) {\r\n        item = items[i];\r\n\r\n        if (item._active) {\r\n          if (item._total > anims.duration) {\r\n            // if the animation has been updated and its duration prolonged,\r\n            // update to total duration of current animations run (for progress event)\r\n            anims.duration = item._total;\r\n          }\r\n          item.tick(date);\r\n          draw = true;\r\n        } else {\r\n          // Remove the item by replacing it with last item and removing the last\r\n          // A lot faster than splice.\r\n          items[i] = items[items.length - 1];\r\n          items.pop();\r\n        }\r\n      }\r\n\r\n      if (draw) {\r\n        chart.draw();\r\n        this._notify(chart, anims, date, 'progress');\r\n      }\r\n\r\n      if (!items.length) {\r\n        anims.running = false;\r\n        this._notify(chart, anims, date, 'complete');\r\n        anims.initial = false;\r\n      }\r\n\r\n      remaining += items.length;\r\n    });\r\n\r\n    this._lastDate = date;\r\n\r\n    if (remaining === 0) {\r\n      this._running = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getAnims(chart) {\r\n    const charts = this._charts;\r\n    let anims = charts.get(chart);\r\n    if (!anims) {\r\n      anims = {\r\n        running: false,\r\n        initial: true,\r\n        items: [],\r\n        listeners: {\r\n          complete: [],\r\n          progress: []\r\n        }\r\n      };\r\n      charts.set(chart, anims);\r\n    }\r\n    return anims;\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} event - event name\r\n\t * @param {Function} cb - callback\r\n\t */\r\n  listen(chart, event, cb) {\r\n    this._getAnims(chart).listeners[event].push(cb);\r\n  }\r\n\r\n  /**\r\n\t * Add animations\r\n\t * @param {Chart} chart\r\n\t * @param {Animation[]} items - animations\r\n\t */\r\n  add(chart, items) {\r\n    if (!items || !items.length) {\r\n      return;\r\n    }\r\n    this._getAnims(chart).items.push(...items);\r\n  }\r\n\r\n  /**\r\n\t * Counts number of active animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  has(chart) {\r\n    return this._getAnims(chart).items.length > 0;\r\n  }\r\n\r\n  /**\r\n\t * Start animating (all charts)\r\n\t * @param {Chart} chart\r\n\t */\r\n  start(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims) {\r\n      return;\r\n    }\r\n    anims.running = true;\r\n    anims.start = Date.now();\r\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\r\n    this._refresh();\r\n  }\r\n\r\n  running(chart) {\r\n    if (!this._running) {\r\n      return false;\r\n    }\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.running || !anims.items.length) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t * Stop all animations for the chart\r\n\t * @param {Chart} chart\r\n\t */\r\n  stop(chart) {\r\n    const anims = this._charts.get(chart);\r\n    if (!anims || !anims.items.length) {\r\n      return;\r\n    }\r\n    const items = anims.items;\r\n    let i = items.length - 1;\r\n\r\n    for (; i >= 0; --i) {\r\n      items[i].cancel();\r\n    }\r\n    anims.items = [];\r\n    this._notify(chart, anims, Date.now(), 'complete');\r\n  }\r\n\r\n  /**\r\n\t * Remove chart from Animator\r\n\t * @param {Chart} chart\r\n\t */\r\n  remove(chart) {\r\n    return this._charts.delete(chart);\r\n  }\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Animator();\r\n","import effects from '../helpers/helpers.easing.js';\r\nimport {resolve} from '../helpers/helpers.options.js';\r\nimport {color as helpersColor} from '../helpers/helpers.color.js';\r\n\r\nconst transparent = 'transparent';\r\nconst interpolators = {\r\n  boolean(from, to, factor) {\r\n    return factor > 0.5 ? to : from;\r\n  },\r\n  /**\r\n   * @param {string} from\r\n   * @param {string} to\r\n   * @param {number} factor\r\n   */\r\n  color(from, to, factor) {\r\n    const c0 = helpersColor(from || transparent);\r\n    const c1 = c0.valid && helpersColor(to || transparent);\r\n    return c1 && c1.valid\r\n      ? c1.mix(c0, factor).hexString()\r\n      : to;\r\n  },\r\n  number(from, to, factor) {\r\n    return from + (to - from) * factor;\r\n  }\r\n};\r\n\r\nexport default class Animation {\r\n  constructor(cfg, target, prop, to) {\r\n    const currentValue = target[prop];\r\n\r\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n    const from = resolve([cfg.from, currentValue, to]);\r\n\r\n    this._active = true;\r\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\r\n    this._easing = effects[cfg.easing] || effects.linear;\r\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\r\n    this._duration = this._total = Math.floor(cfg.duration);\r\n    this._loop = !!cfg.loop;\r\n    this._target = target;\r\n    this._prop = prop;\r\n    this._from = from;\r\n    this._to = to;\r\n    this._promises = undefined;\r\n  }\r\n\r\n  active() {\r\n    return this._active;\r\n  }\r\n\r\n  update(cfg, to, date) {\r\n    if (this._active) {\r\n      this._notify(false);\r\n\r\n      const currentValue = this._target[this._prop];\r\n      const elapsed = date - this._start;\r\n      const remain = this._duration - elapsed;\r\n      this._start = date;\r\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\r\n      this._total += elapsed;\r\n      this._loop = !!cfg.loop;\r\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\r\n      this._from = resolve([cfg.from, currentValue, to]);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this._active) {\r\n      // update current evaluated value, for smoother animations\r\n      this.tick(Date.now());\r\n      this._active = false;\r\n      this._notify(false);\r\n    }\r\n  }\r\n\r\n  tick(date) {\r\n    const elapsed = date - this._start;\r\n    const duration = this._duration;\r\n    const prop = this._prop;\r\n    const from = this._from;\r\n    const loop = this._loop;\r\n    const to = this._to;\r\n    let factor;\r\n\r\n    this._active = from !== to && (loop || (elapsed < duration));\r\n\r\n    if (!this._active) {\r\n      this._target[prop] = to;\r\n      this._notify(true);\r\n      return;\r\n    }\r\n\r\n    if (elapsed < 0) {\r\n      this._target[prop] = from;\r\n      return;\r\n    }\r\n\r\n    factor = (elapsed / duration) % 2;\r\n    factor = loop && factor > 1 ? 2 - factor : factor;\r\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\r\n\r\n    this._target[prop] = this._fn(from, to, factor);\r\n  }\r\n\r\n  wait() {\r\n    const promises = this._promises || (this._promises = []);\r\n    return new Promise((res, rej) => {\r\n      promises.push({res, rej});\r\n    });\r\n  }\r\n\r\n  _notify(resolved) {\r\n    const method = resolved ? 'res' : 'rej';\r\n    const promises = this._promises || [];\r\n    for (let i = 0; i < promises.length; i++) {\r\n      promises[i][method]();\r\n    }\r\n  }\r\n}\r\n","import animator from './core.animator.js';\r\nimport Animation from './core.animation.js';\r\nimport defaults from './core.defaults.js';\r\nimport {isArray, isObject} from '../helpers/helpers.core.js';\r\n\r\nexport default class Animations {\r\n  constructor(chart, config) {\r\n    this._chart = chart;\r\n    this._properties = new Map();\r\n    this.configure(config);\r\n  }\r\n\r\n  configure(config) {\r\n    if (!isObject(config)) {\r\n      return;\r\n    }\r\n\r\n    const animationOptions = Object.keys(defaults.animation);\r\n    const animatedProps = this._properties;\r\n\r\n    Object.getOwnPropertyNames(config).forEach(key => {\r\n      const cfg = config[key];\r\n      if (!isObject(cfg)) {\r\n        return;\r\n      }\r\n      const resolved = {};\r\n      for (const option of animationOptions) {\r\n        resolved[option] = cfg[option];\r\n      }\r\n\r\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\r\n        if (prop === key || !animatedProps.has(prop)) {\r\n          animatedProps.set(prop, resolved);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Utility to handle animation of `options`.\r\n\t * @private\r\n\t */\r\n  _animateOptions(target, values) {\r\n    const newOptions = values.options;\r\n    const options = resolveTargetOptions(target, newOptions);\r\n    if (!options) {\r\n      return [];\r\n    }\r\n\r\n    const animations = this._createAnimations(options, newOptions);\r\n    if (newOptions.$shared) {\r\n      // Going to shared options:\r\n      // After all animations are done, assign the shared options object to the element\r\n      // So any new updates to the shared options are observed\r\n      awaitAll(target.options.$animations, newOptions).then(() => {\r\n        target.options = newOptions;\r\n      }, () => {\r\n        // rejected, noop\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createAnimations(target, values) {\r\n    const animatedProps = this._properties;\r\n    const animations = [];\r\n    const running = target.$animations || (target.$animations = {});\r\n    const props = Object.keys(values);\r\n    const date = Date.now();\r\n    let i;\r\n\r\n    for (i = props.length - 1; i >= 0; --i) {\r\n      const prop = props[i];\r\n      if (prop.charAt(0) === '$') {\r\n        continue;\r\n      }\r\n\r\n      if (prop === 'options') {\r\n        animations.push(...this._animateOptions(target, values));\r\n        continue;\r\n      }\r\n      const value = values[prop];\r\n      let animation = running[prop];\r\n      const cfg = animatedProps.get(prop);\r\n\r\n      if (animation) {\r\n        if (cfg && animation.active()) {\r\n          // There is an existing active animation, let's update that\r\n          animation.update(cfg, value, date);\r\n          continue;\r\n        } else {\r\n          animation.cancel();\r\n        }\r\n      }\r\n      if (!cfg || !cfg.duration) {\r\n        // not animated, set directly to new value\r\n        target[prop] = value;\r\n        continue;\r\n      }\r\n\r\n      running[prop] = animation = new Animation(cfg, target, prop, value);\r\n      animations.push(animation);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n\r\n  /**\r\n\t * Update `target` properties to new values, using configured animations\r\n\t * @param {object} target - object to update\r\n\t * @param {object} values - new target properties\r\n\t * @returns {boolean|undefined} - `true` if animations were started\r\n\t **/\r\n  update(target, values) {\r\n    if (this._properties.size === 0) {\r\n      // Nothing is animated, just apply the new values.\r\n      Object.assign(target, values);\r\n      return;\r\n    }\r\n\r\n    const animations = this._createAnimations(target, values);\r\n\r\n    if (animations.length) {\r\n      animator.add(this._chart, animations);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction awaitAll(animations, properties) {\r\n  const running = [];\r\n  const keys = Object.keys(properties);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const anim = animations[keys[i]];\r\n    if (anim && anim.active()) {\r\n      running.push(anim.wait());\r\n    }\r\n  }\r\n  // @ts-ignore\r\n  return Promise.all(running);\r\n}\r\n\r\nfunction resolveTargetOptions(target, newOptions) {\r\n  if (!newOptions) {\r\n    return;\r\n  }\r\n  let options = target.options;\r\n  if (!options) {\r\n    target.options = newOptions;\r\n    return;\r\n  }\r\n  if (options.$shared) {\r\n    // Going from shared options to distinct one:\r\n    // Create new options object containing the old shared values and start updating that.\r\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\r\n  }\r\n  return options;\r\n}\r\n","import Animations from './core.animations.js';\r\nimport defaults from './core.defaults.js';\r\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\r\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\r\nimport {createContext, sign} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('./core.scale.js').default } Scale\r\n */\r\n\r\nfunction scaleClip(scale, allowedOverflow) {\r\n  const opts = scale && scale.options || {};\r\n  const reverse = opts.reverse;\r\n  const min = opts.min === undefined ? allowedOverflow : 0;\r\n  const max = opts.max === undefined ? allowedOverflow : 0;\r\n  return {\r\n    start: reverse ? max : min,\r\n    end: reverse ? min : max\r\n  };\r\n}\r\n\r\nfunction defaultClip(xScale, yScale, allowedOverflow) {\r\n  if (allowedOverflow === false) {\r\n    return false;\r\n  }\r\n  const x = scaleClip(xScale, allowedOverflow);\r\n  const y = scaleClip(yScale, allowedOverflow);\r\n\r\n  return {\r\n    top: y.end,\r\n    right: x.end,\r\n    bottom: y.start,\r\n    left: x.start\r\n  };\r\n}\r\n\r\nfunction toClip(value) {\r\n  let t, r, b, l;\r\n\r\n  if (isObject(value)) {\r\n    t = value.top;\r\n    r = value.right;\r\n    b = value.bottom;\r\n    l = value.left;\r\n  } else {\r\n    t = r = b = l = value;\r\n  }\r\n\r\n  return {\r\n    top: t,\r\n    right: r,\r\n    bottom: b,\r\n    left: l,\r\n    disabled: value === false\r\n  };\r\n}\r\n\r\nfunction getSortedDatasetIndices(chart, filterVisible) {\r\n  const keys = [];\r\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\r\n  let i, ilen;\r\n\r\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    keys.push(metasets[i].index);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction applyStack(stack, value, dsIndex, options = {}) {\r\n  const keys = stack.keys;\r\n  const singleMode = options.mode === 'single';\r\n  let i, ilen, datasetIndex, otherValue;\r\n\r\n  if (value === null) {\r\n    return;\r\n  }\r\n\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    datasetIndex = +keys[i];\r\n    if (datasetIndex === dsIndex) {\r\n      if (options.all) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n    otherValue = stack.values[datasetIndex];\r\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\r\n      value += otherValue;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction convertObjectDataToArray(data) {\r\n  const keys = Object.keys(data);\r\n  const adata = new Array(keys.length);\r\n  let i, ilen, key;\r\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\r\n    key = keys[i];\r\n    adata[i] = {\r\n      x: key,\r\n      y: data[key]\r\n    };\r\n  }\r\n  return adata;\r\n}\r\n\r\nfunction isStacked(scale, meta) {\r\n  const stacked = scale && scale.options.stacked;\r\n  return stacked || (stacked === undefined && meta.stack !== undefined);\r\n}\r\n\r\nfunction getStackKey(indexScale, valueScale, meta) {\r\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\r\n}\r\n\r\nfunction getUserBounds(scale) {\r\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\r\n  return {\r\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\r\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\r\n  };\r\n}\r\n\r\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\r\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\r\n  return subStack[indexValue] || (subStack[indexValue] = {});\r\n}\r\n\r\nfunction getLastIndexInStack(stack, vScale, positive, type) {\r\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\r\n    const value = stack[meta.index];\r\n    if ((positive && value > 0) || (!positive && value < 0)) {\r\n      return meta.index;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction updateStacks(controller, parsed) {\r\n  const {chart, _cachedMeta: meta} = controller;\r\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\r\n  const {iScale, vScale, index: datasetIndex} = meta;\r\n  const iAxis = iScale.axis;\r\n  const vAxis = vScale.axis;\r\n  const key = getStackKey(iScale, vScale, meta);\r\n  const ilen = parsed.length;\r\n  let stack;\r\n\r\n  for (let i = 0; i < ilen; ++i) {\r\n    const item = parsed[i];\r\n    const {[iAxis]: index, [vAxis]: value} = item;\r\n    const itemStacks = item._stacks || (item._stacks = {});\r\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\r\n    stack[datasetIndex] = value;\r\n\r\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\r\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\r\n\r\n    const visualValues = stack._visualValues || (stack._visualValues = {});\r\n    visualValues[datasetIndex] = value;\r\n  }\r\n}\r\n\r\nfunction getFirstScaleId(chart, axis) {\r\n  const scales = chart.scales;\r\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\r\n}\r\n\r\nfunction createDatasetContext(parent, index) {\r\n  return createContext(parent,\r\n    {\r\n      active: false,\r\n      dataset: undefined,\r\n      datasetIndex: index,\r\n      index,\r\n      mode: 'default',\r\n      type: 'dataset'\r\n    }\r\n  );\r\n}\r\n\r\nfunction createDataContext(parent, index, element) {\r\n  return createContext(parent, {\r\n    active: false,\r\n    dataIndex: index,\r\n    parsed: undefined,\r\n    raw: undefined,\r\n    element,\r\n    index,\r\n    mode: 'default',\r\n    type: 'data'\r\n  });\r\n}\r\n\r\nfunction clearStacks(meta, items) {\r\n  // Not using meta.index here, because it might be already updated if the dataset changed location\r\n  const datasetIndex = meta.controller.index;\r\n  const axis = meta.vScale && meta.vScale.axis;\r\n  if (!axis) {\r\n    return;\r\n  }\r\n\r\n  items = items || meta._parsed;\r\n  for (const parsed of items) {\r\n    const stacks = parsed._stacks;\r\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\r\n      return;\r\n    }\r\n    delete stacks[axis][datasetIndex];\r\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\r\n      delete stacks[axis]._visualValues[datasetIndex];\r\n    }\r\n  }\r\n}\r\n\r\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\r\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\r\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\r\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\r\n\r\nexport default class DatasetController {\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {};\r\n\r\n  /**\r\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\r\n   */\r\n  static datasetElementType = null;\r\n\r\n  /**\r\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\r\n   */\r\n  static dataElementType = null;\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {number} datasetIndex\r\n\t */\r\n  constructor(chart, datasetIndex) {\r\n    this.chart = chart;\r\n    this._ctx = chart.ctx;\r\n    this.index = datasetIndex;\r\n    this._cachedDataOpts = {};\r\n    this._cachedMeta = this.getMeta();\r\n    this._type = this._cachedMeta.type;\r\n    this.options = undefined;\r\n    /** @type {boolean | object} */\r\n    this._parsing = false;\r\n    this._data = undefined;\r\n    this._objectData = undefined;\r\n    this._sharedOptions = undefined;\r\n    this._drawStart = undefined;\r\n    this._drawCount = undefined;\r\n    this.enableOptionSharing = false;\r\n    this.supportsDecimation = false;\r\n    this.$context = undefined;\r\n    this._syncList = [];\r\n    this.datasetElementType = new.target.datasetElementType;\r\n    this.dataElementType = new.target.dataElementType;\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    const meta = this._cachedMeta;\r\n    this.configure();\r\n    this.linkScales();\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n    this.addElements();\r\n\r\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\r\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\r\n    }\r\n  }\r\n\r\n  updateIndex(datasetIndex) {\r\n    if (this.index !== datasetIndex) {\r\n      clearStacks(this._cachedMeta);\r\n    }\r\n    this.index = datasetIndex;\r\n  }\r\n\r\n  linkScales() {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n\r\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\r\n\r\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\r\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\r\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\r\n    const indexAxis = meta.indexAxis;\r\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\r\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\r\n    meta.xScale = this.getScaleForId(xid);\r\n    meta.yScale = this.getScaleForId(yid);\r\n    meta.rScale = this.getScaleForId(rid);\r\n    meta.iScale = this.getScaleForId(iid);\r\n    meta.vScale = this.getScaleForId(vid);\r\n  }\r\n\r\n  getDataset() {\r\n    return this.chart.data.datasets[this.index];\r\n  }\r\n\r\n  getMeta() {\r\n    return this.chart.getDatasetMeta(this.index);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} scaleID\r\n\t * @return {Scale}\r\n\t */\r\n  getScaleForId(scaleID) {\r\n    return this.chart.scales[scaleID];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getOtherScale(scale) {\r\n    const meta = this._cachedMeta;\r\n    return scale === meta.iScale\r\n      ? meta.vScale\r\n      : meta.iScale;\r\n  }\r\n\r\n  reset() {\r\n    this._update('reset');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroy() {\r\n    const meta = this._cachedMeta;\r\n    if (this._data) {\r\n      unlistenArrayEvents(this._data, this);\r\n    }\r\n    if (meta._stacked) {\r\n      clearStacks(meta);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _dataCheck() {\r\n    const dataset = this.getDataset();\r\n    const data = dataset.data || (dataset.data = []);\r\n    const _data = this._data;\r\n\r\n    // In order to correctly handle data addition/deletion animation (and thus simulate\r\n    // real-time charts), we need to monitor these data modifications and synchronize\r\n    // the internal metadata accordingly.\r\n\r\n    if (isObject(data)) {\r\n      this._data = convertObjectDataToArray(data);\r\n    } else if (_data !== data) {\r\n      if (_data) {\r\n        // This case happens when the user replaced the data array instance.\r\n        unlistenArrayEvents(_data, this);\r\n        // Discard old parsed data and stacks\r\n        const meta = this._cachedMeta;\r\n        clearStacks(meta);\r\n        meta._parsed = [];\r\n      }\r\n      if (data && Object.isExtensible(data)) {\r\n        listenArrayEvents(data, this);\r\n      }\r\n      this._syncList = [];\r\n      this._data = data;\r\n    }\r\n  }\r\n\r\n  addElements() {\r\n    const meta = this._cachedMeta;\r\n\r\n    this._dataCheck();\r\n\r\n    if (this.datasetElementType) {\r\n      meta.dataset = new this.datasetElementType();\r\n    }\r\n  }\r\n\r\n  buildOrUpdateElements(resetNewElements) {\r\n    const meta = this._cachedMeta;\r\n    const dataset = this.getDataset();\r\n    let stackChanged = false;\r\n\r\n    this._dataCheck();\r\n\r\n    // make sure cached _stacked status is current\r\n    const oldStacked = meta._stacked;\r\n    meta._stacked = isStacked(meta.vScale, meta);\r\n\r\n    // detect change in stack option\r\n    if (meta.stack !== dataset.stack) {\r\n      stackChanged = true;\r\n      // remove values from old stack\r\n      clearStacks(meta);\r\n      meta.stack = dataset.stack;\r\n    }\r\n\r\n    // Re-sync meta data in case the user replaced the data array or if we missed\r\n    // any updates and so make sure that we handle number of datapoints changing.\r\n    this._resyncElements(resetNewElements);\r\n\r\n    // if stack changed, update stack values for the whole dataset\r\n    if (stackChanged || oldStacked !== meta._stacked) {\r\n      updateStacks(this, meta._parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Merges user-supplied and default dataset-level options\r\n\t * @private\r\n\t */\r\n  configure() {\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetScopeKeys(this._type);\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\r\n    this.options = config.createResolver(scopes, this.getContext());\r\n    this._parsing = this.options.parsing;\r\n    this._cachedDataOpts = {};\r\n  }\r\n\r\n  /**\r\n\t * @param {number} start\r\n\t * @param {number} count\r\n\t */\r\n  parse(start, count) {\r\n    const {_cachedMeta: meta, _data: data} = this;\r\n    const {iScale, _stacked} = meta;\r\n    const iAxis = iScale.axis;\r\n\r\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\r\n    let prev = start > 0 && meta._parsed[start - 1];\r\n    let i, cur, parsed;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n      meta._sorted = true;\r\n      parsed = data;\r\n    } else {\r\n      if (isArray(data[start])) {\r\n        parsed = this.parseArrayData(meta, data, start, count);\r\n      } else if (isObject(data[start])) {\r\n        parsed = this.parseObjectData(meta, data, start, count);\r\n      } else {\r\n        parsed = this.parsePrimitiveData(meta, data, start, count);\r\n      }\r\n\r\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\r\n      for (i = 0; i < count; ++i) {\r\n        meta._parsed[i + start] = cur = parsed[i];\r\n        if (sorted) {\r\n          if (isNotInOrderComparedToPrev()) {\r\n            sorted = false;\r\n          }\r\n          prev = cur;\r\n        }\r\n      }\r\n      meta._sorted = sorted;\r\n    }\r\n\r\n    if (_stacked) {\r\n      updateStacks(this, parsed);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [1,3,4]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {xScale0: 0, yScale0: 1}\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const labels = iScale.getLabels();\r\n    const singleScale = iScale === vScale;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      parsed[i] = {\r\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\r\n        [vAxis]: vScale.parse(data[index], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id.\r\n\t * Example: {x: 0, y: 1}\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(item[0], index),\r\n        y: yScale.parse(item[1], index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @param {object} meta - dataset meta\r\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\r\n\t * @param {number} start - start index\r\n\t * @param {number} count - number of items to parse\r\n\t * @returns {object} parsed item - item containing index and a parsed value\r\n\t * for each scale id. _custom is optional\r\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {xScale, yScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n\r\n    for (i = 0, ilen = count; i < ilen; ++i) {\r\n      index = i + start;\r\n      item = data[index];\r\n      parsed[i] = {\r\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\r\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\r\n      };\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getParsed(index) {\r\n    return this._cachedMeta._parsed[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataElement(index) {\r\n    return this._cachedMeta.data[index];\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  applyStack(scale, parsed, mode) {\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const value = parsed[scale.axis];\r\n    const stack = {\r\n      keys: getSortedDatasetIndices(chart, true),\r\n      values: parsed._stacks[scale.axis]._visualValues\r\n    };\r\n    return applyStack(stack, value, meta.index, {mode});\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    const parsedValue = parsed[scale.axis];\r\n    let value = parsedValue === null ? NaN : parsedValue;\r\n    const values = stack && parsed._stacks[scale.axis];\r\n    if (stack && values) {\r\n      stack.values = values;\r\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\r\n    }\r\n    range.min = Math.min(range.min, value);\r\n    range.max = Math.max(range.max, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMinMax(scale, canStack) {\r\n    const meta = this._cachedMeta;\r\n    const _parsed = meta._parsed;\r\n    const sorted = meta._sorted && scale === meta.iScale;\r\n    const ilen = _parsed.length;\r\n    const otherScale = this._getOtherScale(scale);\r\n    const stack = createStack(canStack, meta, this.chart);\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\r\n    let i, parsed;\r\n\r\n    function _skip() {\r\n      parsed = _parsed[i];\r\n      const otherValue = parsed[otherScale.axis];\r\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\r\n    }\r\n\r\n    for (i = 0; i < ilen; ++i) {\r\n      if (_skip()) {\r\n        continue;\r\n      }\r\n      this.updateRangeFromParsed(range, scale, parsed, stack);\r\n      if (sorted) {\r\n        // if the data is sorted, we don't need to check further from this end of array\r\n        break;\r\n      }\r\n    }\r\n    if (sorted) {\r\n      // in the sorted case, find first non-skipped value from other end of array\r\n      for (i = ilen - 1; i >= 0; --i) {\r\n        if (_skip()) {\r\n          continue;\r\n        }\r\n        this.updateRangeFromParsed(range, scale, parsed, stack);\r\n        break;\r\n      }\r\n    }\r\n    return range;\r\n  }\r\n\r\n  getAllParsedValues(scale) {\r\n    const parsed = this._cachedMeta._parsed;\r\n    const values = [];\r\n    let i, ilen, value;\r\n\r\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\r\n      value = parsed[i][scale.axis];\r\n      if (isFinite(value)) {\r\n        values.push(value);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const vScale = meta.vScale;\r\n    const parsed = this.getParsed(index);\r\n    return {\r\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\r\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.update(mode || 'default');\r\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  draw() {\r\n    const ctx = this._ctx;\r\n    const chart = this.chart;\r\n    const meta = this._cachedMeta;\r\n    const elements = meta.data || [];\r\n    const area = chart.chartArea;\r\n    const active = [];\r\n    const start = this._drawStart || 0;\r\n    const count = this._drawCount || (elements.length - start);\r\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\r\n    let i;\r\n\r\n    if (meta.dataset) {\r\n      meta.dataset.draw(ctx, area, start, count);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const element = elements[i];\r\n      if (element.hidden) {\r\n        continue;\r\n      }\r\n      if (element.active && drawActiveElementsOnTop) {\r\n        active.push(element);\r\n      } else {\r\n        element.draw(ctx, area);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < active.length; ++i) {\r\n      active[i].draw(ctx, area);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns a set of predefined style properties that should be used to represent the dataset\r\n\t * or the data if the index is specified\r\n\t * @param {number} index - data index\r\n\t * @param {boolean} [active] - true if hover\r\n\t * @return {object} style object\r\n\t */\r\n  getStyle(index, active) {\r\n    const mode = active ? 'active' : 'default';\r\n    return index === undefined && this._cachedMeta.dataset\r\n      ? this.resolveDatasetElementOptions(mode)\r\n      : this.resolveDataElementOptions(index || 0, mode);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index, active, mode) {\r\n    const dataset = this.getDataset();\r\n    let context;\r\n    if (index >= 0 && index < this._cachedMeta.data.length) {\r\n      const element = this._cachedMeta.data[index];\r\n      context = element.$context ||\r\n        (element.$context = createDataContext(this.getContext(), index, element));\r\n      context.parsed = this.getParsed(index);\r\n      context.raw = dataset.data[index];\r\n      context.index = context.dataIndex = index;\r\n    } else {\r\n      context = this.$context ||\r\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\r\n      context.dataset = dataset;\r\n      context.index = context.datasetIndex = this.index;\r\n    }\r\n\r\n    context.active = !!active;\r\n    context.mode = mode;\r\n    return context;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDatasetElementOptions(mode) {\r\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveElementOptions(elementType, mode = 'default', index) {\r\n    const active = mode === 'active';\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = elementType + '-' + mode;\r\n    const cached = cache[cacheKey];\r\n    const sharing = this.enableOptionSharing && defined(index);\r\n    if (cached) {\r\n      return cloneIfNotShared(cached, sharing);\r\n    }\r\n    const config = this.chart.config;\r\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\r\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\r\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n    const names = Object.keys(defaults.elements[elementType]);\r\n    // context is provided as a function, and is called only if needed,\r\n    // so we don't create a context for each element if not needed.\r\n    const context = () => this.getContext(index, active, mode);\r\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\r\n\r\n    if (values.$shared) {\r\n      // `$shared` indicates this set of options can be shared between multiple elements.\r\n      // Sharing is used to reduce number of properties to change during animation.\r\n      values.$shared = sharing;\r\n\r\n      // We cache options by `mode`, which can be 'active' for example. This enables us\r\n      // to have the 'active' element options and 'default' options to switch between\r\n      // when interacting.\r\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations(index, transition, active) {\r\n    const chart = this.chart;\r\n    const cache = this._cachedDataOpts;\r\n    const cacheKey = `animation-${transition}`;\r\n    const cached = cache[cacheKey];\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    let options;\r\n    if (chart.options.animation !== false) {\r\n      const config = this.chart.config;\r\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\r\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\r\n    }\r\n    const animations = new Animations(chart, options && options.animations);\r\n    if (options && options._cacheable) {\r\n      cache[cacheKey] = Object.freeze(animations);\r\n    }\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the options object shared between elements\r\n\t * @protected\r\n\t */\r\n  getSharedOptions(options) {\r\n    if (!options.$shared) {\r\n      return;\r\n    }\r\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\r\n  }\r\n\r\n  /**\r\n\t * Utility for determining if `options` should be included in the updated properties\r\n\t * @protected\r\n\t */\r\n  includeOptions(mode, sharedOptions) {\r\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\r\n  }\r\n\r\n  /**\r\n   * @todo v4, rename to getSharedOptions and remove excess functions\r\n   */\r\n  _getSharedOptions(start, mode) {\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const previouslySharedOptions = this._sharedOptions;\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n    return {sharedOptions, includeOptions};\r\n  }\r\n\r\n  /**\r\n\t * Utility for updating an element with new properties, using animations when appropriate.\r\n\t * @protected\r\n\t */\r\n  updateElement(element, index, properties, mode) {\r\n    if (isDirectUpdateMode(mode)) {\r\n      Object.assign(element, properties);\r\n    } else {\r\n      this._resolveAnimations(index, mode).update(element, properties);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\r\n\t * @protected\r\n\t */\r\n  updateSharedOptions(sharedOptions, mode, newOptions) {\r\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\r\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setStyle(element, index, mode, active) {\r\n    element.active = active;\r\n    const options = this.getStyle(index, active);\r\n    this._resolveAnimations(index, mode, active).update(element, {\r\n      // When going from active to inactive, we need to update to the shared options.\r\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\r\n      options: (!active && this.getSharedOptions(options)) || options\r\n    });\r\n  }\r\n\r\n  removeHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', false);\r\n  }\r\n\r\n  setHoverStyle(element, datasetIndex, index) {\r\n    this._setStyle(element, index, 'active', true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', false);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _setDatasetHoverStyle() {\r\n    const element = this._cachedMeta.dataset;\r\n\r\n    if (element) {\r\n      this._setStyle(element, undefined, 'active', true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resyncElements(resetNewElements) {\r\n    const data = this._data;\r\n    const elements = this._cachedMeta.data;\r\n\r\n    // Apply changes detected through array listeners\r\n    for (const [method, arg1, arg2] of this._syncList) {\r\n      this[method](arg1, arg2);\r\n    }\r\n    this._syncList = [];\r\n\r\n    const numMeta = elements.length;\r\n    const numData = data.length;\r\n    const count = Math.min(numData, numMeta);\r\n\r\n    if (count) {\r\n      // TODO: It is not optimal to always parse the old data\r\n      // This is done because we are not detecting direct assignments:\r\n      // chart.data.datasets[0].data[5] = 10;\r\n      // chart.data.datasets[0].data[5].y = 10;\r\n      this.parse(0, count);\r\n    }\r\n\r\n    if (numData > numMeta) {\r\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\r\n    } else if (numData < numMeta) {\r\n      this._removeElements(numData, numMeta - numData);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _insertElements(start, count, resetNewElements = true) {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data;\r\n    const end = start + count;\r\n    let i;\r\n\r\n    const move = (arr) => {\r\n      arr.length += count;\r\n      for (i = arr.length - 1; i >= end; i--) {\r\n        arr[i] = arr[i - count];\r\n      }\r\n    };\r\n    move(data);\r\n\r\n    for (i = start; i < end; ++i) {\r\n      data[i] = new this.dataElementType();\r\n    }\r\n\r\n    if (this._parsing) {\r\n      move(meta._parsed);\r\n    }\r\n    this.parse(start, count);\r\n\r\n    if (resetNewElements) {\r\n      this.updateElements(data, start, count, 'reset');\r\n    }\r\n  }\r\n\r\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeElements(start, count) {\r\n    const meta = this._cachedMeta;\r\n    if (this._parsing) {\r\n      const removed = meta._parsed.splice(start, count);\r\n      if (meta._stacked) {\r\n        clearStacks(meta, removed);\r\n      }\r\n    }\r\n    meta.data.splice(start, count);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n   */\r\n  _sync(args) {\r\n    if (this._parsing) {\r\n      this._syncList.push(args);\r\n    } else {\r\n      const [method, arg1, arg2] = args;\r\n      this[method](arg1, arg2);\r\n    }\r\n    this.chart._dataChanges.push([this.index, ...args]);\r\n  }\r\n\r\n  _onDataPush() {\r\n    const count = arguments.length;\r\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\r\n  }\r\n\r\n  _onDataPop() {\r\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\r\n  }\r\n\r\n  _onDataShift() {\r\n    this._sync(['_removeElements', 0, 1]);\r\n  }\r\n\r\n  _onDataSplice(start, count) {\r\n    if (count) {\r\n      this._sync(['_removeElements', start, count]);\r\n    }\r\n    const newCount = arguments.length - 2;\r\n    if (newCount) {\r\n      this._sync(['_insertElements', start, newCount]);\r\n    }\r\n  }\r\n\r\n  _onDataUnshift() {\r\n    this._sync(['_insertElements', 0, arguments.length]);\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {\r\n  _arrayUnique, isArray, isNullOrUndef,\r\n  valueOrDefault, resolveObjectKey, sign, defined\r\n} from '../helpers/index.js';\r\n\r\nfunction getAllScaleValues(scale, type) {\r\n  if (!scale._cache.$bar) {\r\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\r\n    let values = [];\r\n\r\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\r\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\r\n    }\r\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\r\n  }\r\n  return scale._cache.$bar;\r\n}\r\n\r\n/**\r\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\r\n * @private\r\n */\r\nfunction computeMinSampleSize(meta) {\r\n  const scale = meta.iScale;\r\n  const values = getAllScaleValues(scale, meta.type);\r\n  let min = scale._length;\r\n  let i, ilen, curr, prev;\r\n  const updateMinAndPrev = () => {\r\n    if (curr === 32767 || curr === -32768) {\r\n      // Ignore truncated pixels\r\n      return;\r\n    }\r\n    if (defined(prev)) {\r\n      // curr - prev === 0 is ignored\r\n      min = Math.min(min, Math.abs(curr - prev) || min);\r\n    }\r\n    prev = curr;\r\n  };\r\n\r\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForValue(values[i]);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  prev = undefined;\r\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\r\n    curr = scale.getPixelForTick(i);\r\n    updateMinAndPrev();\r\n  }\r\n\r\n  return min;\r\n}\r\n\r\n/**\r\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\r\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\r\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\r\n * @private\r\n */\r\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\r\n  const thickness = options.barThickness;\r\n  let size, ratio;\r\n\r\n  if (isNullOrUndef(thickness)) {\r\n    size = ruler.min * options.categoryPercentage;\r\n    ratio = options.barPercentage;\r\n  } else {\r\n    // When bar thickness is enforced, category and bar percentages are ignored.\r\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\r\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\r\n    size = thickness * stackCount;\r\n    ratio = 1;\r\n  }\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio,\r\n    start: ruler.pixels[index] - (size / 2)\r\n  };\r\n}\r\n\r\n/**\r\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\r\n * percentage options are 1), based on the previous and following categories. This mode\r\n * generates bars with different widths when data are not evenly spaced.\r\n * @private\r\n */\r\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\r\n  const pixels = ruler.pixels;\r\n  const curr = pixels[index];\r\n  let prev = index > 0 ? pixels[index - 1] : null;\r\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\r\n  const percent = options.categoryPercentage;\r\n\r\n  if (prev === null) {\r\n    // first data: its size is double based on the next point or,\r\n    // if it's also the last data, we use the scale size.\r\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\r\n  }\r\n\r\n  if (next === null) {\r\n    // last data: its size is also double based on the previous point.\r\n    next = curr + curr - prev;\r\n  }\r\n\r\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\r\n  const size = Math.abs(next - prev) / 2 * percent;\r\n\r\n  return {\r\n    chunk: size / stackCount,\r\n    ratio: options.barPercentage,\r\n    start\r\n  };\r\n}\r\n\r\nfunction parseFloatBar(entry, item, vScale, i) {\r\n  const startValue = vScale.parse(entry[0], i);\r\n  const endValue = vScale.parse(entry[1], i);\r\n  const min = Math.min(startValue, endValue);\r\n  const max = Math.max(startValue, endValue);\r\n  let barStart = min;\r\n  let barEnd = max;\r\n\r\n  if (Math.abs(min) > Math.abs(max)) {\r\n    barStart = max;\r\n    barEnd = min;\r\n  }\r\n\r\n  // Store `barEnd` (furthest away from origin) as parsed value,\r\n  // to make stacking straight forward\r\n  item[vScale.axis] = barEnd;\r\n\r\n  item._custom = {\r\n    barStart,\r\n    barEnd,\r\n    start: startValue,\r\n    end: endValue,\r\n    min,\r\n    max\r\n  };\r\n}\r\n\r\nfunction parseValue(entry, item, vScale, i) {\r\n  if (isArray(entry)) {\r\n    parseFloatBar(entry, item, vScale, i);\r\n  } else {\r\n    item[vScale.axis] = vScale.parse(entry, i);\r\n  }\r\n  return item;\r\n}\r\n\r\nfunction parseArrayOrPrimitive(meta, data, start, count) {\r\n  const iScale = meta.iScale;\r\n  const vScale = meta.vScale;\r\n  const labels = iScale.getLabels();\r\n  const singleScale = iScale === vScale;\r\n  const parsed = [];\r\n  let i, ilen, item, entry;\r\n\r\n  for (i = start, ilen = start + count; i < ilen; ++i) {\r\n    entry = data[i];\r\n    item = {};\r\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\r\n    parsed.push(parseValue(entry, item, vScale, i));\r\n  }\r\n  return parsed;\r\n}\r\n\r\nfunction isFloatBar(custom) {\r\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\r\n}\r\n\r\nfunction barSign(size, vScale, actualBase) {\r\n  if (size !== 0) {\r\n    return sign(size);\r\n  }\r\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\r\n}\r\n\r\nfunction borderProps(properties) {\r\n  let reverse, start, end, top, bottom;\r\n  if (properties.horizontal) {\r\n    reverse = properties.base > properties.x;\r\n    start = 'left';\r\n    end = 'right';\r\n  } else {\r\n    reverse = properties.base < properties.y;\r\n    start = 'bottom';\r\n    end = 'top';\r\n  }\r\n  if (reverse) {\r\n    top = 'end';\r\n    bottom = 'start';\r\n  } else {\r\n    top = 'start';\r\n    bottom = 'end';\r\n  }\r\n  return {start, end, reverse, top, bottom};\r\n}\r\n\r\nfunction setBorderSkipped(properties, options, stack, index) {\r\n  let edge = options.borderSkipped;\r\n  const res = {};\r\n\r\n  if (!edge) {\r\n    properties.borderSkipped = res;\r\n    return;\r\n  }\r\n\r\n  if (edge === true) {\r\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\r\n    return;\r\n  }\r\n\r\n  const {start, end, reverse, top, bottom} = borderProps(properties);\r\n\r\n  if (edge === 'middle' && stack) {\r\n    properties.enableBorderRadius = true;\r\n    if ((stack._top || 0) === index) {\r\n      edge = top;\r\n    } else if ((stack._bottom || 0) === index) {\r\n      edge = bottom;\r\n    } else {\r\n      res[parseEdge(bottom, start, end, reverse)] = true;\r\n      edge = top;\r\n    }\r\n  }\r\n\r\n  res[parseEdge(edge, start, end, reverse)] = true;\r\n  properties.borderSkipped = res;\r\n}\r\n\r\nfunction parseEdge(edge, a, b, reverse) {\r\n  if (reverse) {\r\n    edge = swap(edge, a, b);\r\n    edge = startEnd(edge, b, a);\r\n  } else {\r\n    edge = startEnd(edge, a, b);\r\n  }\r\n  return edge;\r\n}\r\n\r\nfunction swap(orig, v1, v2) {\r\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\r\n}\r\n\r\nfunction startEnd(v, start, end) {\r\n  return v === 'start' ? start : v === 'end' ? end : v;\r\n}\r\n\r\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\r\n  properties.inflateAmount = inflateAmount === 'auto'\r\n    ? ratio === 1 ? 0.33 : 0\r\n    : inflateAmount;\r\n}\r\n\r\nexport default class BarController extends DatasetController {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'bar',\r\n\r\n    categoryPercentage: 0.8,\r\n    barPercentage: 0.9,\r\n    grouped: true,\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'base', 'width', 'height']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n        offset: true,\r\n        grid: {\r\n          offset: true\r\n        }\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n        beginAtZero: true,\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n\t * Overriding primitive data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding array data parsing since we support mixed primitive/array\r\n\t * data for float bars\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    return parseArrayOrPrimitive(meta, data, start, count);\r\n  }\r\n\r\n  /**\r\n\t * Overriding object data parsing since we support mixed primitive/array\r\n\t * value-scale data for float bars\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const {iScale, vScale} = meta;\r\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\r\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n    const parsed = [];\r\n    let i, ilen, item, obj;\r\n    for (i = start, ilen = start + count; i < ilen; ++i) {\r\n      obj = data[i];\r\n      item = {};\r\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\r\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  updateRangeFromParsed(range, scale, parsed, stack) {\r\n    super.updateRangeFromParsed(range, scale, parsed, stack);\r\n    const custom = parsed._custom;\r\n    if (custom && scale === this._cachedMeta.vScale) {\r\n      // float bar: only one end of the bar is considered by `super`\r\n      range.min = Math.min(range.min, custom.min);\r\n      range.max = Math.max(range.max, custom.max);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @return {number|boolean}\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const {iScale, vScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const value = isFloatBar(custom)\r\n      ? '[' + custom.start + ', ' + custom.end + ']'\r\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\r\n\r\n    return {\r\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\r\n      value\r\n    };\r\n  }\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n\r\n    super.initialize();\r\n\r\n    const meta = this._cachedMeta;\r\n    meta.stack = this.getDataset().stack;\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    this.updateElements(meta.data, 0, meta.data.length, mode);\r\n  }\r\n\r\n  updateElements(bars, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {index, _cachedMeta: {vScale}} = this;\r\n    const base = vScale.getBasePixel();\r\n    const horizontal = vScale.isHorizontal();\r\n    const ruler = this._getRuler();\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const parsed = this.getParsed(i);\r\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\r\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\r\n      const stack = (parsed._stacks || {})[vScale.axis];\r\n\r\n      const properties = {\r\n        horizontal,\r\n        base: vpixels.base,\r\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\r\n        x: horizontal ? vpixels.head : ipixels.center,\r\n        y: horizontal ? ipixels.center : vpixels.head,\r\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\r\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\r\n      };\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\r\n      }\r\n      const options = properties.options || bars[i].options;\r\n      setBorderSkipped(properties, options, stack, index);\r\n      setInflateAmount(properties, options, ruler.ratio);\r\n      this.updateElement(bars[i], i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the stacks based on groups and bar visibility.\r\n\t * @param {number} [last] - The dataset index\r\n\t * @param {number} [dataIndex] - The data index of the ruler\r\n\t * @returns {string[]} The list of stack IDs\r\n\t * @private\r\n\t */\r\n  _getStacks(last, dataIndex) {\r\n    const {iScale} = this._cachedMeta;\r\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\r\n      .filter(meta => meta.controller.options.grouped);\r\n    const stacked = iScale.options.stacked;\r\n    const stacks = [];\r\n\r\n    const skipNull = (meta) => {\r\n      const parsed = meta.controller.getParsed(dataIndex);\r\n      const val = parsed && parsed[meta.vScale.axis];\r\n\r\n      if (isNullOrUndef(val) || isNaN(val)) {\r\n        return true;\r\n      }\r\n    };\r\n\r\n    for (const meta of metasets) {\r\n      if (dataIndex !== undefined && skipNull(meta)) {\r\n        continue;\r\n      }\r\n\r\n      // stacked   | meta.stack\r\n      //           | found | not found | undefined\r\n      // false     |   x   |     x     |     x\r\n      // true      |       |     x     |\r\n      // undefined |       |     x     |     x\r\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\r\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\r\n        stacks.push(meta.stack);\r\n      }\r\n      if (meta.index === last) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\r\n    // stack where possible invisible bars will be located.\r\n    // https://github.com/chartjs/Chart.js/issues/6368\r\n    if (!stacks.length) {\r\n      stacks.push(undefined);\r\n    }\r\n\r\n    return stacks;\r\n  }\r\n\r\n  /**\r\n\t * Returns the effective number of stacks based on groups and bar visibility.\r\n\t * @private\r\n\t */\r\n  _getStackCount(index) {\r\n    return this._getStacks(undefined, index).length;\r\n  }\r\n\r\n  /**\r\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\r\n\t * @param {number} [datasetIndex] - The dataset index\r\n\t * @param {string} [name] - The stack name to find\r\n   * @param {number} [dataIndex]\r\n\t * @returns {number} The stack index\r\n\t * @private\r\n\t */\r\n  _getStackIndex(datasetIndex, name, dataIndex) {\r\n    const stacks = this._getStacks(datasetIndex, dataIndex);\r\n    const index = (name !== undefined)\r\n      ? stacks.indexOf(name)\r\n      : -1; // indexOf returns -1 if element is not present\r\n\r\n    return (index === -1)\r\n      ? stacks.length - 1\r\n      : index;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRuler() {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const iScale = meta.iScale;\r\n    const pixels = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\r\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\r\n    }\r\n\r\n    const barThickness = opts.barThickness;\r\n    const min = barThickness || computeMinSampleSize(meta);\r\n\r\n    return {\r\n      min,\r\n      pixels,\r\n      start: iScale._startPixel,\r\n      end: iScale._endPixel,\r\n      stackCount: this._getStackCount(),\r\n      scale: iScale,\r\n      grouped: opts.grouped,\r\n      // bar thickness ratio used for non-grouped bars\r\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Note: pixel values are not clamped to the scale area.\r\n\t * @private\r\n\t */\r\n  _calculateBarValuePixels(index) {\r\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\r\n    const actualBase = baseValue || 0;\r\n    const parsed = this.getParsed(index);\r\n    const custom = parsed._custom;\r\n    const floating = isFloatBar(custom);\r\n    let value = parsed[vScale.axis];\r\n    let start = 0;\r\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\r\n    let head, size;\r\n\r\n    if (length !== value) {\r\n      start = length - value;\r\n      length = value;\r\n    }\r\n\r\n    if (floating) {\r\n      value = custom.barStart;\r\n      length = custom.barEnd - custom.barStart;\r\n      // bars crossing origin are not stacked\r\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\r\n        start = 0;\r\n      }\r\n      start += value;\r\n    }\r\n\r\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\r\n    let base = vScale.getPixelForValue(startValue);\r\n\r\n    if (this.chart.getDataVisibility(index)) {\r\n      head = vScale.getPixelForValue(start + length);\r\n    } else {\r\n      // When not visible, no height\r\n      head = base;\r\n    }\r\n\r\n    size = head - base;\r\n\r\n    if (Math.abs(size) < minBarLength) {\r\n      size = barSign(size, vScale, actualBase) * minBarLength;\r\n      if (value === actualBase) {\r\n        base -= size / 2;\r\n      }\r\n      const startPixel = vScale.getPixelForDecimal(0);\r\n      const endPixel = vScale.getPixelForDecimal(1);\r\n      const min = Math.min(startPixel, endPixel);\r\n      const max = Math.max(startPixel, endPixel);\r\n      base = Math.max(Math.min(base, max), min);\r\n      head = base + size;\r\n\r\n      if (_stacked && !floating) {\r\n        // visual data coordinates after applying minBarLength\r\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\r\n      }\r\n    }\r\n\r\n    if (base === vScale.getPixelForValue(actualBase)) {\r\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\r\n      base += halfGrid;\r\n      size -= halfGrid;\r\n    }\r\n\r\n    return {\r\n      size,\r\n      base,\r\n      head,\r\n      center: head + size / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _calculateBarIndexPixels(index, ruler) {\r\n    const scale = ruler.scale;\r\n    const options = this.options;\r\n    const skipNull = options.skipNull;\r\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\r\n    let center, size;\r\n    if (ruler.grouped) {\r\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\r\n      const range = options.barThickness === 'flex'\r\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\r\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\r\n\r\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\r\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\r\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\r\n    } else {\r\n      // For non-grouped bar charts, exact pixel values are used\r\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\r\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\r\n    }\r\n\r\n    return {\r\n      base: center - size / 2,\r\n      head: center + size / 2,\r\n      center,\r\n      size\r\n    };\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    const vScale = meta.vScale;\r\n    const rects = meta.data;\r\n    const ilen = rects.length;\r\n    let i = 0;\r\n\r\n    for (; i < ilen; ++i) {\r\n      if (this.getParsed(i)[vScale.axis] !== null) {\r\n        rects[i].draw(this._ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {valueOrDefault} from '../helpers/helpers.core.js';\r\n\r\nexport default class BubbleController extends DatasetController {\r\n\r\n  static id = 'bubble';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'borderWidth', 'radius']\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    super.initialize();\r\n  }\r\n\r\n  /**\r\n\t * Parse array of primitive values\r\n\t * @protected\r\n\t */\r\n  parsePrimitiveData(meta, data, start, count) {\r\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of arrays\r\n\t * @protected\r\n\t */\r\n  parseArrayData(meta, data, start, count) {\r\n    const parsed = super.parseArrayData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * Parse array of objects\r\n\t * @protected\r\n\t */\r\n  parseObjectData(meta, data, start, count) {\r\n    const parsed = super.parseObjectData(meta, data, start, count);\r\n    for (let i = 0; i < parsed.length; i++) {\r\n      const item = data[start + i];\r\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const data = this._cachedMeta.data;\r\n\r\n    let max = 0;\r\n    for (let i = data.length - 1; i >= 0; --i) {\r\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n    }\r\n    return max > 0 && max;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n    const r = parsed._custom;\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const points = this._cachedMeta.data;\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const parsed = !reset && this.getParsed(i);\r\n      const properties = {};\r\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\r\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n\r\n        if (reset) {\r\n          properties.options.radius = 0;\r\n        }\r\n      }\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @param {string} [mode]\r\n\t * @protected\r\n\t */\r\n  resolveDataElementOptions(index, mode) {\r\n    const parsed = this.getParsed(index);\r\n    let values = super.resolveDataElementOptions(index, mode);\r\n\r\n    // In case values were cached (and thus frozen), we need to clone the values\r\n    if (values.$shared) {\r\n      values = Object.assign({}, values, {$shared: false});\r\n    }\r\n\r\n    // Custom radius resolution\r\n    const radius = values.radius;\r\n    if (mode !== 'active') {\r\n      values.radius = 0;\r\n    }\r\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\r\n\r\n    return values;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\nfunction getRatioAndOffset(rotation, circumference, cutout) {\r\n  let ratioX = 1;\r\n  let ratioY = 1;\r\n  let offsetX = 0;\r\n  let offsetY = 0;\r\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\r\n  if (circumference < TAU) {\r\n    const startAngle = rotation;\r\n    const endAngle = startAngle + circumference;\r\n    const startX = Math.cos(startAngle);\r\n    const startY = Math.sin(startAngle);\r\n    const endX = Math.cos(endAngle);\r\n    const endY = Math.sin(endAngle);\r\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\r\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\r\n    const maxX = calcMax(0, startX, endX);\r\n    const maxY = calcMax(HALF_PI, startY, endY);\r\n    const minX = calcMin(PI, startX, endX);\r\n    const minY = calcMin(PI + HALF_PI, startY, endY);\r\n    ratioX = (maxX - minX) / 2;\r\n    ratioY = (maxY - minY) / 2;\r\n    offsetX = -(maxX + minX) / 2;\r\n    offsetY = -(maxY + minY) / 2;\r\n  }\r\n  return {ratioX, ratioY, offsetX, offsetY};\r\n}\r\n\r\nexport default class DoughnutController extends DatasetController {\r\n\r\n  static id = 'doughnut';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      // Boolean - Whether we animate the rotation of the Doughnut\r\n      animateRotate: true,\r\n      // Boolean - Whether we animate scaling the Doughnut from the centre\r\n      animateScale: false\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\r\n      },\r\n    },\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: '50%',\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outer radius of the chart\r\n    radius: '100%',\r\n\r\n    // Spacing between arcs\r\n    spacing: 0,\r\n\r\n    indexAxis: 'r',\r\n  };\r\n\r\n  static descriptors = {\r\n    _scriptable: (name) => name !== 'spacing',\r\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    // Need to override these to give a nice default\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle, color}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  fontColor: color,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.enableOptionSharing = true;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.offsetX = undefined;\r\n    this.offsetY = undefined;\r\n  }\r\n\r\n  linkScales() {}\r\n\r\n  /**\r\n\t * Override data parsing, since we are not using scales\r\n\t */\r\n  parse(start, count) {\r\n    const data = this.getDataset().data;\r\n    const meta = this._cachedMeta;\r\n\r\n    if (this._parsing === false) {\r\n      meta._parsed = data;\r\n    } else {\r\n      let getter = (i) => +data[i];\r\n\r\n      if (isObject(data[start])) {\r\n        const {key = 'value'} = this._parsing;\r\n        getter = (i) => +resolveObjectKey(data[i], key);\r\n      }\r\n\r\n      let i, ilen;\r\n      for (i = start, ilen = start + count; i < ilen; ++i) {\r\n        meta._parsed[i] = getter(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRotation() {\r\n    return toRadians(this.options.rotation - 90);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getCircumference() {\r\n    return toRadians(this.options.circumference);\r\n  }\r\n\r\n  /**\r\n\t * Get the maximal rotation & circumference extents\r\n\t * across all visible datasets.\r\n\t */\r\n  _getRotationExtents() {\r\n    let min = TAU;\r\n    let max = -TAU;\r\n\r\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\r\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\r\n        const controller = this.chart.getDatasetMeta(i).controller;\r\n        const rotation = controller._getRotation();\r\n        const circumference = controller._getCircumference();\r\n\r\n        min = Math.min(min, rotation);\r\n        max = Math.max(max, rotation + circumference);\r\n      }\r\n    }\r\n\r\n    return {\r\n      rotation: min,\r\n      circumference: max - min,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {string} mode\r\n\t */\r\n  update(mode) {\r\n    const chart = this.chart;\r\n    const {chartArea} = chart;\r\n    const meta = this._cachedMeta;\r\n    const arcs = meta.data;\r\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\r\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\r\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\r\n    const chartWeight = this._getRingWeight(this.index);\r\n\r\n    // Compute the maximal rotation & circumference limits.\r\n    // If we only consider our dataset, this can cause problems when two datasets\r\n    // are both less than a circle with different rotations (starting angles)\r\n    const {circumference, rotation} = this._getRotationExtents();\r\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\r\n    const maxWidth = (chartArea.width - spacing) / ratioX;\r\n    const maxHeight = (chartArea.height - spacing) / ratioY;\r\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\r\n    const outerRadius = toDimension(this.options.radius, maxRadius);\r\n    const innerRadius = Math.max(outerRadius * cutout, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\r\n    this.offsetX = offsetX * outerRadius;\r\n    this.offsetY = offsetY * outerRadius;\r\n\r\n    meta.total = this.calculateTotal();\r\n\r\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\r\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\r\n\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _circumference(i, reset) {\r\n    const opts = this.options;\r\n    const meta = this._cachedMeta;\r\n    const circumference = this._getCircumference();\r\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\r\n      return 0;\r\n    }\r\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const centerX = (chartArea.left + chartArea.right) / 2;\r\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\r\n    const animateScale = reset && animationOpts.animateScale;\r\n    const innerRadius = animateScale ? 0 : this.innerRadius;\r\n    const outerRadius = animateScale ? 0 : this.outerRadius;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    let startAngle = this._getRotation();\r\n    let i;\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      startAngle += this._circumference(i, reset);\r\n    }\r\n\r\n    for (i = start; i < start + count; ++i) {\r\n      const circumference = this._circumference(i, reset);\r\n      const arc = arcs[i];\r\n      const properties = {\r\n        x: centerX + this.offsetX,\r\n        y: centerY + this.offsetY,\r\n        startAngle,\r\n        endAngle: startAngle + circumference,\r\n        circumference,\r\n        outerRadius,\r\n        innerRadius\r\n      };\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\r\n      }\r\n      startAngle += circumference;\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  calculateTotal() {\r\n    const meta = this._cachedMeta;\r\n    const metaData = meta.data;\r\n    let total = 0;\r\n    let i;\r\n\r\n    for (i = 0; i < metaData.length; i++) {\r\n      const value = meta._parsed[i];\r\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\r\n        total += Math.abs(value);\r\n      }\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  calculateCircumference(value) {\r\n    const total = this._cachedMeta.total;\r\n    if (total > 0 && !isNaN(value)) {\r\n      return TAU * (Math.abs(value) / total);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  getMaxBorderWidth(arcs) {\r\n    let max = 0;\r\n    const chart = this.chart;\r\n    let i, ilen, meta, controller, options;\r\n\r\n    if (!arcs) {\r\n      // Find the outmost visible dataset\r\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\r\n        if (chart.isDatasetVisible(i)) {\r\n          meta = chart.getDatasetMeta(i);\r\n          arcs = meta.data;\r\n          controller = meta.controller;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!arcs) {\r\n      return 0;\r\n    }\r\n\r\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      options = controller.resolveDataElementOptions(i);\r\n      if (options.borderAlign !== 'inner') {\r\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\r\n      }\r\n    }\r\n    return max;\r\n  }\r\n\r\n  getMaxOffset(arcs) {\r\n    let max = 0;\r\n\r\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\r\n      const options = this.resolveDataElementOptions(i);\r\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\r\n    }\r\n    return max;\r\n  }\r\n\r\n  /**\r\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\r\n\t * @private\r\n\t */\r\n  _getRingWeightOffset(datasetIndex) {\r\n    let ringWeightOffset = 0;\r\n\r\n    for (let i = 0; i < datasetIndex; ++i) {\r\n      if (this.chart.isDatasetVisible(i)) {\r\n        ringWeightOffset += this._getRingWeight(i);\r\n      }\r\n    }\r\n\r\n    return ringWeightOffset;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRingWeight(datasetIndex) {\r\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\r\n  }\r\n\r\n  /**\r\n\t * Returns the sum of all visible data set weights.\r\n\t * @private\r\n\t */\r\n  _getVisibleDatasetWeightTotal() {\r\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isNullOrUndef} from '../helpers/index.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\r\n\r\nexport default class LineController extends DatasetController {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n\r\n    showLine: true,\r\n    spanGaps: false,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    scales: {\r\n      _index_: {\r\n        type: 'category',\r\n      },\r\n      _value_: {\r\n        type: 'linear',\r\n      },\r\n    }\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    this.supportsDecimation = true;\r\n    super.initialize();\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {dataset: line, data: points = [], _dataset} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    // Update Line\r\n    line._chart = this.chart;\r\n    line._datasetIndex = this.index;\r\n    line._decimated = !!_dataset._decimated;\r\n    line.points = points;\r\n\r\n    const options = this.resolveDatasetElementOptions(mode);\r\n    if (!this.options.showLine) {\r\n      options.borderWidth = 0;\r\n    }\r\n    options.segment = this.options.segment;\r\n    this.updateElement(line, undefined, {\r\n      animated: !animationsDisabled,\r\n      options\r\n    }, mode);\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    const end = start + count;\r\n    const pointsCount = points.length;\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = 0; i < pointsCount; ++i) {\r\n      const point = points[i];\r\n      const properties = directUpdate ? point : {};\r\n\r\n      if (i < start || i >= end) {\r\n        properties.skip = true;\r\n        continue;\r\n      }\r\n\r\n      const parsed = this.getParsed(i);\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n    const data = meta.data || [];\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n\r\n  draw() {\r\n    const meta = this._cachedMeta;\r\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\r\n    super.draw();\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\r\n\r\nexport default class PolarAreaController extends DatasetController {\r\n\r\n  static id = 'polarArea';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    dataElementType: 'arc',\r\n    animation: {\r\n      animateRotate: true,\r\n      animateScale: true\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\r\n      },\r\n    },\r\n    indexAxis: 'r',\r\n    startAngle: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          generateLabels(chart) {\r\n            const data = chart.data;\r\n            if (data.labels.length && data.datasets.length) {\r\n              const {labels: {pointStyle, color}} = chart.legend.options;\r\n\r\n              return data.labels.map((label, i) => {\r\n                const meta = chart.getDatasetMeta(0);\r\n                const style = meta.controller.getStyle(i);\r\n\r\n                return {\r\n                  text: label,\r\n                  fillStyle: style.backgroundColor,\r\n                  strokeStyle: style.borderColor,\r\n                  fontColor: color,\r\n                  lineWidth: style.borderWidth,\r\n                  pointStyle: pointStyle,\r\n                  hidden: !chart.getDataVisibility(i),\r\n\r\n                  // Extra data used for toggling the correct item\r\n                  index: i\r\n                };\r\n              });\r\n            }\r\n            return [];\r\n          }\r\n        },\r\n\r\n        onClick(e, legendItem, legend) {\r\n          legend.chart.toggleDataVisibility(legendItem.index);\r\n          legend.chart.update();\r\n        }\r\n      }\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n        angleLines: {\r\n          display: false\r\n        },\r\n        beginAtZero: true,\r\n        grid: {\r\n          circular: true\r\n        },\r\n        pointLabels: {\r\n          display: false\r\n        },\r\n        startAngle: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  constructor(chart, datasetIndex) {\r\n    super(chart, datasetIndex);\r\n\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n  }\r\n\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const chart = this.chart;\r\n    const labels = chart.data.labels || [];\r\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value,\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const arcs = this._cachedMeta.data;\r\n\r\n    this._updateRadius();\r\n    this.updateElements(arcs, 0, arcs.length, mode);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  getMinMax() {\r\n    const meta = this._cachedMeta;\r\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\r\n\r\n    meta.data.forEach((element, index) => {\r\n      const parsed = this.getParsed(index).r;\r\n\r\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\r\n        if (parsed < range.min) {\r\n          range.min = parsed;\r\n        }\r\n\r\n        if (parsed > range.max) {\r\n          range.max = parsed;\r\n        }\r\n      }\r\n    });\r\n\r\n    return range;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateRadius() {\r\n    const chart = this.chart;\r\n    const chartArea = chart.chartArea;\r\n    const opts = chart.options;\r\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n\r\n    const outerRadius = Math.max(minSize / 2, 0);\r\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\r\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\r\n\r\n    this.outerRadius = outerRadius - (radiusLength * this.index);\r\n    this.innerRadius = this.outerRadius - radiusLength;\r\n  }\r\n\r\n  updateElements(arcs, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const chart = this.chart;\r\n    const opts = chart.options;\r\n    const animationOpts = opts.animation;\r\n    const scale = this._cachedMeta.rScale;\r\n    const centerX = scale.xCenter;\r\n    const centerY = scale.yCenter;\r\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\r\n    let angle = datasetStartAngle;\r\n    let i;\r\n\r\n    const defaultAngle = 360 / this.countVisibleElements();\r\n\r\n    for (i = 0; i < start; ++i) {\r\n      angle += this._computeAngle(i, mode, defaultAngle);\r\n    }\r\n    for (i = start; i < start + count; i++) {\r\n      const arc = arcs[i];\r\n      let startAngle = angle;\r\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\r\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\r\n      angle = endAngle;\r\n\r\n      if (reset) {\r\n        if (animationOpts.animateScale) {\r\n          outerRadius = 0;\r\n        }\r\n        if (animationOpts.animateRotate) {\r\n          startAngle = endAngle = datasetStartAngle;\r\n        }\r\n      }\r\n\r\n      const properties = {\r\n        x: centerX,\r\n        y: centerY,\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle,\r\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\r\n      };\r\n\r\n      this.updateElement(arc, i, properties, mode);\r\n    }\r\n  }\r\n\r\n  countVisibleElements() {\r\n    const meta = this._cachedMeta;\r\n    let count = 0;\r\n\r\n    meta.data.forEach((element, index) => {\r\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeAngle(index, mode, defaultAngle) {\r\n    return this.chart.getDataVisibility(index)\r\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\r\n      : 0;\r\n  }\r\n}\r\n","import DoughnutController from './controller.doughnut.js';\r\n\r\n// Pie charts are Doughnut chart with different defaults\r\nexport default class PieController extends DoughnutController {\r\n\r\n  static id = 'pie';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    // The percentage of the chart that we cut out of the middle.\r\n    cutout: 0,\r\n\r\n    // The rotation of the chart, where the first data arc begins.\r\n    rotation: 0,\r\n\r\n    // The total circumference of the chart.\r\n    circumference: 360,\r\n\r\n    // The outer radius of the chart\r\n    radius: '100%'\r\n  };\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\r\n\r\nexport default class RadarController extends DatasetController {\r\n\r\n  static id = 'radar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: 'line',\r\n    dataElementType: 'point',\r\n    indexAxis: 'r',\r\n    showLine: true,\r\n    elements: {\r\n      line: {\r\n        fill: 'start'\r\n      }\r\n    },\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n    aspectRatio: 1,\r\n\r\n    scales: {\r\n      r: {\r\n        type: 'radialLinear',\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const vScale = this._cachedMeta.vScale;\r\n    const parsed = this.getParsed(index);\r\n\r\n    return {\r\n      label: vScale.getLabels()[index],\r\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\r\n    };\r\n  }\r\n\r\n  parseObjectData(meta, data, start, count) {\r\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const line = meta.dataset;\r\n    const points = meta.data || [];\r\n    const labels = meta.iScale.getLabels();\r\n\r\n    // Update Line\r\n    line.points = points;\r\n    // In resize mode only point locations change, so no need to set the points or options.\r\n    if (mode !== 'resize') {\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      if (!this.options.showLine) {\r\n        options.borderWidth = 0;\r\n      }\r\n\r\n      const properties = {\r\n        _loop: true,\r\n        _fullLoop: labels.length === points.length,\r\n        options\r\n      };\r\n\r\n      this.updateElement(line, undefined, properties, mode);\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, 0, points.length, mode);\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const scale = this._cachedMeta.rScale;\r\n    const reset = mode === 'reset';\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const point = points[i];\r\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\r\n\r\n      const x = reset ? scale.xCenter : pointPosition.x;\r\n      const y = reset ? scale.yCenter : pointPosition.y;\r\n\r\n      const properties = {\r\n        x,\r\n        y,\r\n        angle: pointPosition.angle,\r\n        skip: isNaN(x) || isNaN(y),\r\n        options\r\n      };\r\n\r\n      this.updateElement(point, i, properties, mode);\r\n    }\r\n  }\r\n}\r\n","import DatasetController from '../core/core.datasetController.js';\r\nimport {isNullOrUndef} from '../helpers/index.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\r\n\r\nexport default class ScatterController extends DatasetController {\r\n\r\n  static id = 'scatter';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    datasetElementType: false,\r\n    dataElementType: 'point',\r\n    showLine: false,\r\n    fill: false\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static overrides = {\r\n\r\n    interaction: {\r\n      mode: 'point'\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        type: 'linear'\r\n      },\r\n      y: {\r\n        type: 'linear'\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelAndValue(index) {\r\n    const meta = this._cachedMeta;\r\n    const labels = this.chart.data.labels || [];\r\n    const {xScale, yScale} = meta;\r\n    const parsed = this.getParsed(index);\r\n    const x = xScale.getLabelForValue(parsed.x);\r\n    const y = yScale.getLabelForValue(parsed.y);\r\n\r\n    return {\r\n      label: labels[index] || '',\r\n      value: '(' + x + ', ' + y + ')'\r\n    };\r\n  }\r\n\r\n  update(mode) {\r\n    const meta = this._cachedMeta;\r\n    const {data: points = []} = meta;\r\n    // @ts-ignore\r\n    const animationsDisabled = this.chart._animationsDisabled;\r\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n\r\n    this._drawStart = start;\r\n    this._drawCount = count;\r\n\r\n    if (_scaleRangesChanged(meta)) {\r\n      start = 0;\r\n      count = points.length;\r\n    }\r\n\r\n    if (this.options.showLine) {\r\n\r\n      // https://github.com/chartjs/Chart.js/issues/11333\r\n      if (!this.datasetElementType) {\r\n        this.addElements();\r\n      }\r\n      const {dataset: line, _dataset} = meta;\r\n\r\n      // Update Line\r\n      line._chart = this.chart;\r\n      line._datasetIndex = this.index;\r\n      line._decimated = !!_dataset._decimated;\r\n      line.points = points;\r\n\r\n      const options = this.resolveDatasetElementOptions(mode);\r\n      options.segment = this.options.segment;\r\n      this.updateElement(line, undefined, {\r\n        animated: !animationsDisabled,\r\n        options\r\n      }, mode);\r\n    } else if (this.datasetElementType) {\r\n      // https://github.com/chartjs/Chart.js/issues/11333\r\n      delete meta.dataset;\r\n      this.datasetElementType = false;\r\n    }\r\n\r\n    // Update Points\r\n    this.updateElements(points, start, count, mode);\r\n  }\r\n\r\n  addElements() {\r\n    const {showLine} = this.options;\r\n\r\n    if (!this.datasetElementType && showLine) {\r\n      this.datasetElementType = this.chart.registry.getElement('line');\r\n    }\r\n\r\n    super.addElements();\r\n  }\r\n\r\n  updateElements(points, start, count, mode) {\r\n    const reset = mode === 'reset';\r\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\r\n    const firstOpts = this.resolveDataElementOptions(start, mode);\r\n    const sharedOptions = this.getSharedOptions(firstOpts);\r\n    const includeOptions = this.includeOptions(mode, sharedOptions);\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const {spanGaps, segment} = this.options;\r\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n    let prevParsed = start > 0 && this.getParsed(start - 1);\r\n\r\n    for (let i = start; i < start + count; ++i) {\r\n      const point = points[i];\r\n      const parsed = this.getParsed(i);\r\n      const properties = directUpdate ? point : {};\r\n      const nullData = isNullOrUndef(parsed[vAxis]);\r\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n\r\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\r\n      if (segment) {\r\n        properties.parsed = parsed;\r\n        properties.raw = _dataset.data[i];\r\n      }\r\n\r\n      if (includeOptions) {\r\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n      }\r\n\r\n      if (!directUpdate) {\r\n        this.updateElement(point, i, properties, mode);\r\n      }\r\n\r\n      prevParsed = parsed;\r\n    }\r\n\r\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getMaxOverflow() {\r\n    const meta = this._cachedMeta;\r\n    const data = meta.data || [];\r\n\r\n    if (!this.options.showLine) {\r\n      let max = 0;\r\n      for (let i = data.length - 1; i >= 0; --i) {\r\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n      }\r\n      return max > 0 && max;\r\n    }\r\n\r\n    const dataset = meta.dataset;\r\n    const border = dataset.options && dataset.options.borderWidth || 0;\r\n\r\n    if (!data.length) {\r\n      return border;\r\n    }\r\n\r\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n    return Math.max(border, firstPoint, lastPoint) / 2;\r\n  }\r\n}\r\n","/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\r\n\r\nimport type {AnyObject} from '../types/basic.js';\r\nimport type {ChartOptions} from '../types/index.js';\r\n\r\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\r\n\r\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\r\n  readonly options: T;\r\n  /**\r\n   * Will called with chart options after adapter creation.\r\n   */\r\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\r\n  /**\r\n   * Returns a map of time formats for the supported formatting units defined\r\n   * in Unit as well as 'datetime' representing a detailed date/time string.\r\n   */\r\n  formats(this: DateAdapter<T>): Record<string, string>;\r\n  /**\r\n   * Parses the given `value` and return the associated timestamp.\r\n   * @param value - the value to parse (usually comes from the data)\r\n   * @param [format] - the expected data format\r\n   */\r\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\r\n  /**\r\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\r\n   * @param timestamp - the timestamp to format\r\n   * @param format - the date/time token\r\n   */\r\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\r\n  /**\r\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param amount - the amount to add\r\n   * @param unit - the unit as string\r\n   */\r\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns the number of `unit` between the given timestamps.\r\n   * @param a - the input timestamp (reference)\r\n   * @param b - the timestamp to subtract\r\n   * @param unit - the unit as string\r\n   */\r\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\r\n  /**\r\n   * Returns start of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   * @param [weekday] - the ISO day of the week with 1 being Monday\r\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\r\n   */\r\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\r\n  /**\r\n   * Returns end of `unit` for the given `timestamp`.\r\n   * @param timestamp - the input timestamp\r\n   * @param unit - the unit as string\r\n   */\r\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\r\n}\r\n\r\nfunction abstract<T = void>(): T {\r\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\r\n}\r\n\r\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\r\nclass DateAdapterBase implements DateAdapter {\r\n\r\n  /**\r\n   * Override default date adapter methods.\r\n   * Accepts type parameter to define options type.\r\n   * @example\r\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n   *   init() {\r\n   *     console.log(this.options.myAdapterOption);\r\n   *   }\r\n   * })\r\n   */\r\n  static override<T extends AnyObject = AnyObject>(\r\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\r\n  ) {\r\n    Object.assign(DateAdapterBase.prototype, members);\r\n  }\r\n\r\n  readonly options: AnyObject;\r\n\r\n  constructor(options: AnyObject) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  init() {}\r\n\r\n  formats(): Record<string, string> {\r\n    return abstract();\r\n  }\r\n\r\n  parse(): number | null {\r\n    return abstract();\r\n  }\r\n\r\n  format(): string {\r\n    return abstract();\r\n  }\r\n\r\n  add(): number {\r\n    return abstract();\r\n  }\r\n\r\n  diff(): number {\r\n    return abstract();\r\n  }\r\n\r\n  startOf(): number {\r\n    return abstract();\r\n  }\r\n\r\n  endOf(): number {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default {\r\n  _date: DateAdapterBase\r\n};\r\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\r\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\r\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\r\nimport {_isPointInArea} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\r\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\r\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\r\n * @typedef { import('../types/index.js').Point } Point\r\n */\r\n\r\n/**\r\n * Helper function to do binary search when possible\r\n * @param {object} metaset - the dataset meta\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {number} value - the value to find\r\n * @param {boolean} [intersect] - should the element intersect\r\n * @returns {{lo:number, hi:number}} indices to search data array between\r\n */\r\nfunction binarySearch(metaset, axis, value, intersect) {\r\n  const {controller, data, _sorted} = metaset;\r\n  const iScale = controller._cachedMeta.iScale;\r\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\r\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\r\n    if (!intersect) {\r\n      return lookupMethod(data, axis, value);\r\n    } else if (controller._sharedOptions) {\r\n      // _sharedOptions indicates that each element has equal options -> equal proportions\r\n      // So we can do a ranged binary search based on the range of first element and\r\n      // be confident to get the full range of indices that can intersect with the value.\r\n      const el = data[0];\r\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\r\n      if (range) {\r\n        const start = lookupMethod(data, axis, value - range);\r\n        const end = lookupMethod(data, axis, value + range);\r\n        return {lo: start.lo, hi: end.hi};\r\n      }\r\n    }\r\n  }\r\n  // Default to all elements, when binary search can not be used.\r\n  return {lo: 0, hi: data.length - 1};\r\n}\r\n\r\n/**\r\n * Helper function to select candidate elements for interaction\r\n * @param {Chart} chart - the chart\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {function} handler - the callback to execute for each visible item\r\n * @param {boolean} [intersect] - consider intersecting items\r\n */\r\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\r\n  const metasets = chart.getSortedVisibleDatasetMetas();\r\n  const value = position[axis];\r\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n    const {index, data} = metasets[i];\r\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\r\n    for (let j = lo; j <= hi; ++j) {\r\n      const element = data[j];\r\n      if (!element.skip) {\r\n        handler(element, index, j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a distance metric function for two points based on the\r\n * axis mode setting\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n */\r\nfunction getDistanceMetricForAxis(axis) {\r\n  const useX = axis.indexOf('x') !== -1;\r\n  const useY = axis.indexOf('y') !== -1;\r\n\r\n  return function(pt1, pt2) {\r\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\r\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\r\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to get the items that intersect the event position\r\n * @param {Chart} chart - the chart\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis mode. x|y|xy|r\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\r\n  const items = [];\r\n\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return items;\r\n  }\r\n\r\n  const evaluationFunc = function(element, datasetIndex, index) {\r\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\r\n      return;\r\n    }\r\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  };\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a radial chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\r\n  let items = [];\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\r\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\r\n\r\n    if (_angleBetween(angle, startAngle, endAngle)) {\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position for a cartesian chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  let items = [];\r\n  const distanceMetric = getDistanceMetricForAxis(axis);\r\n  let minDistance = Number.POSITIVE_INFINITY;\r\n\r\n  function evaluationFunc(element, datasetIndex, index) {\r\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\r\n    if (intersect && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const center = element.getCenterPoint(useFinalPosition);\r\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\r\n    if (!pointInArea && !inRange) {\r\n      return;\r\n    }\r\n\r\n    const distance = distanceMetric(position, center);\r\n    if (distance < minDistance) {\r\n      items = [{element, datasetIndex, index}];\r\n      minDistance = distance;\r\n    } else if (distance === minDistance) {\r\n      // Can have multiple items at the same distance in which case we sort by size\r\n      items.push({element, datasetIndex, index});\r\n    }\r\n  }\r\n\r\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n  return items;\r\n}\r\n\r\n/**\r\n * Helper function to get the items nearest to the event position considering all visible items in the chart\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axes along which to measure distance\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n  if (!includeInvisible && !chart.isPointInArea(position)) {\r\n    return [];\r\n  }\r\n\r\n  return axis === 'r' && !intersect\r\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\r\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\r\n}\r\n\r\n/**\r\n * Helper function to get the items matching along the given X or Y axis\r\n * @param {Chart} chart - the chart to look at elements from\r\n * @param {Point} position - the point to be nearest to, in relative coordinates\r\n * @param {string} axis - the axis to match\r\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\r\n * @return {InteractionItem[]} the nearest items\r\n */\r\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\r\n  const items = [];\r\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\r\n  let intersectsItem = false;\r\n\r\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\r\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\r\n      items.push({element, datasetIndex, index});\r\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\r\n    }\r\n  });\r\n\r\n  // If we want to trigger on an intersect and we don't have any items\r\n  // that intersect the position, return nothing\r\n  if (intersect && !intersectsItem) {\r\n    return [];\r\n  }\r\n  return items;\r\n}\r\n\r\n/**\r\n * Contains interaction related functions\r\n * @namespace Chart.Interaction\r\n */\r\nexport default {\r\n  // Part of the public API to facilitate developers creating their own modes\r\n  evaluateInteractionItems,\r\n\r\n  // Helper function for different modes\r\n  modes: {\r\n    /**\r\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\r\n\t\t * @function Chart.Interaction.modes.index\r\n\t\t * @since v2.4.0\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    index(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      // Default axis for index mode is 'x' to match old behaviour\r\n      const axis = options.axis || 'x';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      const items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\r\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n      const elements = [];\r\n\r\n      if (!items.length) {\r\n        return [];\r\n      }\r\n\r\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\r\n        const index = items[0].index;\r\n        const element = meta.data[index];\r\n\r\n        // don't count items that are skipped (null data)\r\n        if (element && !element.skip) {\r\n          elements.push({element, datasetIndex: meta.index, index});\r\n        }\r\n      });\r\n\r\n      return elements;\r\n    },\r\n\r\n    /**\r\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\r\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\r\n\t\t * @function Chart.Interaction.modes.dataset\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    dataset(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      let items = options.intersect\r\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\r\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n\r\n      if (items.length > 0) {\r\n        const datasetIndex = items[0].datasetIndex;\r\n        const data = chart.getDatasetMeta(datasetIndex).data;\r\n        items = [];\r\n        for (let i = 0; i < data.length; ++i) {\r\n          items.push({element: data[i], datasetIndex, index: i});\r\n        }\r\n      }\r\n\r\n      return items;\r\n    },\r\n\r\n    /**\r\n\t\t * Point mode returns all elements that hit test based on the event position\r\n\t\t * of the event\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    point(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * nearest mode returns the element closest to the point\r\n\t\t * @function Chart.Interaction.modes.intersect\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    nearest(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      const axis = options.axis || 'xy';\r\n      const includeInvisible = options.includeInvisible || false;\r\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\r\n    },\r\n\r\n    /**\r\n\t\t * x mode returns the elements that hit-test at the current x coordinate\r\n\t\t * @function Chart.Interaction.modes.x\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    x(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\r\n    },\r\n\r\n    /**\r\n\t\t * y mode returns the elements that hit-test at the current y coordinate\r\n\t\t * @function Chart.Interaction.modes.y\r\n\t\t * @param {Chart} chart - the chart we are returning items from\r\n\t\t * @param {Event} e - the event we are find things at\r\n\t\t * @param {InteractionOptions} options - options to use\r\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\r\n\t\t * @return {InteractionItem[]} - items that are found\r\n\t\t */\r\n    y(chart, e, options, useFinalPosition) {\r\n      const position = getRelativePosition(e, chart);\r\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\r\n    }\r\n  }\r\n};\r\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\r\nimport {toPadding} from '../helpers/helpers.options.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n */\r\n\r\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\r\n\r\nfunction filterByPosition(array, position) {\r\n  return array.filter(v => v.pos === position);\r\n}\r\n\r\nfunction filterDynamicPositionByAxis(array, axis) {\r\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\r\n}\r\n\r\nfunction sortByWeight(array, reverse) {\r\n  return array.sort((a, b) => {\r\n    const v0 = reverse ? b : a;\r\n    const v1 = reverse ? a : b;\r\n    return v0.weight === v1.weight ?\r\n      v0.index - v1.index :\r\n      v0.weight - v1.weight;\r\n  });\r\n}\r\n\r\nfunction wrapBoxes(boxes) {\r\n  const layoutBoxes = [];\r\n  let i, ilen, box, pos, stack, stackWeight;\r\n\r\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\r\n    box = boxes[i];\r\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\r\n    layoutBoxes.push({\r\n      index: i,\r\n      box,\r\n      pos,\r\n      horizontal: box.isHorizontal(),\r\n      weight: box.weight,\r\n      stack: stack && (pos + stack),\r\n      stackWeight\r\n    });\r\n  }\r\n  return layoutBoxes;\r\n}\r\n\r\nfunction buildStacks(layouts) {\r\n  const stacks = {};\r\n  for (const wrap of layouts) {\r\n    const {stack, pos, stackWeight} = wrap;\r\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\r\n      continue;\r\n    }\r\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\r\n    _stack.count++;\r\n    _stack.weight += stackWeight;\r\n  }\r\n  return stacks;\r\n}\r\n\r\n/**\r\n * store dimensions used instead of available chartArea in fitBoxes\r\n **/\r\nfunction setLayoutDims(layouts, params) {\r\n  const stacks = buildStacks(layouts);\r\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\r\n  let i, ilen, layout;\r\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\r\n    layout = layouts[i];\r\n    const {fullSize} = layout.box;\r\n    const stack = stacks[layout.stack];\r\n    const factor = stack && layout.stackWeight / stack.weight;\r\n    if (layout.horizontal) {\r\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\r\n      layout.height = hBoxMaxHeight;\r\n    } else {\r\n      layout.width = vBoxMaxWidth;\r\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\r\n    }\r\n  }\r\n  return stacks;\r\n}\r\n\r\nfunction buildLayoutBoxes(boxes) {\r\n  const layoutBoxes = wrapBoxes(boxes);\r\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\r\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\r\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\r\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\r\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\r\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\r\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\r\n\r\n  return {\r\n    fullSize,\r\n    leftAndTop: left.concat(top),\r\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\r\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\r\n    vertical: left.concat(right).concat(centerVertical),\r\n    horizontal: top.concat(bottom).concat(centerHorizontal)\r\n  };\r\n}\r\n\r\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\r\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\r\n}\r\n\r\nfunction updateMaxPadding(maxPadding, boxPadding) {\r\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\r\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\r\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\r\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\r\n}\r\n\r\nfunction updateDims(chartArea, params, layout, stacks) {\r\n  const {pos, box} = layout;\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  // dynamically placed boxes size is not considered\r\n  if (!isObject(pos)) {\r\n    if (layout.size) {\r\n      // this layout was already counted for, lets first reduce old size\r\n      chartArea[pos] -= layout.size;\r\n    }\r\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\r\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\r\n    layout.size = stack.size / stack.count;\r\n    chartArea[pos] += layout.size;\r\n  }\r\n\r\n  if (box.getPadding) {\r\n    updateMaxPadding(maxPadding, box.getPadding());\r\n  }\r\n\r\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\r\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\r\n  const widthChanged = newWidth !== chartArea.w;\r\n  const heightChanged = newHeight !== chartArea.h;\r\n  chartArea.w = newWidth;\r\n  chartArea.h = newHeight;\r\n\r\n  // return booleans on the changes per direction\r\n  return layout.horizontal\r\n    ? {same: widthChanged, other: heightChanged}\r\n    : {same: heightChanged, other: widthChanged};\r\n}\r\n\r\nfunction handleMaxPadding(chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function updatePos(pos) {\r\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\r\n    chartArea[pos] += change;\r\n    return change;\r\n  }\r\n  chartArea.y += updatePos('top');\r\n  chartArea.x += updatePos('left');\r\n  updatePos('right');\r\n  updatePos('bottom');\r\n}\r\n\r\nfunction getMargins(horizontal, chartArea) {\r\n  const maxPadding = chartArea.maxPadding;\r\n\r\n  function marginForPositions(positions) {\r\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\r\n    positions.forEach((pos) => {\r\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\r\n    });\r\n    return margin;\r\n  }\r\n\r\n  return horizontal\r\n    ? marginForPositions(['left', 'right'])\r\n    : marginForPositions(['top', 'bottom']);\r\n}\r\n\r\nfunction fitBoxes(boxes, chartArea, params, stacks) {\r\n  const refitBoxes = [];\r\n  let i, ilen, layout, box, refit, changed;\r\n\r\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\r\n    layout = boxes[i];\r\n    box = layout.box;\r\n\r\n    box.update(\r\n      layout.width || chartArea.w,\r\n      layout.height || chartArea.h,\r\n      getMargins(layout.horizontal, chartArea)\r\n    );\r\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\r\n\r\n    // Dimensions changed and there were non full width boxes before this\r\n    // -> we have to refit those\r\n    refit |= same && refitBoxes.length;\r\n\r\n    // Chart area changed in the opposite direction\r\n    changed = changed || other;\r\n\r\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\r\n      refitBoxes.push(layout);\r\n    }\r\n  }\r\n\r\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\r\n}\r\n\r\nfunction setBoxDims(box, left, top, width, height) {\r\n  box.top = top;\r\n  box.left = left;\r\n  box.right = left + width;\r\n  box.bottom = top + height;\r\n  box.width = width;\r\n  box.height = height;\r\n}\r\n\r\nfunction placeBoxes(boxes, chartArea, params, stacks) {\r\n  const userPadding = params.padding;\r\n  let {x, y} = chartArea;\r\n\r\n  for (const layout of boxes) {\r\n    const box = layout.box;\r\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\r\n    const weight = (layout.stackWeight / stack.weight) || 1;\r\n    if (layout.horizontal) {\r\n      const width = chartArea.w * weight;\r\n      const height = stack.size || box.height;\r\n      if (defined(stack.start)) {\r\n        y = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\r\n      } else {\r\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\r\n      }\r\n      stack.start = y;\r\n      stack.placed += width;\r\n      y = box.bottom;\r\n    } else {\r\n      const height = chartArea.h * weight;\r\n      const width = stack.size || box.width;\r\n      if (defined(stack.start)) {\r\n        x = stack.start;\r\n      }\r\n      if (box.fullSize) {\r\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\r\n      } else {\r\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\r\n      }\r\n      stack.start = x;\r\n      stack.placed += height;\r\n      x = box.right;\r\n    }\r\n  }\r\n\r\n  chartArea.x = x;\r\n  chartArea.y = y;\r\n}\r\n\r\n/**\r\n * @interface LayoutItem\r\n * @typedef {object} LayoutItem\r\n * @prop {string} position - The position of the item in the chart layout. Possible values are\r\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\r\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\r\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\r\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\r\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\r\n * @prop {function} draw - Draws the element\r\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\r\n * @prop {number} width - Width of item. Must be valid after update()\r\n * @prop {number} height - Height of item. Must be valid after update()\r\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\r\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\r\n */\r\n\r\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\r\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\r\n// It is this service's responsibility of carrying out that layout.\r\nexport default {\r\n\r\n  /**\r\n\t * Register a box to a chart.\r\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\r\n\t * @param {Chart} chart - the chart to use\r\n\t * @param {LayoutItem} item - the item to add to be laid out\r\n\t */\r\n  addBox(chart, item) {\r\n    if (!chart.boxes) {\r\n      chart.boxes = [];\r\n    }\r\n\r\n    // initialize item with default values\r\n    item.fullSize = item.fullSize || false;\r\n    item.position = item.position || 'top';\r\n    item.weight = item.weight || 0;\r\n    // @ts-ignore\r\n    item._layers = item._layers || function() {\r\n      return [{\r\n        z: 0,\r\n        draw(chartArea) {\r\n          item.draw(chartArea);\r\n        }\r\n      }];\r\n    };\r\n\r\n    chart.boxes.push(item);\r\n  },\r\n\r\n  /**\r\n\t * Remove a layoutItem from a chart\r\n\t * @param {Chart} chart - the chart to remove the box from\r\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\r\n\t */\r\n  removeBox(chart, layoutItem) {\r\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\r\n    if (index !== -1) {\r\n      chart.boxes.splice(index, 1);\r\n    }\r\n  },\r\n\r\n  /**\r\n\t * Sets (or updates) options on the given `item`.\r\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\r\n\t * @param {LayoutItem} item - the item to configure with the given options\r\n\t * @param {object} options - the new item options.\r\n\t */\r\n  configure(chart, item, options) {\r\n    item.fullSize = options.fullSize;\r\n    item.position = options.position;\r\n    item.weight = options.weight;\r\n  },\r\n\r\n  /**\r\n\t * Fits boxes of the given chart into the given size by having each box measure itself\r\n\t * then running a fitting algorithm\r\n\t * @param {Chart} chart - the chart\r\n\t * @param {number} width - the width to fit into\r\n\t * @param {number} height - the height to fit into\r\n   * @param {number} minPadding - minimum padding required for each side of chart area\r\n\t */\r\n  update(chart, width, height, minPadding) {\r\n    if (!chart) {\r\n      return;\r\n    }\r\n\r\n    const padding = toPadding(chart.options.layout.padding);\r\n    const availableWidth = Math.max(width - padding.width, 0);\r\n    const availableHeight = Math.max(height - padding.height, 0);\r\n    const boxes = buildLayoutBoxes(chart.boxes);\r\n    const verticalBoxes = boxes.vertical;\r\n    const horizontalBoxes = boxes.horizontal;\r\n\r\n    // Before any changes are made, notify boxes that an update is about to being\r\n    // This is used to clear any cached data (e.g. scale limits)\r\n    each(chart.boxes, box => {\r\n      if (typeof box.beforeLayout === 'function') {\r\n        box.beforeLayout();\r\n      }\r\n    });\r\n\r\n    // Essentially we now have any number of boxes on each of the 4 sides.\r\n    // Our canvas looks like the following.\r\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\r\n    // B1 is the bottom axis\r\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\r\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\r\n    // an error will be thrown.\r\n    //\r\n    // |----------------------------------------------------|\r\n    // |                  T1 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    // |    |    |                 T2                  |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    | C1 |                           | C2 |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    |                                     |    |\r\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\r\n    // |    |    |                                     |    |\r\n    // |    |    |----|                           |----|    |\r\n    // |    |    | C3 |                           | C4 |    |\r\n    // |    |----|-------------------------------------|----|\r\n    // |    |    |                 B1                  |    |\r\n    // |----------------------------------------------------|\r\n    // |                  B2 (Full Width)                   |\r\n    // |----------------------------------------------------|\r\n    //\r\n\r\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\r\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\r\n\r\n    const params = Object.freeze({\r\n      outerWidth: width,\r\n      outerHeight: height,\r\n      padding,\r\n      availableWidth,\r\n      availableHeight,\r\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\r\n      hBoxMaxHeight: availableHeight / 2\r\n    });\r\n    const maxPadding = Object.assign({}, padding);\r\n    updateMaxPadding(maxPadding, toPadding(minPadding));\r\n    const chartArea = Object.assign({\r\n      maxPadding,\r\n      w: availableWidth,\r\n      h: availableHeight,\r\n      x: padding.left,\r\n      y: padding.top\r\n    }, padding);\r\n\r\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\r\n\r\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\r\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\r\n\r\n    // Then fit vertical boxes\r\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n\r\n    // Then fit horizontal boxes\r\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\r\n      // if the area changed, re-fit vertical boxes\r\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n    }\r\n\r\n    handleMaxPadding(chartArea);\r\n\r\n    // Finally place the boxes to correct coordinates\r\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\r\n\r\n    // Move to opposite side of chart\r\n    chartArea.x += chartArea.w;\r\n    chartArea.y += chartArea.h;\r\n\r\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\r\n\r\n    chart.chartArea = {\r\n      left: chartArea.left,\r\n      top: chartArea.top,\r\n      right: chartArea.left + chartArea.w,\r\n      bottom: chartArea.top + chartArea.h,\r\n      height: chartArea.h,\r\n      width: chartArea.w,\r\n    };\r\n\r\n    // Finally update boxes in chartArea (radial scale for example)\r\n    each(boxes.chartArea, (layout) => {\r\n      const box = layout.box;\r\n      Object.assign(box, chart.chartArea);\r\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\r\n    });\r\n  }\r\n};\r\n","\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\n/**\r\n * Abstract class that allows abstracting platform dependencies away from the chart.\r\n */\r\nexport default class BasePlatform {\r\n  /**\r\n\t * Called at chart construction time, returns a context2d instance implementing\r\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\r\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\r\n\t * @param {number} [aspectRatio] - The chart options\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Called at chart destruction time, releases any resources associated to the context\r\n\t * previously returned by the acquireContext() method.\r\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\r\n\t * @returns {boolean} true if the method succeeded, else false\r\n\t */\r\n  releaseContext(context) { // eslint-disable-line no-unused-vars\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Registers the specified listener on the given chart.\r\n\t * @param {Chart} chart - Chart from which to listen for event\r\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\r\n\t * @param {function} listener - Receives a notification (an object that implements\r\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\r\n\t */\r\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Removes the specified listener previously registered with addEventListener.\r\n\t * @param {Chart} chart - Chart from which to remove the listener\r\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\r\n\t * @param {function} listener - The listener function to remove from the event target.\r\n\t */\r\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\r\n\t */\r\n  getDevicePixelRatio() {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum size in pixels of given canvas element.\r\n\t * @param {HTMLCanvasElement} element\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(element, width, height, aspectRatio) {\r\n    width = Math.max(0, width || element.width);\r\n    height = height || element.height;\r\n    return {\r\n      width,\r\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\r\n\t */\r\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Updates config with platform specific requirements\r\n   * @param {import('../core/core.config.js').default} config\r\n   */\r\n  updateConfig(config) { // eslint-disable-line no-unused-vars\r\n    // no-op\r\n  }\r\n}\r\n","/**\r\n * Platform fallback implementation (minimal).\r\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\r\n */\r\n\r\nimport BasePlatform from './platform.base.js';\r\n\r\n/**\r\n * Platform class for charts without access to the DOM or to many element properties\r\n * This platform is used by default for any chart passed an OffscreenCanvas.\r\n * @extends BasePlatform\r\n */\r\nexport default class BasicPlatform extends BasePlatform {\r\n  acquireContext(item) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    return item && item.getContext && item.getContext('2d') || null;\r\n  }\r\n  updateConfig(config) {\r\n    config.options.animation = false;\r\n  }\r\n}\r\n","/**\r\n * Chart.Platform implementation for targeting a web browser\r\n */\r\n\r\nimport BasePlatform from './platform.base.js';\r\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\r\nimport {throttled} from '../helpers/helpers.extras.js';\r\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.controller.js').default } Chart\r\n */\r\n\r\nconst EXPANDO_KEY = '$chartjs';\r\n\r\n/**\r\n * DOM event types -> Chart.js event types.\r\n * Note: only events with different types are mapped.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\r\n */\r\nconst EVENT_TYPES = {\r\n  touchstart: 'mousedown',\r\n  touchmove: 'mousemove',\r\n  touchend: 'mouseup',\r\n  pointerenter: 'mouseenter',\r\n  pointerdown: 'mousedown',\r\n  pointermove: 'mousemove',\r\n  pointerup: 'mouseup',\r\n  pointerleave: 'mouseout',\r\n  pointerout: 'mouseout'\r\n};\r\n\r\nconst isNullOrEmpty = value => value === null || value === '';\r\n/**\r\n * Initializes the canvas style and render size without modifying the canvas display size,\r\n * since responsiveness is handled by the controller.resize() method. The config is used\r\n * to determine the aspect ratio to apply in case no explicit height has been specified.\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {number} [aspectRatio]\r\n */\r\nfunction initCanvas(canvas, aspectRatio) {\r\n  const style = canvas.style;\r\n\r\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\r\n  // returns null or '' if no explicit value has been set to the canvas attribute.\r\n  const renderHeight = canvas.getAttribute('height');\r\n  const renderWidth = canvas.getAttribute('width');\r\n\r\n  // Chart.js modifies some canvas values that we want to restore on destroy\r\n  canvas[EXPANDO_KEY] = {\r\n    initial: {\r\n      height: renderHeight,\r\n      width: renderWidth,\r\n      style: {\r\n        display: style.display,\r\n        height: style.height,\r\n        width: style.width\r\n      }\r\n    }\r\n  };\r\n\r\n  // Force canvas to display as block to avoid extra space caused by inline\r\n  // elements, which would interfere with the responsive resize process.\r\n  // https://github.com/chartjs/Chart.js/issues/2538\r\n  style.display = style.display || 'block';\r\n  // Include possible borders in the size\r\n  style.boxSizing = style.boxSizing || 'border-box';\r\n\r\n  if (isNullOrEmpty(renderWidth)) {\r\n    const displayWidth = readUsedSize(canvas, 'width');\r\n    if (displayWidth !== undefined) {\r\n      canvas.width = displayWidth;\r\n    }\r\n  }\r\n\r\n  if (isNullOrEmpty(renderHeight)) {\r\n    if (canvas.style.height === '') {\r\n      // If no explicit render height and style height, let's apply the aspect ratio,\r\n      // which one can be specified by the user but also by charts as default option\r\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\r\n      canvas.height = canvas.width / (aspectRatio || 2);\r\n    } else {\r\n      const displayHeight = readUsedSize(canvas, 'height');\r\n      if (displayHeight !== undefined) {\r\n        canvas.height = displayHeight;\r\n      }\r\n    }\r\n  }\r\n\r\n  return canvas;\r\n}\r\n\r\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\r\n// https://github.com/chartjs/Chart.js/issues/4287\r\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\r\n\r\nfunction addListener(node, type, listener) {\r\n  node.addEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction removeListener(chart, type, listener) {\r\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\r\n}\r\n\r\nfunction fromNativeEvent(event, chart) {\r\n  const type = EVENT_TYPES[event.type] || event.type;\r\n  const {x, y} = getRelativePosition(event, chart);\r\n  return {\r\n    type,\r\n    chart,\r\n    native: event,\r\n    x: x !== undefined ? x : null,\r\n    y: y !== undefined ? y : null,\r\n  };\r\n}\r\n\r\nfunction nodeListContains(nodeList, canvas) {\r\n  for (const node of nodeList) {\r\n    if (node === canvas || node.contains(canvas)) {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createAttachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nfunction createDetachObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const observer = new MutationObserver(entries => {\r\n    let trigger = false;\r\n    for (const entry of entries) {\r\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\r\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\r\n    }\r\n    if (trigger) {\r\n      listener();\r\n    }\r\n  });\r\n  observer.observe(document, {childList: true, subtree: true});\r\n  return observer;\r\n}\r\n\r\nconst drpListeningCharts = new Map();\r\nlet oldDevicePixelRatio = 0;\r\n\r\nfunction onWindowResize() {\r\n  const dpr = window.devicePixelRatio;\r\n  if (dpr === oldDevicePixelRatio) {\r\n    return;\r\n  }\r\n  oldDevicePixelRatio = dpr;\r\n  drpListeningCharts.forEach((resize, chart) => {\r\n    if (chart.currentDevicePixelRatio !== dpr) {\r\n      resize();\r\n    }\r\n  });\r\n}\r\n\r\nfunction listenDevicePixelRatioChanges(chart, resize) {\r\n  if (!drpListeningCharts.size) {\r\n    window.addEventListener('resize', onWindowResize);\r\n  }\r\n  drpListeningCharts.set(chart, resize);\r\n}\r\n\r\nfunction unlistenDevicePixelRatioChanges(chart) {\r\n  drpListeningCharts.delete(chart);\r\n  if (!drpListeningCharts.size) {\r\n    window.removeEventListener('resize', onWindowResize);\r\n  }\r\n}\r\n\r\nfunction createResizeObserver(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const container = canvas && _getParentNode(canvas);\r\n  if (!container) {\r\n    return;\r\n  }\r\n  const resize = throttled((width, height) => {\r\n    const w = container.clientWidth;\r\n    listener(width, height);\r\n    if (w < container.clientWidth) {\r\n      // If the container size shrank during chart resize, let's assume\r\n      // scrollbar appeared. So we resize again with the scrollbar visible -\r\n      // effectively making chart smaller and the scrollbar hidden again.\r\n      // Because we are inside `throttled`, and currently `ticking`, scroll\r\n      // events are ignored during this whole 2 resize process.\r\n      // If we assumed wrong and something else happened, we are resizing\r\n      // twice in a frame (potential performance issue)\r\n      listener();\r\n    }\r\n  }, window);\r\n\r\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\r\n  const observer = new ResizeObserver(entries => {\r\n    const entry = entries[0];\r\n    const width = entry.contentRect.width;\r\n    const height = entry.contentRect.height;\r\n    // When its container's display is set to 'none' the callback will be called with a\r\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\r\n    // resizing in such case.\r\n    if (width === 0 && height === 0) {\r\n      return;\r\n    }\r\n    resize(width, height);\r\n  });\r\n  observer.observe(container);\r\n  listenDevicePixelRatioChanges(chart, resize);\r\n\r\n  return observer;\r\n}\r\n\r\nfunction releaseObserver(chart, type, observer) {\r\n  if (observer) {\r\n    observer.disconnect();\r\n  }\r\n  if (type === 'resize') {\r\n    unlistenDevicePixelRatioChanges(chart);\r\n  }\r\n}\r\n\r\nfunction createProxyAndListen(chart, type, listener) {\r\n  const canvas = chart.canvas;\r\n  const proxy = throttled((event) => {\r\n    // This case can occur if the chart is destroyed while waiting\r\n    // for the throttled function to occur. We prevent crashes by checking\r\n    // for a destroyed chart\r\n    if (chart.ctx !== null) {\r\n      listener(fromNativeEvent(event, chart));\r\n    }\r\n  }, chart);\r\n\r\n  addListener(canvas, type, proxy);\r\n\r\n  return proxy;\r\n}\r\n\r\n/**\r\n * Platform class for charts that can access the DOM and global window/document properties\r\n * @extends BasePlatform\r\n */\r\nexport default class DomPlatform extends BasePlatform {\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [aspectRatio]\r\n\t * @return {CanvasRenderingContext2D|null}\r\n\t */\r\n  acquireContext(canvas, aspectRatio) {\r\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\r\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\r\n    // https://github.com/chartjs/Chart.js/issues/2807\r\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\r\n\r\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\r\n    // inside an iframe or when running in a protected environment. We could guess the\r\n    // types from their toString() value but let's keep things flexible and assume it's\r\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\r\n    // https://github.com/chartjs/Chart.js/issues/3887\r\n    // https://github.com/chartjs/Chart.js/issues/4102\r\n    // https://github.com/chartjs/Chart.js/issues/4152\r\n    if (context && context.canvas === canvas) {\r\n      // Load platform resources on first chart creation, to make it possible to\r\n      // import the library before setting platform options.\r\n      initCanvas(canvas, aspectRatio);\r\n      return context;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * @param {CanvasRenderingContext2D} context\r\n\t */\r\n  releaseContext(context) {\r\n    const canvas = context.canvas;\r\n    if (!canvas[EXPANDO_KEY]) {\r\n      return false;\r\n    }\r\n\r\n    const initial = canvas[EXPANDO_KEY].initial;\r\n    ['height', 'width'].forEach((prop) => {\r\n      const value = initial[prop];\r\n      if (isNullOrUndef(value)) {\r\n        canvas.removeAttribute(prop);\r\n      } else {\r\n        canvas.setAttribute(prop, value);\r\n      }\r\n    });\r\n\r\n    const style = initial.style || {};\r\n    Object.keys(style).forEach((key) => {\r\n      canvas.style[key] = style[key];\r\n    });\r\n\r\n    // The canvas render size might have been changed (and thus the state stack discarded),\r\n    // we can't use save() and restore() to restore the initial state. So make sure that at\r\n    // least the canvas context is reset to the default state by setting the canvas width.\r\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\r\n    // eslint-disable-next-line no-self-assign\r\n    canvas.width = canvas.width;\r\n\r\n    delete canvas[EXPANDO_KEY];\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t *\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t * @param {function} listener\r\n\t */\r\n  addEventListener(chart, type, listener) {\r\n    // Can have only one listener per type, so make sure previous is removed\r\n    this.removeEventListener(chart, type);\r\n\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const handlers = {\r\n      attach: createAttachObserver,\r\n      detach: createDetachObserver,\r\n      resize: createResizeObserver\r\n    };\r\n    const handler = handlers[type] || createProxyAndListen;\r\n    proxies[type] = handler(chart, type, listener);\r\n  }\r\n\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @param {string} type\r\n\t */\r\n  removeEventListener(chart, type) {\r\n    const proxies = chart.$proxies || (chart.$proxies = {});\r\n    const proxy = proxies[type];\r\n\r\n    if (!proxy) {\r\n      return;\r\n    }\r\n\r\n    const handlers = {\r\n      attach: releaseObserver,\r\n      detach: releaseObserver,\r\n      resize: releaseObserver\r\n    };\r\n    const handler = handlers[type] || removeListener;\r\n    handler(chart, type, proxy);\r\n    proxies[type] = undefined;\r\n  }\r\n\r\n  getDevicePixelRatio() {\r\n    return window.devicePixelRatio;\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t * @param {number} [width] - content width of parent element\r\n\t * @param {number} [height] - content height of parent element\r\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\r\n\t */\r\n  getMaximumSize(canvas, width, height, aspectRatio) {\r\n    return getMaximumSize(canvas, width, height, aspectRatio);\r\n  }\r\n\r\n  /**\r\n\t * @param {HTMLCanvasElement} canvas\r\n\t */\r\n  isAttached(canvas) {\r\n    const container = _getParentNode(canvas);\r\n    return !!(container && container.isConnected);\r\n  }\r\n}\r\n","import {_isDomSupported} from '../helpers/index.js';\r\nimport BasePlatform from './platform.base.js';\r\nimport BasicPlatform from './platform.basic.js';\r\nimport DomPlatform from './platform.dom.js';\r\n\r\nexport function _detectPlatform(canvas) {\r\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\r\n    return BasicPlatform;\r\n  }\r\n  return DomPlatform;\r\n}\r\n\r\nexport {BasePlatform, BasicPlatform, DomPlatform};\r\n","import type {AnyObject} from '../types/basic.js';\r\nimport type {Point} from '../types/geometric.js';\r\nimport type {Animation} from '../types/animation.js';\r\nimport {isNumber} from '../helpers/helpers.math.js';\r\n\r\nexport default class Element<T = AnyObject, O = AnyObject> {\r\n\r\n  static defaults = {};\r\n  static defaultRoutes = undefined;\r\n\r\n  x: number;\r\n  y: number;\r\n  active = false;\r\n  options: O;\r\n  $animations: Record<keyof T, Animation>;\r\n\r\n  tooltipPosition(useFinalPosition: boolean): Point {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y} as Point;\r\n  }\r\n\r\n  hasValue() {\r\n    return isNumber(this.x) && isNumber(this.y);\r\n  }\r\n\r\n  /**\r\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\r\n   * @param props - properties to get\r\n   * @param [final] - get the final value (animation target)\r\n   */\r\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\r\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\r\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\r\n    const anims = this.$animations;\r\n    if (!final || !anims) {\r\n      // let's not create an object, if not needed\r\n      return this as Record<string, unknown>;\r\n    }\r\n    const ret: Record<string, unknown> = {};\r\n    props.forEach((prop) => {\r\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {_factorize} from '../helpers/helpers.math.js';\r\n\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\r\n * @param {import('./core.scale.js').default} scale\r\n * @param {Tick[]} ticks\r\n * @return {Tick[]}\r\n * @private\r\n */\r\nexport function autoSkip(scale, ticks) {\r\n  const tickOpts = scale.options.ticks;\r\n  const determinedMaxTicks = determineMaxTicks(scale);\r\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\r\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\r\n  const numMajorIndices = majorIndices.length;\r\n  const first = majorIndices[0];\r\n  const last = majorIndices[numMajorIndices - 1];\r\n  const newTicks = [];\r\n\r\n  // If there are too many major ticks to display them all\r\n  if (numMajorIndices > ticksLimit) {\r\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\r\n    return newTicks;\r\n  }\r\n\r\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\r\n\r\n  if (numMajorIndices > 0) {\r\n    let i, ilen;\r\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\r\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\r\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\r\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\r\n    }\r\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\r\n    return newTicks;\r\n  }\r\n  skip(ticks, newTicks, spacing);\r\n  return newTicks;\r\n}\r\n\r\nfunction determineMaxTicks(scale) {\r\n  const offset = scale.options.offset;\r\n  const tickLength = scale._tickSize();\r\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\r\n  const maxChart = scale._maxLength / tickLength;\r\n  return Math.floor(Math.min(maxScale, maxChart));\r\n}\r\n\r\n/**\r\n * @param {number[]} majorIndices\r\n * @param {Tick[]} ticks\r\n * @param {number} ticksLimit\r\n */\r\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\r\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\r\n  const spacing = ticks.length / ticksLimit;\r\n\r\n  // If the major ticks are evenly spaced apart, place the minor ticks\r\n  // so that they divide the major ticks into even chunks\r\n  if (!evenMajorSpacing) {\r\n    return Math.max(spacing, 1);\r\n  }\r\n\r\n  const factors = _factorize(evenMajorSpacing);\r\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\r\n    const factor = factors[i];\r\n    if (factor > spacing) {\r\n      return factor;\r\n    }\r\n  }\r\n  return Math.max(spacing, 1);\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n */\r\nfunction getMajorIndices(ticks) {\r\n  const result = [];\r\n  let i, ilen;\r\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n    if (ticks[i].major) {\r\n      result.push(i);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number[]} majorIndices\r\n * @param {number} spacing\r\n */\r\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\r\n  let count = 0;\r\n  let next = majorIndices[0];\r\n  let i;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  for (i = 0; i < ticks.length; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = majorIndices[count * spacing];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Tick[]} ticks\r\n * @param {Tick[]} newTicks\r\n * @param {number} spacing\r\n * @param {number} [majorStart]\r\n * @param {number} [majorEnd]\r\n */\r\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\r\n  const start = valueOrDefault(majorStart, 0);\r\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\r\n  let count = 0;\r\n  let length, i, next;\r\n\r\n  spacing = Math.ceil(spacing);\r\n  if (majorEnd) {\r\n    length = majorEnd - majorStart;\r\n    spacing = length / Math.floor(length / spacing);\r\n  }\r\n\r\n  next = start;\r\n\r\n  while (next < 0) {\r\n    count++;\r\n    next = Math.round(start + count * spacing);\r\n  }\r\n\r\n  for (i = Math.max(start, 0); i < end; i++) {\r\n    if (i === next) {\r\n      newTicks.push(ticks[i]);\r\n      count++;\r\n      next = Math.round(start + count * spacing);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number[]} arr\r\n */\r\nfunction getEvenSpacing(arr) {\r\n  const len = arr.length;\r\n  let i, diff;\r\n\r\n  if (len < 2) {\r\n    return false;\r\n  }\r\n\r\n  for (diff = arr[0], i = 1; i < len; ++i) {\r\n    if (arr[i] - arr[i - 1] !== diff) {\r\n      return false;\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n","import Element from './core.element.js';\r\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\r\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\r\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\r\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\r\nimport {autoSkip} from './core.scale.autoskip.js';\r\n\r\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\r\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\r\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\r\n\r\n/**\r\n * @typedef { import('../types/index.js').Chart } Chart\r\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\r\n */\r\n\r\n/**\r\n * Returns a new array containing numItems from arr\r\n * @param {any[]} arr\r\n * @param {number} numItems\r\n */\r\nfunction sample(arr, numItems) {\r\n  const result = [];\r\n  const increment = arr.length / numItems;\r\n  const len = arr.length;\r\n  let i = 0;\r\n\r\n  for (; i < len; i += increment) {\r\n    result.push(arr[Math.floor(i)]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @param {boolean} offsetGridLines\r\n */\r\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\r\n  const length = scale.ticks.length;\r\n  const validIndex = Math.min(index, length - 1);\r\n  const start = scale._startPixel;\r\n  const end = scale._endPixel;\r\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\r\n  let lineValue = scale.getPixelForTick(validIndex);\r\n  let offset;\r\n\r\n  if (offsetGridLines) {\r\n    if (length === 1) {\r\n      offset = Math.max(lineValue - start, end - lineValue);\r\n    } else if (index === 0) {\r\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\r\n    } else {\r\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\r\n    }\r\n    lineValue += validIndex < index ? offset : -offset;\r\n\r\n    // Return undefined if the pixel is out of the range\r\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\r\n      return;\r\n    }\r\n  }\r\n  return lineValue;\r\n}\r\n\r\n/**\r\n * @param {object} caches\r\n * @param {number} length\r\n */\r\nfunction garbageCollect(caches, length) {\r\n  each(caches, (cache) => {\r\n    const gc = cache.gc;\r\n    const gcLen = gc.length / 2;\r\n    let i;\r\n    if (gcLen > length) {\r\n      for (i = 0; i < gcLen; ++i) {\r\n        delete cache.data[gc[i]];\r\n      }\r\n      gc.splice(0, gcLen);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTickMarkLength(options) {\r\n  return options.drawTicks ? options.tickLength : 0;\r\n}\r\n\r\n/**\r\n * @param {object} options\r\n */\r\nfunction getTitleHeight(options, fallback) {\r\n  if (!options.display) {\r\n    return 0;\r\n  }\r\n\r\n  const font = toFont(options.font, fallback);\r\n  const padding = toPadding(options.padding);\r\n  const lines = isArray(options.text) ? options.text.length : 1;\r\n\r\n  return (lines * font.lineHeight) + padding.height;\r\n}\r\n\r\nfunction createScaleContext(parent, scale) {\r\n  return createContext(parent, {\r\n    scale,\r\n    type: 'scale'\r\n  });\r\n}\r\n\r\nfunction createTickContext(parent, index, tick) {\r\n  return createContext(parent, {\r\n    tick,\r\n    index,\r\n    type: 'tick'\r\n  });\r\n}\r\n\r\nfunction titleAlign(align, position, reverse) {\r\n  /** @type {CanvasTextAlign} */\r\n  let ret = _toLeftRightCenter(align);\r\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\r\n    ret = reverseAlign(ret);\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction titleArgs(scale, offset, position, align) {\r\n  const {top, left, bottom, right, chart} = scale;\r\n  const {chartArea, scales} = chart;\r\n  let rotation = 0;\r\n  let maxWidth, titleX, titleY;\r\n  const height = bottom - top;\r\n  const width = right - left;\r\n\r\n  if (scale.isHorizontal()) {\r\n    titleX = _alignStartEnd(align, left, right);\r\n\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\r\n    } else if (position === 'center') {\r\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\r\n    } else {\r\n      titleY = offsetFromEdge(scale, position, offset);\r\n    }\r\n    maxWidth = right - left;\r\n  } else {\r\n    if (isObject(position)) {\r\n      const positionAxisID = Object.keys(position)[0];\r\n      const value = position[positionAxisID];\r\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\r\n    } else if (position === 'center') {\r\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\r\n    } else {\r\n      titleX = offsetFromEdge(scale, position, offset);\r\n    }\r\n    titleY = _alignStartEnd(align, bottom, top);\r\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\r\n  }\r\n  return {titleX, titleY, maxWidth, rotation};\r\n}\r\n\r\nexport default class Scale extends Element {\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    /** @type {string} */\r\n    this.id = cfg.id;\r\n    /** @type {string} */\r\n    this.type = cfg.type;\r\n    /** @type {any} */\r\n    this.options = undefined;\r\n    /** @type {CanvasRenderingContext2D} */\r\n    this.ctx = cfg.ctx;\r\n    /** @type {Chart} */\r\n    this.chart = cfg.chart;\r\n\r\n    // implements box\r\n    /** @type {number} */\r\n    this.top = undefined;\r\n    /** @type {number} */\r\n    this.bottom = undefined;\r\n    /** @type {number} */\r\n    this.left = undefined;\r\n    /** @type {number} */\r\n    this.right = undefined;\r\n    /** @type {number} */\r\n    this.width = undefined;\r\n    /** @type {number} */\r\n    this.height = undefined;\r\n    this._margins = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    };\r\n    /** @type {number} */\r\n    this.maxWidth = undefined;\r\n    /** @type {number} */\r\n    this.maxHeight = undefined;\r\n    /** @type {number} */\r\n    this.paddingTop = undefined;\r\n    /** @type {number} */\r\n    this.paddingBottom = undefined;\r\n    /** @type {number} */\r\n    this.paddingLeft = undefined;\r\n    /** @type {number} */\r\n    this.paddingRight = undefined;\r\n\r\n    // scale-specific properties\r\n    /** @type {string=} */\r\n    this.axis = undefined;\r\n    /** @type {number=} */\r\n    this.labelRotation = undefined;\r\n    this.min = undefined;\r\n    this.max = undefined;\r\n    this._range = undefined;\r\n    /** @type {Tick[]} */\r\n    this.ticks = [];\r\n    /** @type {object[]|null} */\r\n    this._gridLineItems = null;\r\n    /** @type {object[]|null} */\r\n    this._labelItems = null;\r\n    /** @type {object|null} */\r\n    this._labelSizes = null;\r\n    this._length = 0;\r\n    this._maxLength = 0;\r\n    this._longestTextCache = {};\r\n    /** @type {number} */\r\n    this._startPixel = undefined;\r\n    /** @type {number} */\r\n    this._endPixel = undefined;\r\n    this._reversePixels = false;\r\n    this._userMax = undefined;\r\n    this._userMin = undefined;\r\n    this._suggestedMax = undefined;\r\n    this._suggestedMin = undefined;\r\n    this._ticksLength = 0;\r\n    this._borderValue = 0;\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @param {any} options\r\n\t * @since 3.0\r\n\t */\r\n  init(options) {\r\n    this.options = options.setContext(this.getContext());\r\n\r\n    this.axis = options.axis;\r\n\r\n    // parse min/max value, so we can properly determine min/max for other scales\r\n    this._userMin = this.parse(options.min);\r\n    this._userMax = this.parse(options.max);\r\n    this._suggestedMin = this.parse(options.suggestedMin);\r\n    this._suggestedMax = this.parse(options.suggestedMax);\r\n  }\r\n\r\n  /**\r\n\t * Parse a supported input value to internal representation.\r\n\t * @param {*} raw\r\n\t * @param {number} [index]\r\n\t * @since 3.0\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    return raw;\r\n  }\r\n\r\n  /**\r\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getUserBounds() {\r\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\r\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\r\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\r\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\r\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\r\n    return {\r\n      min: finiteOrDefault(_userMin, _suggestedMin),\r\n      max: finiteOrDefault(_userMax, _suggestedMax),\r\n      minDefined: isFinite(_userMin),\r\n      maxDefined: isFinite(_userMax)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {boolean} canStack\r\n\t * @return {{min: number, max: number}}\r\n\t * @protected\r\n\t * @since 3.0\r\n\t */\r\n  getMinMax(canStack) {\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n    let range;\r\n\r\n    if (minDefined && maxDefined) {\r\n      return {min, max};\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      range = metas[i].controller.getMinMax(this, canStack);\r\n      if (!minDefined) {\r\n        min = Math.min(min, range.min);\r\n      }\r\n      if (!maxDefined) {\r\n        max = Math.max(max, range.max);\r\n      }\r\n    }\r\n\r\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\r\n    min = maxDefined && min > max ? max : min;\r\n    max = minDefined && min > max ? min : max;\r\n\r\n    return {\r\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\r\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Get the padding needed for the scale\r\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\r\n\t * @private\r\n\t */\r\n  getPadding() {\r\n    return {\r\n      left: this.paddingLeft || 0,\r\n      top: this.paddingTop || 0,\r\n      right: this.paddingRight || 0,\r\n      bottom: this.paddingBottom || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Returns the scale tick objects\r\n\t * @return {Tick[]}\r\n\t * @since 2.7\r\n\t */\r\n  getTicks() {\r\n    return this.ticks;\r\n  }\r\n\r\n  /**\r\n\t * @return {string[]}\r\n\t */\r\n  getLabels() {\r\n    const data = this.chart.data;\r\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\r\n  }\r\n\r\n  /**\r\n   * @return {import('../types.js').LabelItem[]}\r\n   */\r\n  getLabelItems(chartArea = this.chart.chartArea) {\r\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\r\n    return items;\r\n  }\r\n\r\n  // When a new layout is created, reset the data limits cache\r\n  beforeLayout() {\r\n    this._cache = {};\r\n    this._dataLimitsCached = false;\r\n  }\r\n\r\n  // These methods are ordered by lifecycle. Utilities then follow.\r\n  // Any function defined here is inherited by all scale types.\r\n  // Any function can be extended by the scale type\r\n\r\n  beforeUpdate() {\r\n    call(this.options.beforeUpdate, [this]);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} maxWidth - the max width in pixels\r\n\t * @param {number} maxHeight - the max height in pixels\r\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\r\n\t *   This space comes from two sources:\r\n\t *     - padding - space that's required to show the labels at the edges of the scale\r\n\t *     - thickness of scales or legends in another orientation\r\n\t */\r\n  update(maxWidth, maxHeight, margins) {\r\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\r\n    const sampleSize = tickOpts.sampleSize;\r\n\r\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\r\n    this.beforeUpdate();\r\n\r\n    // Absorb the master measurements\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins = Object.assign({\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }, margins);\r\n\r\n    this.ticks = null;\r\n    this._labelSizes = null;\r\n    this._gridLineItems = null;\r\n    this._labelItems = null;\r\n\r\n    // Dimensions\r\n    this.beforeSetDimensions();\r\n    this.setDimensions();\r\n    this.afterSetDimensions();\r\n\r\n    this._maxLength = this.isHorizontal()\r\n      ? this.width + margins.left + margins.right\r\n      : this.height + margins.top + margins.bottom;\r\n\r\n    // Data min/max\r\n    if (!this._dataLimitsCached) {\r\n      this.beforeDataLimits();\r\n      this.determineDataLimits();\r\n      this.afterDataLimits();\r\n      this._range = _addGrace(this, grace, beginAtZero);\r\n      this._dataLimitsCached = true;\r\n    }\r\n\r\n    this.beforeBuildTicks();\r\n\r\n    this.ticks = this.buildTicks() || [];\r\n\r\n    // Allow modification of ticks in callback.\r\n    this.afterBuildTicks();\r\n\r\n    // Compute tick rotation and fit using a sampled subset of labels\r\n    // We generally don't need to compute the size of every single label for determining scale size\r\n    const samplingEnabled = sampleSize < this.ticks.length;\r\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\r\n\r\n    // configure is called twice, once here, once from core.controller.updateLayout.\r\n    // Here we haven't been positioned yet, but dimensions are correct.\r\n    // Variables set in configure are needed for calculateLabelRotation, and\r\n    // it's ok that coordinates are not correct there, only dimensions matter.\r\n    this.configure();\r\n\r\n    // Tick Rotation\r\n    this.beforeCalculateLabelRotation();\r\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\r\n    this.afterCalculateLabelRotation();\r\n\r\n    // Auto-skip\r\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\r\n      this.ticks = autoSkip(this, this.ticks);\r\n      this._labelSizes = null;\r\n      this.afterAutoSkip();\r\n    }\r\n\r\n    if (samplingEnabled) {\r\n      // Generate labels using all non-skipped ticks\r\n      this._convertTicksToLabels(this.ticks);\r\n    }\r\n\r\n    this.beforeFit();\r\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\r\n    this.afterFit();\r\n\r\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\r\n\r\n    this.afterUpdate();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    let reversePixels = this.options.reverse;\r\n    let startPixel, endPixel;\r\n\r\n    if (this.isHorizontal()) {\r\n      startPixel = this.left;\r\n      endPixel = this.right;\r\n    } else {\r\n      startPixel = this.top;\r\n      endPixel = this.bottom;\r\n      // by default vertical scales are from bottom to top, so pixels are reversed\r\n      reversePixels = !reversePixels;\r\n    }\r\n    this._startPixel = startPixel;\r\n    this._endPixel = endPixel;\r\n    this._reversePixels = reversePixels;\r\n    this._length = endPixel - startPixel;\r\n    this._alignToPixels = this.options.alignToPixels;\r\n  }\r\n\r\n  afterUpdate() {\r\n    call(this.options.afterUpdate, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeSetDimensions() {\r\n    call(this.options.beforeSetDimensions, [this]);\r\n  }\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    if (this.isHorizontal()) {\r\n      // Reset position before calculating rotation\r\n      this.width = this.maxWidth;\r\n      this.left = 0;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n\r\n      // Reset position before calculating rotation\r\n      this.top = 0;\r\n      this.bottom = this.height;\r\n    }\r\n\r\n    // Reset padding\r\n    this.paddingLeft = 0;\r\n    this.paddingTop = 0;\r\n    this.paddingRight = 0;\r\n    this.paddingBottom = 0;\r\n  }\r\n  afterSetDimensions() {\r\n    call(this.options.afterSetDimensions, [this]);\r\n  }\r\n\r\n  _callHooks(name) {\r\n    this.chart.notifyPlugins(name, this.getContext());\r\n    call(this.options[name], [this]);\r\n  }\r\n\r\n  // Data limits\r\n  beforeDataLimits() {\r\n    this._callHooks('beforeDataLimits');\r\n  }\r\n  determineDataLimits() {}\r\n  afterDataLimits() {\r\n    this._callHooks('afterDataLimits');\r\n  }\r\n\r\n  //\r\n  beforeBuildTicks() {\r\n    this._callHooks('beforeBuildTicks');\r\n  }\r\n  /**\r\n\t * @return {object[]} the ticks\r\n\t */\r\n  buildTicks() {\r\n    return [];\r\n  }\r\n  afterBuildTicks() {\r\n    this._callHooks('afterBuildTicks');\r\n  }\r\n\r\n  beforeTickToLabelConversion() {\r\n    call(this.options.beforeTickToLabelConversion, [this]);\r\n  }\r\n  /**\r\n\t * Convert ticks to label strings\r\n\t * @param {Tick[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    const tickOpts = this.options.ticks;\r\n    let i, ilen, tick;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      tick = ticks[i];\r\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\r\n    }\r\n  }\r\n  afterTickToLabelConversion() {\r\n    call(this.options.afterTickToLabelConversion, [this]);\r\n  }\r\n\r\n  //\r\n\r\n  beforeCalculateLabelRotation() {\r\n    call(this.options.beforeCalculateLabelRotation, [this]);\r\n  }\r\n  calculateLabelRotation() {\r\n    const options = this.options;\r\n    const tickOpts = options.ticks;\r\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\r\n    const minRotation = tickOpts.minRotation || 0;\r\n    const maxRotation = tickOpts.maxRotation;\r\n    let labelRotation = minRotation;\r\n    let tickWidth, maxHeight, maxLabelDiagonal;\r\n\r\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\r\n      this.labelRotation = minRotation;\r\n      return;\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const maxLabelWidth = labelSizes.widest.width;\r\n    const maxLabelHeight = labelSizes.highest.height;\r\n\r\n    // Estimate the width of each grid based on the canvas width, the maximum\r\n    // label width and the number of tick intervals\r\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\r\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\r\n\r\n    // Allow 3 pixels x2 padding either side for label readability\r\n    if (maxLabelWidth + 6 > tickWidth) {\r\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\r\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\r\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\r\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\r\n      labelRotation = toDegrees(Math.min(\r\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\r\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\r\n      ));\r\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\r\n    }\r\n\r\n    this.labelRotation = labelRotation;\r\n  }\r\n  afterCalculateLabelRotation() {\r\n    call(this.options.afterCalculateLabelRotation, [this]);\r\n  }\r\n  afterAutoSkip() {}\r\n\r\n  //\r\n\r\n  beforeFit() {\r\n    call(this.options.beforeFit, [this]);\r\n  }\r\n  fit() {\r\n    // Reset\r\n    const minSize = {\r\n      width: 0,\r\n      height: 0\r\n    };\r\n\r\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\r\n    const display = this._isVisible();\r\n    const isHorizontal = this.isHorizontal();\r\n\r\n    if (display) {\r\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\r\n      if (isHorizontal) {\r\n        minSize.width = this.maxWidth;\r\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\r\n      } else {\r\n        minSize.height = this.maxHeight; // fill all the height\r\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\r\n      }\r\n\r\n      // Don't bother fitting the ticks if we are not showing the labels\r\n      if (tickOpts.display && this.ticks.length) {\r\n        const {first, last, widest, highest} = this._getLabelSizes();\r\n        const tickPadding = tickOpts.padding * 2;\r\n        const angleRadians = toRadians(this.labelRotation);\r\n        const cos = Math.cos(angleRadians);\r\n        const sin = Math.sin(angleRadians);\r\n\r\n        if (isHorizontal) {\r\n        // A horizontal axis is more constrained by the height.\r\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\r\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\r\n        } else {\r\n        // A vertical axis is more constrained by the width. Labels are the\r\n        // dominant factor here, so get that length first and account for padding\r\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\r\n\r\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\r\n        }\r\n        this._calculatePadding(first, last, sin, cos);\r\n      }\r\n    }\r\n\r\n    this._handleMargins();\r\n\r\n    if (isHorizontal) {\r\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\r\n      this.height = minSize.height;\r\n    } else {\r\n      this.width = minSize.width;\r\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\r\n    }\r\n  }\r\n\r\n  _calculatePadding(first, last, sin, cos) {\r\n    const {ticks: {align, padding}, position} = this.options;\r\n    const isRotated = this.labelRotation !== 0;\r\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\r\n\r\n    if (this.isHorizontal()) {\r\n      const offsetLeft = this.getPixelForTick(0) - this.left;\r\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\r\n      let paddingLeft = 0;\r\n      let paddingRight = 0;\r\n\r\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\r\n      // which means that the right padding is dominated by the font height\r\n      if (isRotated) {\r\n        if (labelsBelowTicks) {\r\n          paddingLeft = cos * first.width;\r\n          paddingRight = sin * last.height;\r\n        } else {\r\n          paddingLeft = sin * first.height;\r\n          paddingRight = cos * last.width;\r\n        }\r\n      } else if (align === 'start') {\r\n        paddingRight = last.width;\r\n      } else if (align === 'end') {\r\n        paddingLeft = first.width;\r\n      } else if (align !== 'inner') {\r\n        paddingLeft = first.width / 2;\r\n        paddingRight = last.width / 2;\r\n      }\r\n\r\n      // Adjust padding taking into account changes in offsets\r\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\r\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\r\n    } else {\r\n      let paddingTop = last.height / 2;\r\n      let paddingBottom = first.height / 2;\r\n\r\n      if (align === 'start') {\r\n        paddingTop = 0;\r\n        paddingBottom = first.height;\r\n      } else if (align === 'end') {\r\n        paddingTop = last.height;\r\n        paddingBottom = 0;\r\n      }\r\n\r\n      this.paddingTop = paddingTop + padding;\r\n      this.paddingBottom = paddingBottom + padding;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle margins and padding interactions\r\n\t * @private\r\n\t */\r\n  _handleMargins() {\r\n    if (this._margins) {\r\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\r\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\r\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\r\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\r\n    }\r\n  }\r\n\r\n  afterFit() {\r\n    call(this.options.afterFit, [this]);\r\n  }\r\n\r\n  // Shared Methods\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isHorizontal() {\r\n    const {axis, position} = this.options;\r\n    return position === 'top' || position === 'bottom' || axis === 'x';\r\n  }\r\n  /**\r\n\t * @return {boolean}\r\n\t */\r\n  isFullSize() {\r\n    return this.options.fullSize;\r\n  }\r\n\r\n  /**\r\n\t * @param {Tick[]} ticks\r\n\t * @private\r\n\t */\r\n  _convertTicksToLabels(ticks) {\r\n    this.beforeTickToLabelConversion();\r\n\r\n    this.generateTickLabels(ticks);\r\n\r\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\r\n    let i, ilen;\r\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\r\n      if (isNullOrUndef(ticks[i].label)) {\r\n        ticks.splice(i, 1);\r\n        ilen--;\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this.afterTickToLabelConversion();\r\n  }\r\n\r\n  /**\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _getLabelSizes() {\r\n    let labelSizes = this._labelSizes;\r\n\r\n    if (!labelSizes) {\r\n      const sampleSize = this.options.ticks.sampleSize;\r\n      let ticks = this.ticks;\r\n      if (sampleSize < ticks.length) {\r\n        ticks = sample(ticks, sampleSize);\r\n      }\r\n\r\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\r\n    }\r\n\r\n    return labelSizes;\r\n  }\r\n\r\n  /**\r\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\r\n\t * labels where offset indicates the anchor point offset from the top in pixels.\r\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\r\n\t * @private\r\n\t */\r\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\r\n    const {ctx, _longestTextCache: caches} = this;\r\n    const widths = [];\r\n    const heights = [];\r\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\r\n    let widestLabelSize = 0;\r\n    let highestLabelSize = 0;\r\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\r\n\r\n    for (i = 0; i < length; i += increment) {\r\n      label = ticks[i].label;\r\n      tickFont = this._resolveTickFontOptions(i);\r\n      ctx.font = fontString = tickFont.string;\r\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\r\n      lineHeight = tickFont.lineHeight;\r\n      width = height = 0;\r\n      // Undefined labels and arrays should not be measured\r\n      if (!isNullOrUndef(label) && !isArray(label)) {\r\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\r\n        height = lineHeight;\r\n      } else if (isArray(label)) {\r\n        // if it is an array let's measure each element\r\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\r\n          nestedLabel = /** @type {string} */ (label[j]);\r\n          // Undefined labels and arrays should not be measured\r\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\r\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\r\n            height += lineHeight;\r\n          }\r\n        }\r\n      }\r\n      widths.push(width);\r\n      heights.push(height);\r\n      widestLabelSize = Math.max(width, widestLabelSize);\r\n      highestLabelSize = Math.max(height, highestLabelSize);\r\n    }\r\n    garbageCollect(caches, length);\r\n\r\n    const widest = widths.indexOf(widestLabelSize);\r\n    const highest = heights.indexOf(highestLabelSize);\r\n\r\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\r\n\r\n    return {\r\n      first: valueAt(0),\r\n      last: valueAt(length - 1),\r\n      widest: valueAt(widest),\r\n      highest: valueAt(highest),\r\n      widths,\r\n      heights,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * Used to get the label to display in the tooltip for the given value\r\n\t * @param {*} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value;\r\n  }\r\n\r\n  /**\r\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {*} value\r\n\t * @param {number} [index]\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\r\n    return NaN;\r\n  }\r\n\r\n  /**\r\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} pixel\r\n\t * @return {*}\r\n\t */\r\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\r\n\r\n  /**\r\n\t * Returns the location of the tick at the given index\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} index\r\n\t * @return {number}\r\n\t */\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  /**\r\n\t * Utility for getting the pixel location of a percentage of scale\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @param {number} decimal\r\n\t * @return {number}\r\n\t */\r\n  getPixelForDecimal(decimal) {\r\n    if (this._reversePixels) {\r\n      decimal = 1 - decimal;\r\n    }\r\n\r\n    const pixel = this._startPixel + decimal * this._length;\r\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForPixel(pixel) {\r\n    const decimal = (pixel - this._startPixel) / this._length;\r\n    return this._reversePixels ? 1 - decimal : decimal;\r\n  }\r\n\r\n  /**\r\n\t * Returns the pixel for the minimum chart value\r\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\r\n\t * @return {number}\r\n\t */\r\n  getBasePixel() {\r\n    return this.getPixelForValue(this.getBaseValue());\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t */\r\n  getBaseValue() {\r\n    const {min, max} = this;\r\n\r\n    return min < 0 && max < 0 ? max :\r\n      min > 0 && max > 0 ? min :\r\n      0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext(index) {\r\n    const ticks = this.ticks || [];\r\n\r\n    if (index >= 0 && index < ticks.length) {\r\n      const tick = ticks[index];\r\n      return tick.$context ||\r\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\r\n    }\r\n    return this.$context ||\r\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\r\n  }\r\n\r\n  /**\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _tickSize() {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    // Calculate space needed by label in axis direction.\r\n    const rot = toRadians(this.labelRotation);\r\n    const cos = Math.abs(Math.cos(rot));\r\n    const sin = Math.abs(Math.sin(rot));\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    const padding = optionTicks.autoSkipPadding || 0;\r\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\r\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\r\n\r\n    // Calculate space needed for 1 tick in axis direction.\r\n    return this.isHorizontal()\r\n      ? h * cos > w * sin ? w / cos : h / sin\r\n      : h * sin < w * cos ? h / cos : w / sin;\r\n  }\r\n\r\n  /**\r\n\t * @return {boolean}\r\n\t * @private\r\n\t */\r\n  _isVisible() {\r\n    const display = this.options.display;\r\n\r\n    if (display !== 'auto') {\r\n      return !!display;\r\n    }\r\n\r\n    return this.getMatchingVisibleMetas().length > 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeGridLineItems(chartArea) {\r\n    const axis = this.axis;\r\n    const chart = this.chart;\r\n    const options = this.options;\r\n    const {grid, position, border} = options;\r\n    const offset = grid.offset;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const ticksLength = ticks.length + (offset ? 1 : 0);\r\n    const tl = getTickMarkLength(grid);\r\n    const items = [];\r\n\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\r\n    const axisHalfWidth = axisWidth / 2;\r\n    const alignBorderValue = function(pixel) {\r\n      return _alignPixel(chart, pixel, axisWidth);\r\n    };\r\n    let borderValue, i, lineValue, alignedLineValue;\r\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\r\n\r\n    if (position === 'top') {\r\n      borderValue = alignBorderValue(this.bottom);\r\n      ty1 = this.bottom - tl;\r\n      ty2 = borderValue - axisHalfWidth;\r\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\r\n      y2 = chartArea.bottom;\r\n    } else if (position === 'bottom') {\r\n      borderValue = alignBorderValue(this.top);\r\n      y1 = chartArea.top;\r\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = this.top + tl;\r\n    } else if (position === 'left') {\r\n      borderValue = alignBorderValue(this.right);\r\n      tx1 = this.right - tl;\r\n      tx2 = borderValue - axisHalfWidth;\r\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\r\n      x2 = chartArea.right;\r\n    } else if (position === 'right') {\r\n      borderValue = alignBorderValue(this.left);\r\n      x1 = chartArea.left;\r\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\r\n      tx1 = borderValue + axisHalfWidth;\r\n      tx2 = this.left + tl;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      y1 = chartArea.top;\r\n      y2 = chartArea.bottom;\r\n      ty1 = borderValue + axisHalfWidth;\r\n      ty2 = ty1 + tl;\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n      }\r\n\r\n      tx1 = borderValue - axisHalfWidth;\r\n      tx2 = tx1 - tl;\r\n      x1 = chartArea.left;\r\n      x2 = chartArea.right;\r\n    }\r\n\r\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\r\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\r\n    for (i = 0; i < ticksLength; i += step) {\r\n      const context = this.getContext(i);\r\n      const optsAtIndex = grid.setContext(context);\r\n      const optsAtIndexBorder = border.setContext(context);\r\n\r\n      const lineWidth = optsAtIndex.lineWidth;\r\n      const lineColor = optsAtIndex.color;\r\n      const borderDash = optsAtIndexBorder.dash || [];\r\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\r\n\r\n      const tickWidth = optsAtIndex.tickWidth;\r\n      const tickColor = optsAtIndex.tickColor;\r\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\r\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\r\n\r\n      lineValue = getPixelForGridLine(this, i, offset);\r\n\r\n      // Skip if the pixel is out of the range\r\n      if (lineValue === undefined) {\r\n        continue;\r\n      }\r\n\r\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\r\n\r\n      if (isHorizontal) {\r\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\r\n      } else {\r\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\r\n      }\r\n\r\n      items.push({\r\n        tx1,\r\n        ty1,\r\n        tx2,\r\n        ty2,\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2,\r\n        width: lineWidth,\r\n        color: lineColor,\r\n        borderDash,\r\n        borderDashOffset,\r\n        tickWidth,\r\n        tickColor,\r\n        tickBorderDash,\r\n        tickBorderDashOffset,\r\n      });\r\n    }\r\n\r\n    this._ticksLength = ticksLength;\r\n    this._borderValue = borderValue;\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelItems(chartArea) {\r\n    const axis = this.axis;\r\n    const options = this.options;\r\n    const {position, ticks: optionTicks} = options;\r\n    const isHorizontal = this.isHorizontal();\r\n    const ticks = this.ticks;\r\n    const {align, crossAlign, padding, mirror} = optionTicks;\r\n    const tl = getTickMarkLength(options.grid);\r\n    const tickAndPadding = tl + padding;\r\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\r\n    const rotation = -toRadians(this.labelRotation);\r\n    const items = [];\r\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\r\n    let textBaseline = 'middle';\r\n\r\n    if (position === 'top') {\r\n      y = this.bottom - hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'bottom') {\r\n      y = this.top + hTickAndPadding;\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (position === 'left') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (position === 'right') {\r\n      const ret = this._getYAxisLabelAlignment(tl);\r\n      textAlign = ret.textAlign;\r\n      x = ret.x;\r\n    } else if (axis === 'x') {\r\n      if (position === 'center') {\r\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\r\n      }\r\n      textAlign = this._getXAxisLabelAlignment();\r\n    } else if (axis === 'y') {\r\n      if (position === 'center') {\r\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\r\n      } else if (isObject(position)) {\r\n        const positionAxisID = Object.keys(position)[0];\r\n        const value = position[positionAxisID];\r\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\r\n      }\r\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\r\n    }\r\n\r\n    if (axis === 'y') {\r\n      if (align === 'start') {\r\n        textBaseline = 'top';\r\n      } else if (align === 'end') {\r\n        textBaseline = 'bottom';\r\n      }\r\n    }\r\n\r\n    const labelSizes = this._getLabelSizes();\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      label = tick.label;\r\n\r\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\r\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\r\n      font = this._resolveTickFontOptions(i);\r\n      lineHeight = font.lineHeight;\r\n      lineCount = isArray(label) ? label.length : 1;\r\n      const halfCount = lineCount / 2;\r\n      const color = optsAtIndex.color;\r\n      const strokeColor = optsAtIndex.textStrokeColor;\r\n      const strokeWidth = optsAtIndex.textStrokeWidth;\r\n      let tickTextAlign = textAlign;\r\n\r\n      if (isHorizontal) {\r\n        x = pixel;\r\n\r\n        if (textAlign === 'inner') {\r\n          if (i === ilen - 1) {\r\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\r\n          } else if (i === 0) {\r\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\r\n          } else {\r\n            tickTextAlign = 'center';\r\n          }\r\n        }\r\n\r\n        if (position === 'top') {\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\r\n          } else {\r\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\r\n          }\r\n        } else {\r\n          // eslint-disable-next-line no-lonely-if\r\n          if (crossAlign === 'near' || rotation !== 0) {\r\n            textOffset = lineHeight / 2;\r\n          } else if (crossAlign === 'center') {\r\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\r\n          } else {\r\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\r\n          }\r\n        }\r\n        if (mirror) {\r\n          textOffset *= -1;\r\n        }\r\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\r\n          x += (lineHeight / 2) * Math.sin(rotation);\r\n        }\r\n      } else {\r\n        y = pixel;\r\n        textOffset = (1 - lineCount) * lineHeight / 2;\r\n      }\r\n\r\n      let backdrop;\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\r\n        const height = labelSizes.heights[i];\r\n        const width = labelSizes.widths[i];\r\n\r\n        let top = textOffset - labelPadding.top;\r\n        let left = 0 - labelPadding.left;\r\n\r\n        switch (textBaseline) {\r\n        case 'middle':\r\n          top -= height / 2;\r\n          break;\r\n        case 'bottom':\r\n          top -= height;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        switch (textAlign) {\r\n        case 'center':\r\n          left -= width / 2;\r\n          break;\r\n        case 'right':\r\n          left -= width;\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n\r\n        backdrop = {\r\n          left,\r\n          top,\r\n          width: width + labelPadding.width,\r\n          height: height + labelPadding.height,\r\n\r\n          color: optsAtIndex.backdropColor,\r\n        };\r\n      }\r\n\r\n      items.push({\r\n        label,\r\n        font,\r\n        textOffset,\r\n        options: {\r\n          rotation,\r\n          color,\r\n          strokeColor,\r\n          strokeWidth,\r\n          textAlign: tickTextAlign,\r\n          textBaseline,\r\n          translation: [x, y],\r\n          backdrop,\r\n        }\r\n      });\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  _getXAxisLabelAlignment() {\r\n    const {position, ticks} = this.options;\r\n    const rotation = -toRadians(this.labelRotation);\r\n\r\n    if (rotation) {\r\n      return position === 'top' ? 'left' : 'right';\r\n    }\r\n\r\n    let align = 'center';\r\n\r\n    if (ticks.align === 'start') {\r\n      align = 'left';\r\n    } else if (ticks.align === 'end') {\r\n      align = 'right';\r\n    } else if (ticks.align === 'inner') {\r\n      align = 'inner';\r\n    }\r\n\r\n    return align;\r\n  }\r\n\r\n  _getYAxisLabelAlignment(tl) {\r\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\r\n    const labelSizes = this._getLabelSizes();\r\n    const tickAndPadding = tl + padding;\r\n    const widest = labelSizes.widest.width;\r\n\r\n    let textAlign;\r\n    let x;\r\n\r\n    if (position === 'left') {\r\n      if (mirror) {\r\n        x = this.right + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += (widest / 2);\r\n        } else {\r\n          textAlign = 'right';\r\n          x += widest;\r\n        }\r\n      } else {\r\n        x = this.right - tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x = this.left;\r\n        }\r\n      }\r\n    } else if (position === 'right') {\r\n      if (mirror) {\r\n        x = this.left + padding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'right';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x -= (widest / 2);\r\n        } else {\r\n          textAlign = 'left';\r\n          x -= widest;\r\n        }\r\n      } else {\r\n        x = this.left + tickAndPadding;\r\n\r\n        if (crossAlign === 'near') {\r\n          textAlign = 'left';\r\n        } else if (crossAlign === 'center') {\r\n          textAlign = 'center';\r\n          x += widest / 2;\r\n        } else {\r\n          textAlign = 'right';\r\n          x = this.right;\r\n        }\r\n      }\r\n    } else {\r\n      textAlign = 'right';\r\n    }\r\n\r\n    return {textAlign, x};\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeLabelArea() {\r\n    if (this.options.ticks.mirror) {\r\n      return;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const position = this.options.position;\r\n\r\n    if (position === 'left' || position === 'right') {\r\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\r\n    } if (position === 'top' || position === 'bottom') {\r\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  drawBackground() {\r\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\r\n    if (backgroundColor) {\r\n      ctx.save();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(left, top, width, height);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  getLineWidthForValue(value) {\r\n    const grid = this.options.grid;\r\n    if (!this._isVisible() || !grid.display) {\r\n      return 0;\r\n    }\r\n    const ticks = this.ticks;\r\n    const index = ticks.findIndex(t => t.value === value);\r\n    if (index >= 0) {\r\n      const opts = grid.setContext(this.getContext(index));\r\n      return opts.lineWidth;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid(chartArea) {\r\n    const grid = this.options.grid;\r\n    const ctx = this.ctx;\r\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\r\n    let i, ilen;\r\n\r\n    const drawLine = (p1, p2, style) => {\r\n      if (!style.width || !style.color) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n      ctx.lineWidth = style.width;\r\n      ctx.strokeStyle = style.color;\r\n      ctx.setLineDash(style.borderDash || []);\r\n      ctx.lineDashOffset = style.borderDashOffset;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(p1.x, p1.y);\r\n      ctx.lineTo(p2.x, p2.y);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    };\r\n\r\n    if (grid.display) {\r\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n        const item = items[i];\r\n\r\n        if (grid.drawOnChartArea) {\r\n          drawLine(\r\n            {x: item.x1, y: item.y1},\r\n            {x: item.x2, y: item.y2},\r\n            item\r\n          );\r\n        }\r\n\r\n        if (grid.drawTicks) {\r\n          drawLine(\r\n            {x: item.tx1, y: item.ty1},\r\n            {x: item.tx2, y: item.ty2},\r\n            {\r\n              color: item.tickColor,\r\n              width: item.tickWidth,\r\n              borderDash: item.tickBorderDash,\r\n              borderDashOffset: item.tickBorderDashOffset\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {\r\n    const {chart, ctx, options: {border, grid}} = this;\r\n    const borderOpts = border.setContext(this.getContext());\r\n    const axisWidth = border.display ? borderOpts.width : 0;\r\n    if (!axisWidth) {\r\n      return;\r\n    }\r\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\r\n    const borderValue = this._borderValue;\r\n    let x1, x2, y1, y2;\r\n\r\n    if (this.isHorizontal()) {\r\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\r\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\r\n      y1 = y2 = borderValue;\r\n    } else {\r\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\r\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\r\n      x1 = x2 = borderValue;\r\n    }\r\n    ctx.save();\r\n    ctx.lineWidth = borderOpts.width;\r\n    ctx.strokeStyle = borderOpts.color;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels(chartArea) {\r\n    const optionTicks = this.options.ticks;\r\n\r\n    if (!optionTicks.display) {\r\n      return;\r\n    }\r\n\r\n    const ctx = this.ctx;\r\n\r\n    const area = this._computeLabelArea();\r\n    if (area) {\r\n      clipArea(ctx, area);\r\n    }\r\n\r\n    const items = this.getLabelItems(chartArea);\r\n    for (const item of items) {\r\n      const renderTextOptions = item.options;\r\n      const tickFont = item.font;\r\n      const label = item.label;\r\n      const y = item.textOffset;\r\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\r\n    }\r\n\r\n    if (area) {\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const {ctx, options: {position, title, reverse}} = this;\r\n\r\n    if (!title.display) {\r\n      return;\r\n    }\r\n\r\n    const font = toFont(title.font);\r\n    const padding = toPadding(title.padding);\r\n    const align = title.align;\r\n    let offset = font.lineHeight / 2;\r\n\r\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\r\n      offset += padding.bottom;\r\n      if (isArray(title.text)) {\r\n        offset += font.lineHeight * (title.text.length - 1);\r\n      }\r\n    } else {\r\n      offset += padding.top;\r\n    }\r\n\r\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\r\n\r\n    renderText(ctx, title.text, 0, 0, font, {\r\n      color: title.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: titleAlign(align, position, reverse),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n\r\n  draw(chartArea) {\r\n    if (!this._isVisible()) {\r\n      return;\r\n    }\r\n\r\n    this.drawBackground();\r\n    this.drawGrid(chartArea);\r\n    this.drawBorder();\r\n    this.drawTitle();\r\n    this.drawLabels(chartArea);\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t * @private\r\n\t */\r\n  _layers() {\r\n    const opts = this.options;\r\n    const tz = opts.ticks && opts.ticks.z || 0;\r\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\r\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\r\n\r\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\r\n      // backward compatibility: draw has been overridden by custom scale\r\n      return [{\r\n        z: tz,\r\n        draw: (chartArea) => {\r\n          this.draw(chartArea);\r\n        }\r\n      }];\r\n    }\r\n\r\n    return [{\r\n      z: gz,\r\n      draw: (chartArea) => {\r\n        this.drawBackground();\r\n        this.drawGrid(chartArea);\r\n        this.drawTitle();\r\n      }\r\n    }, {\r\n      z: bz,\r\n      draw: () => {\r\n        this.drawBorder();\r\n      }\r\n    }, {\r\n      z: tz,\r\n      draw: (chartArea) => {\r\n        this.drawLabels(chartArea);\r\n      }\r\n    }];\r\n  }\r\n\r\n  /**\r\n\t * Returns visible dataset metas that are attached to this scale\r\n\t * @param {string} [type] - if specified, also filter by dataset type\r\n\t * @return {object[]}\r\n\t */\r\n  getMatchingVisibleMetas(type) {\r\n    const metas = this.chart.getSortedVisibleDatasetMetas();\r\n    const axisID = this.axis + 'AxisID';\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      const meta = metas[i];\r\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} index\r\n\t * @return {object}\r\n\t * @protected\r\n \t */\r\n  _resolveTickFontOptions(index) {\r\n    const opts = this.options.ticks.setContext(this.getContext(index));\r\n    return toFont(opts.font);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  _maxDigits() {\r\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\r\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\r\n  }\r\n}\r\n","import {merge} from '../helpers/index.js';\r\nimport defaults, {overrides} from './core.defaults.js';\r\n\r\n/**\r\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\r\n */\r\n\r\nexport default class TypedRegistry {\r\n  constructor(type, scope, override) {\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.override = override;\r\n    this.items = Object.create(null);\r\n  }\r\n\r\n  isForType(type) {\r\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t * @returns {string} The scope where items defaults were registered to.\r\n\t */\r\n  register(item) {\r\n    const proto = Object.getPrototypeOf(item);\r\n    let parentScope;\r\n\r\n    if (isIChartComponent(proto)) {\r\n      // Make sure the parent is registered and note the scope where its defaults are.\r\n      parentScope = this.register(proto);\r\n    }\r\n\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope + '.' + id;\r\n\r\n    if (!id) {\r\n      throw new Error('class does not have id: ' + item);\r\n    }\r\n\r\n    if (id in items) {\r\n      // already registered\r\n      return scope;\r\n    }\r\n\r\n    items[id] = item;\r\n    registerDefaults(item, scope, parentScope);\r\n    if (this.override) {\r\n      defaults.override(item.id, item.overrides);\r\n    }\r\n\r\n    return scope;\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object?}\r\n\t */\r\n  get(id) {\r\n    return this.items[id];\r\n  }\r\n\r\n  /**\r\n\t * @param {IChartComponent} item\r\n\t */\r\n  unregister(item) {\r\n    const items = this.items;\r\n    const id = item.id;\r\n    const scope = this.scope;\r\n\r\n    if (id in items) {\r\n      delete items[id];\r\n    }\r\n\r\n    if (scope && id in defaults[scope]) {\r\n      delete defaults[scope][id];\r\n      if (this.override) {\r\n        delete overrides[id];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction registerDefaults(item, scope, parentScope) {\r\n  // Inherit the parent's defaults and keep existing defaults\r\n  const itemDefaults = merge(Object.create(null), [\r\n    parentScope ? defaults.get(parentScope) : {},\r\n    defaults.get(scope),\r\n    item.defaults\r\n  ]);\r\n\r\n  defaults.set(scope, itemDefaults);\r\n\r\n  if (item.defaultRoutes) {\r\n    routeDefaults(scope, item.defaultRoutes);\r\n  }\r\n\r\n  if (item.descriptors) {\r\n    defaults.describe(scope, item.descriptors);\r\n  }\r\n}\r\n\r\nfunction routeDefaults(scope, routes) {\r\n  Object.keys(routes).forEach(property => {\r\n    const propertyParts = property.split('.');\r\n    const sourceName = propertyParts.pop();\r\n    const sourceScope = [scope].concat(propertyParts).join('.');\r\n    const parts = routes[property].split('.');\r\n    const targetName = parts.pop();\r\n    const targetScope = parts.join('.');\r\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\r\n  });\r\n}\r\n\r\nfunction isIChartComponent(proto) {\r\n  return 'id' in proto && 'defaults' in proto;\r\n}\r\n","import DatasetController from './core.datasetController.js';\r\nimport Element from './core.element.js';\r\nimport Scale from './core.scale.js';\r\nimport TypedRegistry from './core.typedRegistry.js';\r\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * Please use the module's default export which provides a singleton instance\r\n * Note: class is exported for typedoc\r\n */\r\nexport class Registry {\r\n  constructor() {\r\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\r\n    this.elements = new TypedRegistry(Element, 'elements');\r\n    this.plugins = new TypedRegistry(Object, 'plugins');\r\n    this.scales = new TypedRegistry(Scale, 'scales');\r\n    // Order is important, Scale has Element in prototype chain,\r\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\r\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  add(...args) {\r\n    this._each('register', args);\r\n  }\r\n\r\n  remove(...args) {\r\n    this._each('unregister', args);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  addControllers(...args) {\r\n    this._each('register', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  addElements(...args) {\r\n    this._each('register', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  addPlugins(...args) {\r\n    this._each('register', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  addScales(...args) {\r\n    this._each('register', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof DatasetController}\r\n\t */\r\n  getController(id) {\r\n    return this._get(id, this.controllers, 'controller');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Element}\r\n\t */\r\n  getElement(id) {\r\n    return this._get(id, this.elements, 'element');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {object}\r\n\t */\r\n  getPlugin(id) {\r\n    return this._get(id, this.plugins, 'plugin');\r\n  }\r\n\r\n  /**\r\n\t * @param {string} id\r\n\t * @returns {typeof Scale}\r\n\t */\r\n  getScale(id) {\r\n    return this._get(id, this.scales, 'scale');\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof DatasetController} args\r\n\t */\r\n  removeControllers(...args) {\r\n    this._each('unregister', args, this.controllers);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Element} args\r\n\t */\r\n  removeElements(...args) {\r\n    this._each('unregister', args, this.elements);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...any} args\r\n\t */\r\n  removePlugins(...args) {\r\n    this._each('unregister', args, this.plugins);\r\n  }\r\n\r\n  /**\r\n\t * @param  {...typeof Scale} args\r\n\t */\r\n  removeScales(...args) {\r\n    this._each('unregister', args, this.scales);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _each(method, args, typedRegistry) {\r\n    [...args].forEach(arg => {\r\n      const reg = typedRegistry || this._getRegistryForType(arg);\r\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\r\n        this._exec(method, reg, arg);\r\n      } else {\r\n        // Handle loopable args\r\n        // Use case:\r\n        //  import * as plugins from './plugins.js';\r\n        //  Chart.register(plugins);\r\n        each(arg, item => {\r\n          // If there are mixed types in the loopable, make sure those are\r\n          // registered in correct registry\r\n          // Use case: (treemap exporting controller, elements etc)\r\n          //  import * as treemap from 'chartjs-chart-treemap.js';\r\n          //  Chart.register(treemap);\r\n\r\n          const itemReg = typedRegistry || this._getRegistryForType(item);\r\n          this._exec(method, itemReg, item);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _exec(method, registry, component) {\r\n    const camelMethod = _capitalize(method);\r\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\r\n    registry[method](component);\r\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getRegistryForType(type) {\r\n    for (let i = 0; i < this._typedRegistries.length; i++) {\r\n      const reg = this._typedRegistries[i];\r\n      if (reg.isForType(type)) {\r\n        return reg;\r\n      }\r\n    }\r\n    // plugins is the fallback registry\r\n    return this.plugins;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _get(id, typedRegistry, type) {\r\n    const item = typedRegistry.get(id);\r\n    if (item === undefined) {\r\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\r\n    }\r\n    return item;\r\n  }\r\n\r\n}\r\n\r\n// singleton instance\r\nexport default /* #__PURE__ */ new Registry();\r\n","import registry from './core.registry.js';\r\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('./core.controller.js').default } Chart\r\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\r\n */\r\n\r\n/**\r\n * @callback filterCallback\r\n * @param {{plugin: object, options: object}} value\r\n * @param {number} [index]\r\n * @param {array} [array]\r\n * @param {object} [thisArg]\r\n * @return {boolean}\r\n */\r\n\r\n\r\nexport default class PluginService {\r\n  constructor() {\r\n    this._init = [];\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notify(chart, hook, args, filter) {\r\n    if (hook === 'beforeInit') {\r\n      this._init = this._createDescriptors(chart, true);\r\n      this._notify(this._init, chart, 'install');\r\n    }\r\n\r\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\r\n    const result = this._notify(descriptors, chart, hook, args);\r\n\r\n    if (hook === 'afterDestroy') {\r\n      this._notify(descriptors, chart, 'stop');\r\n      this._notify(this._init, chart, 'uninstall');\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _notify(descriptors, chart, hook, args) {\r\n    args = args || {};\r\n    for (const descriptor of descriptors) {\r\n      const plugin = descriptor.plugin;\r\n      const method = plugin[hook];\r\n      const params = [chart, args, descriptor.options];\r\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  invalidate() {\r\n    // When plugins are registered, there is the possibility of a double\r\n    // invalidate situation. In this case, we only want to invalidate once.\r\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\r\n    // plugins are restarted without being correctly stopped.\r\n    // See https://github.com/chartjs/Chart.js/issues/8147\r\n    if (!isNullOrUndef(this._cache)) {\r\n      this._oldCache = this._cache;\r\n      this._cache = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _descriptors(chart) {\r\n    if (this._cache) {\r\n      return this._cache;\r\n    }\r\n\r\n    const descriptors = this._cache = this._createDescriptors(chart);\r\n\r\n    this._notifyStateChanges(chart);\r\n\r\n    return descriptors;\r\n  }\r\n\r\n  _createDescriptors(chart, all) {\r\n    const config = chart && chart.config;\r\n    const options = valueOrDefault(config.options && config.options.plugins, {});\r\n    const plugins = allPlugins(config);\r\n    // options === false => all plugins are disabled\r\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\r\n  }\r\n\r\n  /**\r\n\t * @param {Chart} chart\r\n\t * @private\r\n\t */\r\n  _notifyStateChanges(chart) {\r\n    const previousDescriptors = this._oldCache || [];\r\n    const descriptors = this._cache;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\r\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\r\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./core.config.js').default} config\r\n */\r\nfunction allPlugins(config) {\r\n  const localIds = {};\r\n  const plugins = [];\r\n  const keys = Object.keys(registry.plugins.items);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    plugins.push(registry.getPlugin(keys[i]));\r\n  }\r\n\r\n  const local = config.plugins || [];\r\n  for (let i = 0; i < local.length; i++) {\r\n    const plugin = local[i];\r\n\r\n    if (plugins.indexOf(plugin) === -1) {\r\n      plugins.push(plugin);\r\n      localIds[plugin.id] = true;\r\n    }\r\n  }\r\n\r\n  return {plugins, localIds};\r\n}\r\n\r\nfunction getOpts(options, all) {\r\n  if (!all && options === false) {\r\n    return null;\r\n  }\r\n  if (options === true) {\r\n    return {};\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\r\n  const result = [];\r\n  const context = chart.getContext();\r\n\r\n  for (const plugin of plugins) {\r\n    const id = plugin.id;\r\n    const opts = getOpts(options[id], all);\r\n    if (opts === null) {\r\n      continue;\r\n    }\r\n    result.push({\r\n      plugin,\r\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction pluginOpts(config, {plugin, local}, opts, context) {\r\n  const keys = config.pluginScopeKeys(plugin);\r\n  const scopes = config.getOptionScopes(opts, keys);\r\n  if (local && plugin.defaults) {\r\n    // make sure plugin defaults are in scopes for local (not registered) plugins\r\n    scopes.push(plugin.defaults);\r\n  }\r\n  return config.createResolver(scopes, context, [''], {\r\n    // These are just defaults that plugins can override\r\n    scriptable: false,\r\n    indexable: false,\r\n    allKeys: true\r\n  });\r\n}\r\n","import defaults, {overrides, descriptors} from './core.defaults.js';\r\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\r\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\r\n\r\nexport function getIndexAxis(type, options) {\r\n  const datasetDefaults = defaults.datasets[type] || {};\r\n  const datasetOptions = (options.datasets || {})[type] || {};\r\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\r\n}\r\n\r\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\r\n  let axis = id;\r\n  if (id === '_index_') {\r\n    axis = indexAxis;\r\n  } else if (id === '_value_') {\r\n    axis = indexAxis === 'x' ? 'y' : 'x';\r\n  }\r\n  return axis;\r\n}\r\n\r\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\r\n  return axis === indexAxis ? '_index_' : '_value_';\r\n}\r\n\r\nfunction idMatchesAxis(id) {\r\n  if (id === 'x' || id === 'y' || id === 'r') {\r\n    return id;\r\n  }\r\n}\r\n\r\nfunction axisFromPosition(position) {\r\n  if (position === 'top' || position === 'bottom') {\r\n    return 'x';\r\n  }\r\n  if (position === 'left' || position === 'right') {\r\n    return 'y';\r\n  }\r\n}\r\n\r\nexport function determineAxis(id, ...scaleOptions) {\r\n  if (idMatchesAxis(id)) {\r\n    return id;\r\n  }\r\n  for (const opts of scaleOptions) {\r\n    const axis = opts.axis\r\n      || axisFromPosition(opts.position)\r\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\r\n    if (axis) {\r\n      return axis;\r\n    }\r\n  }\r\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\r\n}\r\n\r\nfunction getAxisFromDataset(id, axis, dataset) {\r\n  if (dataset[axis + 'AxisID'] === id) {\r\n    return {axis};\r\n  }\r\n}\r\n\r\nfunction retrieveAxisFromDatasets(id, config) {\r\n  if (config.data && config.data.datasets) {\r\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\r\n    if (boundDs.length) {\r\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\r\n    }\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction mergeScaleConfig(config, options) {\r\n  const chartDefaults = overrides[config.type] || {scales: {}};\r\n  const configScales = options.scales || {};\r\n  const chartIndexAxis = getIndexAxis(config.type, options);\r\n  const scales = Object.create(null);\r\n\r\n  // First figure out first scale id's per axis.\r\n  Object.keys(configScales).forEach(id => {\r\n    const scaleConf = configScales[id];\r\n    if (!isObject(scaleConf)) {\r\n      return console.error(`Invalid scale configuration for scale: ${id}`);\r\n    }\r\n    if (scaleConf._proxy) {\r\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\r\n    }\r\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\r\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\r\n    const defaultScaleOptions = chartDefaults.scales || {};\r\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\r\n  });\r\n\r\n  // Then merge dataset defaults to scale configs\r\n  config.data.datasets.forEach(dataset => {\r\n    const type = dataset.type || config.type;\r\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\r\n    const datasetDefaults = overrides[type] || {};\r\n    const defaultScaleOptions = datasetDefaults.scales || {};\r\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\r\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\r\n      const id = dataset[axis + 'AxisID'] || axis;\r\n      scales[id] = scales[id] || Object.create(null);\r\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\r\n    });\r\n  });\r\n\r\n  // apply scale defaults, if not overridden by dataset defaults\r\n  Object.keys(scales).forEach(key => {\r\n    const scale = scales[key];\r\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\r\n  });\r\n\r\n  return scales;\r\n}\r\n\r\nfunction initOptions(config) {\r\n  const options = config.options || (config.options = {});\r\n\r\n  options.plugins = valueOrDefault(options.plugins, {});\r\n  options.scales = mergeScaleConfig(config, options);\r\n}\r\n\r\nfunction initData(data) {\r\n  data = data || {};\r\n  data.datasets = data.datasets || [];\r\n  data.labels = data.labels || [];\r\n  return data;\r\n}\r\n\r\nfunction initConfig(config) {\r\n  config = config || {};\r\n  config.data = initData(config.data);\r\n\r\n  initOptions(config);\r\n\r\n  return config;\r\n}\r\n\r\nconst keyCache = new Map();\r\nconst keysCached = new Set();\r\n\r\nfunction cachedKeys(cacheKey, generate) {\r\n  let keys = keyCache.get(cacheKey);\r\n  if (!keys) {\r\n    keys = generate();\r\n    keyCache.set(cacheKey, keys);\r\n    keysCached.add(keys);\r\n  }\r\n  return keys;\r\n}\r\n\r\nconst addIfFound = (set, obj, key) => {\r\n  const opts = resolveObjectKey(obj, key);\r\n  if (opts !== undefined) {\r\n    set.add(opts);\r\n  }\r\n};\r\n\r\nexport default class Config {\r\n  constructor(config) {\r\n    this._config = initConfig(config);\r\n    this._scopeCache = new Map();\r\n    this._resolverCache = new Map();\r\n  }\r\n\r\n  get platform() {\r\n    return this._config.platform;\r\n  }\r\n\r\n  get type() {\r\n    return this._config.type;\r\n  }\r\n\r\n  set type(type) {\r\n    this._config.type = type;\r\n  }\r\n\r\n  get data() {\r\n    return this._config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this._config.data = initData(data);\r\n  }\r\n\r\n  get options() {\r\n    return this._config.options;\r\n  }\r\n\r\n  set options(options) {\r\n    this._config.options = options;\r\n  }\r\n\r\n  get plugins() {\r\n    return this._config.plugins;\r\n  }\r\n\r\n  update() {\r\n    const config = this._config;\r\n    this.clearCache();\r\n    initOptions(config);\r\n  }\r\n\r\n  clearCache() {\r\n    this._scopeCache.clear();\r\n    this._resolverCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @return {string[][]}\r\n   */\r\n  datasetScopeKeys(datasetType) {\r\n    return cachedKeys(datasetType,\r\n      () => [[\r\n        `datasets.${datasetType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the option scope keys for resolving dataset animation options.\r\n   * These keys do not include the dataset itself, because it is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} transition\r\n   * @return {string[][]}\r\n   */\r\n  datasetAnimationScopeKeys(datasetType, transition) {\r\n    return cachedKeys(`${datasetType}.transition.${transition}`,\r\n      () => [\r\n        [\r\n          `datasets.${datasetType}.transitions.${transition}`,\r\n          `transitions.${transition}`,\r\n        ],\r\n        // The following are used for looking up the `animations` and `animation` keys\r\n        [\r\n          `datasets.${datasetType}`,\r\n          ''\r\n        ]\r\n      ]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving element options that belong\r\n   * to an dataset. These keys do not include the dataset itself, because it\r\n   * is not under options.\r\n   * @param {string} datasetType\r\n   * @param {string} elementType\r\n   * @return {string[][]}\r\n   */\r\n  datasetElementScopeKeys(datasetType, elementType) {\r\n    return cachedKeys(`${datasetType}-${elementType}`,\r\n      () => [[\r\n        `datasets.${datasetType}.elements.${elementType}`,\r\n        `datasets.${datasetType}`,\r\n        `elements.${elementType}`,\r\n        ''\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * Returns the options scope keys for resolving plugin options.\r\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\r\n   * @return {string[][]}\r\n   */\r\n  pluginScopeKeys(plugin) {\r\n    const id = plugin.id;\r\n    const type = this.type;\r\n    return cachedKeys(`${type}-plugin-${id}`,\r\n      () => [[\r\n        `plugins.${id}`,\r\n        ...plugin.additionalOptionScopes || [],\r\n      ]]);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _cachedScopes(mainScope, resetCache) {\r\n    const _scopeCache = this._scopeCache;\r\n    let cache = _scopeCache.get(mainScope);\r\n    if (!cache || resetCache) {\r\n      cache = new Map();\r\n      _scopeCache.set(mainScope, cache);\r\n    }\r\n    return cache;\r\n  }\r\n\r\n  /**\r\n   * Resolves the objects from options and defaults for option value resolution.\r\n   * @param {object} mainScope - The main scope object for options\r\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\r\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\r\n   */\r\n  getOptionScopes(mainScope, keyLists, resetCache) {\r\n    const {options, type} = this;\r\n    const cache = this._cachedScopes(mainScope, resetCache);\r\n    const cached = cache.get(keyLists);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const scopes = new Set();\r\n\r\n    keyLists.forEach(keys => {\r\n      if (mainScope) {\r\n        scopes.add(mainScope);\r\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\r\n      }\r\n      keys.forEach(key => addIfFound(scopes, options, key));\r\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\r\n      keys.forEach(key => addIfFound(scopes, defaults, key));\r\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\r\n    });\r\n\r\n    const array = Array.from(scopes);\r\n    if (array.length === 0) {\r\n      array.push(Object.create(null));\r\n    }\r\n    if (keysCached.has(keyLists)) {\r\n      cache.set(keyLists, array);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Returns the option scopes for resolving chart options\r\n   * @return {object[]}\r\n   */\r\n  chartOptionScopes() {\r\n    const {options, type} = this;\r\n\r\n    return [\r\n      options,\r\n      overrides[type] || {},\r\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\r\n      {type},\r\n      defaults,\r\n      descriptors\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {string[]} names\r\n   * @param {function|object} context\r\n   * @param {string[]} [prefixes]\r\n   * @return {object}\r\n   */\r\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\r\n    const result = {$shared: true};\r\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\r\n    let options = resolver;\r\n    if (needContext(resolver, names)) {\r\n      result.$shared = false;\r\n      context = isFunction(context) ? context() : context;\r\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\r\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\r\n      options = _attachContext(resolver, context, subResolver);\r\n    }\r\n\r\n    for (const prop of names) {\r\n      result[prop] = options[prop];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {object[]} scopes\r\n   * @param {object} [context]\r\n   * @param {string[]} [prefixes]\r\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\r\n   */\r\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\r\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\r\n    return isObject(context)\r\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\r\n      : resolver;\r\n  }\r\n}\r\n\r\nfunction getResolver(resolverCache, scopes, prefixes) {\r\n  let cache = resolverCache.get(scopes);\r\n  if (!cache) {\r\n    cache = new Map();\r\n    resolverCache.set(scopes, cache);\r\n  }\r\n  const cacheKey = prefixes.join();\r\n  let cached = cache.get(cacheKey);\r\n  if (!cached) {\r\n    const resolver = _createResolver(scopes, prefixes);\r\n    cached = {\r\n      resolver,\r\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\r\n    };\r\n    cache.set(cacheKey, cached);\r\n  }\r\n  return cached;\r\n}\r\n\r\nconst hasFunction = value => isObject(value)\r\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\r\n\r\nfunction needContext(proxy, names) {\r\n  const {isScriptable, isIndexable} = _descriptors(proxy);\r\n\r\n  for (const prop of names) {\r\n    const scriptable = isScriptable(prop);\r\n    const indexable = isIndexable(prop);\r\n    const value = (indexable || scriptable) && proxy[prop];\r\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\r\n      || (indexable && isArray(value))) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import animator from './core.animator.js';\r\nimport defaults, {overrides} from './core.defaults.js';\r\nimport Interaction from './core.interaction.js';\r\nimport layouts from './core.layouts.js';\r\nimport {_detectPlatform} from '../platform/index.js';\r\nimport PluginService from './core.plugins.js';\r\nimport registry from './core.registry.js';\r\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\r\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\r\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\r\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\r\n// @ts-ignore\r\nimport {version} from '../../package.json';\r\nimport {debounce} from '../helpers/helpers.extras.js';\r\n\r\n/**\r\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../types/index.js').Point } Point\r\n */\r\n\r\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\r\nfunction positionIsHorizontal(position, axis) {\r\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\r\n}\r\n\r\nfunction compare2Level(l1, l2) {\r\n  return function(a, b) {\r\n    return a[l1] === b[l1]\r\n      ? a[l2] - b[l2]\r\n      : a[l1] - b[l1];\r\n  };\r\n}\r\n\r\nfunction onAnimationsComplete(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n\r\n  chart.notifyPlugins('afterRender');\r\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\r\n}\r\n\r\nfunction onAnimationProgress(context) {\r\n  const chart = context.chart;\r\n  const animationOptions = chart.options.animation;\r\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\r\n}\r\n\r\n/**\r\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\r\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\r\n */\r\nfunction getCanvas(item) {\r\n  if (_isDomSupported() && typeof item === 'string') {\r\n    item = document.getElementById(item);\r\n  } else if (item && item.length) {\r\n    // Support for array based queries (such as jQuery)\r\n    item = item[0];\r\n  }\r\n\r\n  if (item && item.canvas) {\r\n    // Support for any object associated to a canvas (including a context2d)\r\n    item = item.canvas;\r\n  }\r\n  return item;\r\n}\r\n\r\nconst instances = {};\r\nconst getChart = (key) => {\r\n  const canvas = getCanvas(key);\r\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\r\n};\r\n\r\nfunction moveNumericKeys(obj, start, move) {\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    const intKey = +key;\r\n    if (intKey >= start) {\r\n      const value = obj[key];\r\n      delete obj[key];\r\n      if (move > 0 || intKey > start) {\r\n        obj[intKey + move] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ChartEvent} e\r\n * @param {ChartEvent|null} lastEvent\r\n * @param {boolean} inChartArea\r\n * @param {boolean} isClick\r\n * @returns {ChartEvent|null}\r\n */\r\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\r\n  if (!inChartArea || e.type === 'mouseout') {\r\n    return null;\r\n  }\r\n  if (isClick) {\r\n    return lastEvent;\r\n  }\r\n  return e;\r\n}\r\n\r\nfunction getSizeForArea(scale, chartArea, field) {\r\n  return scale.options.clip ? scale[field] : chartArea[field];\r\n}\r\n\r\nfunction getDatasetArea(meta, chartArea) {\r\n  const {xScale, yScale} = meta;\r\n  if (xScale && yScale) {\r\n    return {\r\n      left: getSizeForArea(xScale, chartArea, 'left'),\r\n      right: getSizeForArea(xScale, chartArea, 'right'),\r\n      top: getSizeForArea(yScale, chartArea, 'top'),\r\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\r\n    };\r\n  }\r\n  return chartArea;\r\n}\r\n\r\nclass Chart {\r\n\r\n  static defaults = defaults;\r\n  static instances = instances;\r\n  static overrides = overrides;\r\n  static registry = registry;\r\n  static version = version;\r\n  static getChart = getChart;\r\n\r\n  static register(...items) {\r\n    registry.add(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  static unregister(...items) {\r\n    registry.remove(...items);\r\n    invalidatePlugins();\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  constructor(item, userConfig) {\r\n    const config = this.config = new Config(userConfig);\r\n    const initialCanvas = getCanvas(item);\r\n    const existingChart = getChart(initialCanvas);\r\n    if (existingChart) {\r\n      throw new Error(\r\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\r\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\r\n      );\r\n    }\r\n\r\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n\r\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\r\n    this.platform.updateConfig(config);\r\n\r\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\r\n    const canvas = context && context.canvas;\r\n    const height = canvas && canvas.height;\r\n    const width = canvas && canvas.width;\r\n\r\n    this.id = uid();\r\n    this.ctx = context;\r\n    this.canvas = canvas;\r\n    this.width = width;\r\n    this.height = height;\r\n    this._options = options;\r\n    // Store the previously used aspect ratio to determine if a resize\r\n    // is needed during updates. Do this after _options is set since\r\n    // aspectRatio uses a getter\r\n    this._aspectRatio = this.aspectRatio;\r\n    this._layers = [];\r\n    this._metasets = [];\r\n    this._stacks = undefined;\r\n    this.boxes = [];\r\n    this.currentDevicePixelRatio = undefined;\r\n    this.chartArea = undefined;\r\n    this._active = [];\r\n    this._lastEvent = undefined;\r\n    this._listeners = {};\r\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\r\n    this._responsiveListeners = undefined;\r\n    this._sortedMetasets = [];\r\n    this.scales = {};\r\n    this._plugins = new PluginService();\r\n    this.$proxies = {};\r\n    this._hiddenIndices = {};\r\n    this.attached = false;\r\n    this._animationsDisabled = undefined;\r\n    this.$context = undefined;\r\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\r\n    this._dataChanges = [];\r\n\r\n    // Add the chart instance to the global namespace\r\n    instances[this.id] = this;\r\n\r\n    if (!context || !canvas) {\r\n      // The given item is not a compatible context2d element, let's return before finalizing\r\n      // the chart initialization but after setting basic chart / controller properties that\r\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\r\n      // https://github.com/chartjs/Chart.js/issues/2807\r\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\r\n      return;\r\n    }\r\n\r\n    animator.listen(this, 'complete', onAnimationsComplete);\r\n    animator.listen(this, 'progress', onAnimationProgress);\r\n\r\n    this._initialize();\r\n    if (this.attached) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  get aspectRatio() {\r\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\r\n    if (!isNullOrUndef(aspectRatio)) {\r\n      // If aspectRatio is defined in options, use that.\r\n      return aspectRatio;\r\n    }\r\n\r\n    if (maintainAspectRatio && _aspectRatio) {\r\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\r\n      return _aspectRatio;\r\n    }\r\n\r\n    // Calculate\r\n    return height ? width / height : null;\r\n  }\r\n\r\n  get data() {\r\n    return this.config.data;\r\n  }\r\n\r\n  set data(data) {\r\n    this.config.data = data;\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  set options(options) {\r\n    this.config.options = options;\r\n  }\r\n\r\n  get registry() {\r\n    return registry;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _initialize() {\r\n    // Before init plugin notification\r\n    this.notifyPlugins('beforeInit');\r\n\r\n    if (this.options.responsive) {\r\n      this.resize();\r\n    } else {\r\n      retinaScale(this, this.options.devicePixelRatio);\r\n    }\r\n\r\n    this.bindEvents();\r\n\r\n    // After init plugin notification\r\n    this.notifyPlugins('afterInit');\r\n\r\n    return this;\r\n  }\r\n\r\n  clear() {\r\n    clearCanvas(this.canvas, this.ctx);\r\n    return this;\r\n  }\r\n\r\n  stop() {\r\n    animator.stop(this);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Resize the chart to its container or to explicit dimensions.\r\n\t * @param {number} [width]\r\n\t * @param {number} [height]\r\n\t */\r\n  resize(width, height) {\r\n    if (!animator.running(this)) {\r\n      this._resize(width, height);\r\n    } else {\r\n      this._resizeBeforeDraw = {width, height};\r\n    }\r\n  }\r\n\r\n  _resize(width, height) {\r\n    const options = this.options;\r\n    const canvas = this.canvas;\r\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\r\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\r\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\r\n    const mode = this.width ? 'resize' : 'attach';\r\n\r\n    this.width = newSize.width;\r\n    this.height = newSize.height;\r\n    this._aspectRatio = this.aspectRatio;\r\n    if (!retinaScale(this, newRatio, true)) {\r\n      return;\r\n    }\r\n\r\n    this.notifyPlugins('resize', {size: newSize});\r\n\r\n    callCallback(options.onResize, [this, newSize], this);\r\n\r\n    if (this.attached) {\r\n      if (this._doResize(mode)) {\r\n        // The resize update is delayed, only draw without updating.\r\n        this.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  ensureScalesHaveIDs() {\r\n    const options = this.options;\r\n    const scalesOptions = options.scales || {};\r\n\r\n    each(scalesOptions, (axisOptions, axisID) => {\r\n      axisOptions.id = axisID;\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * Builds a map of scale ID to scale object for future lookup.\r\n\t */\r\n  buildOrUpdateScales() {\r\n    const options = this.options;\r\n    const scaleOpts = options.scales;\r\n    const scales = this.scales;\r\n    const updated = Object.keys(scales).reduce((obj, id) => {\r\n      obj[id] = false;\r\n      return obj;\r\n    }, {});\r\n    let items = [];\r\n\r\n    if (scaleOpts) {\r\n      items = items.concat(\r\n        Object.keys(scaleOpts).map((id) => {\r\n          const scaleOptions = scaleOpts[id];\r\n          const axis = determineAxis(id, scaleOptions);\r\n          const isRadial = axis === 'r';\r\n          const isHorizontal = axis === 'x';\r\n          return {\r\n            options: scaleOptions,\r\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\r\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    each(items, (item) => {\r\n      const scaleOptions = item.options;\r\n      const id = scaleOptions.id;\r\n      const axis = determineAxis(id, scaleOptions);\r\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\r\n\r\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\r\n        scaleOptions.position = item.dposition;\r\n      }\r\n\r\n      updated[id] = true;\r\n      let scale = null;\r\n      if (id in scales && scales[id].type === scaleType) {\r\n        scale = scales[id];\r\n      } else {\r\n        const scaleClass = registry.getScale(scaleType);\r\n        scale = new scaleClass({\r\n          id,\r\n          type: scaleType,\r\n          ctx: this.ctx,\r\n          chart: this\r\n        });\r\n        scales[scale.id] = scale;\r\n      }\r\n\r\n      scale.init(scaleOptions, options);\r\n    });\r\n    // clear up discarded scales\r\n    each(updated, (hasUpdated, id) => {\r\n      if (!hasUpdated) {\r\n        delete scales[id];\r\n      }\r\n    });\r\n\r\n    each(scales, (scale) => {\r\n      layouts.configure(this, scale, scale.options);\r\n      layouts.addBox(this, scale);\r\n    });\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateMetasets() {\r\n    const metasets = this._metasets;\r\n    const numData = this.data.datasets.length;\r\n    const numMeta = metasets.length;\r\n\r\n    metasets.sort((a, b) => a.index - b.index);\r\n    if (numMeta > numData) {\r\n      for (let i = numData; i < numMeta; ++i) {\r\n        this._destroyDatasetMeta(i);\r\n      }\r\n      metasets.splice(numData, numMeta - numData);\r\n    }\r\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _removeUnreferencedMetasets() {\r\n    const {_metasets: metasets, data: {datasets}} = this;\r\n    if (metasets.length > datasets.length) {\r\n      delete this._stacks;\r\n    }\r\n    metasets.forEach((meta, index) => {\r\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\r\n        this._destroyDatasetMeta(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  buildOrUpdateControllers() {\r\n    const newControllers = [];\r\n    const datasets = this.data.datasets;\r\n    let i, ilen;\r\n\r\n    this._removeUnreferencedMetasets();\r\n\r\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\r\n      const dataset = datasets[i];\r\n      let meta = this.getDatasetMeta(i);\r\n      const type = dataset.type || this.config.type;\r\n\r\n      if (meta.type && meta.type !== type) {\r\n        this._destroyDatasetMeta(i);\r\n        meta = this.getDatasetMeta(i);\r\n      }\r\n      meta.type = type;\r\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\r\n      meta.order = dataset.order || 0;\r\n      meta.index = i;\r\n      meta.label = '' + dataset.label;\r\n      meta.visible = this.isDatasetVisible(i);\r\n\r\n      if (meta.controller) {\r\n        meta.controller.updateIndex(i);\r\n        meta.controller.linkScales();\r\n      } else {\r\n        const ControllerClass = registry.getController(type);\r\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\r\n        Object.assign(ControllerClass, {\r\n          dataElementType: registry.getElement(dataElementType),\r\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\r\n        });\r\n        meta.controller = new ControllerClass(this, i);\r\n        newControllers.push(meta.controller);\r\n      }\r\n    }\r\n\r\n    this._updateMetasets();\r\n    return newControllers;\r\n  }\r\n\r\n  /**\r\n\t * Reset the elements of all datasets\r\n\t * @private\r\n\t */\r\n  _resetElements() {\r\n    each(this.data.datasets, (dataset, datasetIndex) => {\r\n      this.getDatasetMeta(datasetIndex).controller.reset();\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n\t* Resets the chart back to its state before the initial animation\r\n\t*/\r\n  reset() {\r\n    this._resetElements();\r\n    this.notifyPlugins('reset');\r\n  }\r\n\r\n  update(mode) {\r\n    const config = this.config;\r\n\r\n    config.update();\r\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n    const animsDisabled = this._animationsDisabled = !options.animation;\r\n\r\n    this._updateScales();\r\n    this._checkEventBindings();\r\n    this._updateHiddenIndices();\r\n\r\n    // plugins options references might have change, let's invalidate the cache\r\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\r\n    this._plugins.invalidate();\r\n\r\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Make sure dataset controllers are updated and new controllers are reset\r\n    const newControllers = this.buildOrUpdateControllers();\r\n\r\n    this.notifyPlugins('beforeElementsUpdate');\r\n\r\n    // Make sure all dataset controllers have correct meta data counts\r\n    let minPadding = 0;\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\r\n      const {controller} = this.getDatasetMeta(i);\r\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\r\n      // New controllers will be reset after the layout pass, so we only want to modify\r\n      // elements added to new datasets\r\n      controller.buildOrUpdateElements(reset);\r\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\r\n    }\r\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\r\n    this._updateLayout(minPadding);\r\n\r\n    // Only reset the controllers if we have animations\r\n    if (!animsDisabled) {\r\n      // Can only reset the new controllers after the scales have been updated\r\n      // Reset is done to get the starting point for the initial animation\r\n      each(newControllers, (controller) => {\r\n        controller.reset();\r\n      });\r\n    }\r\n\r\n    this._updateDatasets(mode);\r\n\r\n    // Do this before render so that any plugins that need final scale updates can use it\r\n    this.notifyPlugins('afterUpdate', {mode});\r\n\r\n    this._layers.sort(compare2Level('z', '_idx'));\r\n\r\n    // Replay last event from before update, or set hover styles on active elements\r\n    const {_active, _lastEvent} = this;\r\n    if (_lastEvent) {\r\n      this._eventHandler(_lastEvent, true);\r\n    } else if (_active.length) {\r\n      this._updateHoverStyles(_active, _active, true);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateScales() {\r\n    each(this.scales, (scale) => {\r\n      layouts.removeBox(this, scale);\r\n    });\r\n\r\n    this.ensureScalesHaveIDs();\r\n    this.buildOrUpdateScales();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _checkEventBindings() {\r\n    const options = this.options;\r\n    const existingEvents = new Set(Object.keys(this._listeners));\r\n    const newEvents = new Set(options.events);\r\n\r\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\r\n      // The configured events have changed. Rebind.\r\n      this.unbindEvents();\r\n      this.bindEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateHiddenIndices() {\r\n    const {_hiddenIndices} = this;\r\n    const changes = this._getUniformDataChanges() || [];\r\n    for (const {method, start, count} of changes) {\r\n      const move = method === '_removeElements' ? -count : count;\r\n      moveNumericKeys(_hiddenIndices, start, move);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _getUniformDataChanges() {\r\n    const _dataChanges = this._dataChanges;\r\n    if (!_dataChanges || !_dataChanges.length) {\r\n      return;\r\n    }\r\n\r\n    this._dataChanges = [];\r\n    const datasetCount = this.data.datasets.length;\r\n    const makeSet = (idx) => new Set(\r\n      _dataChanges\r\n        .filter(c => c[0] === idx)\r\n        .map((c, i) => i + ',' + c.splice(1).join(','))\r\n    );\r\n\r\n    const changeSet = makeSet(0);\r\n    for (let i = 1; i < datasetCount; i++) {\r\n      if (!setsEqual(changeSet, makeSet(i))) {\r\n        return;\r\n      }\r\n    }\r\n    return Array.from(changeSet)\r\n      .map(c => c.split(','))\r\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\r\n  }\r\n\r\n  /**\r\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\r\n\t * hook, in which case, plugins will not be called on `afterLayout`.\r\n\t * @private\r\n\t */\r\n  _updateLayout(minPadding) {\r\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    layouts.update(this, this.width, this.height, minPadding);\r\n\r\n    const area = this.chartArea;\r\n    const noArea = area.width <= 0 || area.height <= 0;\r\n\r\n    this._layers = [];\r\n    each(this.boxes, (box) => {\r\n      if (noArea && box.position === 'chartArea') {\r\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\r\n        return;\r\n      }\r\n\r\n      // configure is called twice, once in core.scale.update and once here.\r\n      // Here the boxes are fully updated and at their final positions.\r\n      if (box.configure) {\r\n        box.configure();\r\n      }\r\n      this._layers.push(...box._layers());\r\n    }, this);\r\n\r\n    this._layers.forEach((item, index) => {\r\n      item._idx = index;\r\n    });\r\n\r\n    this.notifyPlugins('afterLayout');\r\n  }\r\n\r\n  /**\r\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDatasets(mode) {\r\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this.getDatasetMeta(i).controller.configure();\r\n    }\r\n\r\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\r\n  }\r\n\r\n  /**\r\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\r\n\t * @private\r\n\t */\r\n  _updateDataset(index, mode) {\r\n    const meta = this.getDatasetMeta(index);\r\n    const args = {meta, index, mode, cancelable: true};\r\n\r\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\r\n      return;\r\n    }\r\n\r\n    meta.controller._update(mode);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetUpdate', args);\r\n  }\r\n\r\n  render() {\r\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    if (animator.has(this)) {\r\n      if (this.attached && !animator.running(this)) {\r\n        animator.start(this);\r\n      }\r\n    } else {\r\n      this.draw();\r\n      onAnimationsComplete({chart: this});\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    let i;\r\n    if (this._resizeBeforeDraw) {\r\n      const {width, height} = this._resizeBeforeDraw;\r\n      this._resize(width, height);\r\n      this._resizeBeforeDraw = null;\r\n    }\r\n    this.clear();\r\n\r\n    if (this.width <= 0 || this.height <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\r\n    // currently be part of layers. Instead, we draw\r\n    // layers <= 0 before(default, backward compat), and the rest after\r\n    const layers = this._layers;\r\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this._drawDatasets();\r\n\r\n    // Rest of layers\r\n    for (; i < layers.length; ++i) {\r\n      layers[i].draw(this.chartArea);\r\n    }\r\n\r\n    this.notifyPlugins('afterDraw');\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getSortedDatasetMetas(filterVisible) {\r\n    const metasets = this._sortedMetasets;\r\n    const result = [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\r\n      const meta = metasets[i];\r\n      if (!filterVisible || meta.visible) {\r\n        result.push(meta);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n\t * Gets the visible dataset metas in drawing order\r\n\t * @return {object[]}\r\n\t */\r\n  getSortedVisibleDatasetMetas() {\r\n    return this._getSortedDatasetMetas(true);\r\n  }\r\n\r\n  /**\r\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDatasets() {\r\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\r\n      return;\r\n    }\r\n\r\n    const metasets = this.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      this._drawDataset(metasets[i]);\r\n    }\r\n\r\n    this.notifyPlugins('afterDatasetsDraw');\r\n  }\r\n\r\n  /**\r\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\r\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\r\n\t * @private\r\n\t */\r\n  _drawDataset(meta) {\r\n    const ctx = this.ctx;\r\n    const clip = meta._clip;\r\n    const useClip = !clip.disabled;\r\n    const area = getDatasetArea(meta, this.chartArea);\r\n    const args = {\r\n      meta,\r\n      index: meta.index,\r\n      cancelable: true\r\n    };\r\n\r\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\r\n      return;\r\n    }\r\n\r\n    if (useClip) {\r\n      clipArea(ctx, {\r\n        left: clip.left === false ? 0 : area.left - clip.left,\r\n        right: clip.right === false ? this.width : area.right + clip.right,\r\n        top: clip.top === false ? 0 : area.top - clip.top,\r\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\r\n      });\r\n    }\r\n\r\n    meta.controller.draw();\r\n\r\n    if (useClip) {\r\n      unclipArea(ctx);\r\n    }\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterDatasetDraw', args);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given point is in the chart area.\r\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\r\n   * @returns {boolean}\r\n   */\r\n  isPointInArea(point) {\r\n    return _isPointInArea(point, this.chartArea, this._minPadding);\r\n  }\r\n\r\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\r\n    const method = Interaction.modes[mode];\r\n    if (typeof method === 'function') {\r\n      return method(this, e, options, useFinalPosition);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getDatasetMeta(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    const metasets = this._metasets;\r\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\r\n\r\n    if (!meta) {\r\n      meta = {\r\n        type: null,\r\n        data: [],\r\n        dataset: null,\r\n        controller: null,\r\n        hidden: null,\t\t\t// See isDatasetVisible() comment\r\n        xAxisID: null,\r\n        yAxisID: null,\r\n        order: dataset && dataset.order || 0,\r\n        index: datasetIndex,\r\n        _dataset: dataset,\r\n        _parsed: [],\r\n        _sorted: false\r\n      };\r\n      metasets.push(meta);\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getContext() {\r\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\r\n  }\r\n\r\n  getVisibleDatasetCount() {\r\n    return this.getSortedVisibleDatasetMetas().length;\r\n  }\r\n\r\n  isDatasetVisible(datasetIndex) {\r\n    const dataset = this.data.datasets[datasetIndex];\r\n    if (!dataset) {\r\n      return false;\r\n    }\r\n\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n\r\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\r\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\r\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\r\n  }\r\n\r\n  setDatasetVisibility(datasetIndex, visible) {\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    meta.hidden = !visible;\r\n  }\r\n\r\n  toggleDataVisibility(index) {\r\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\r\n  }\r\n\r\n  getDataVisibility(index) {\r\n    return !this._hiddenIndices[index];\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateVisibility(datasetIndex, dataIndex, visible) {\r\n    const mode = visible ? 'show' : 'hide';\r\n    const meta = this.getDatasetMeta(datasetIndex);\r\n    const anims = meta.controller._resolveAnimations(undefined, mode);\r\n\r\n    if (defined(dataIndex)) {\r\n      meta.data[dataIndex].hidden = !visible;\r\n      this.update();\r\n    } else {\r\n      this.setDatasetVisibility(datasetIndex, visible);\r\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\r\n      anims.update(meta, {visible});\r\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\r\n    }\r\n  }\r\n\r\n  hide(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, false);\r\n  }\r\n\r\n  show(datasetIndex, dataIndex) {\r\n    this._updateVisibility(datasetIndex, dataIndex, true);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _destroyDatasetMeta(datasetIndex) {\r\n    const meta = this._metasets[datasetIndex];\r\n    if (meta && meta.controller) {\r\n      meta.controller._destroy();\r\n    }\r\n    delete this._metasets[datasetIndex];\r\n  }\r\n\r\n  _stop() {\r\n    let i, ilen;\r\n    this.stop();\r\n    animator.remove(this);\r\n\r\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\r\n      this._destroyDatasetMeta(i);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.notifyPlugins('beforeDestroy');\r\n    const {canvas, ctx} = this;\r\n\r\n    this._stop();\r\n    this.config.clearCache();\r\n\r\n    if (canvas) {\r\n      this.unbindEvents();\r\n      clearCanvas(canvas, ctx);\r\n      this.platform.releaseContext(ctx);\r\n      this.canvas = null;\r\n      this.ctx = null;\r\n    }\r\n\r\n    delete instances[this.id];\r\n\r\n    this.notifyPlugins('afterDestroy');\r\n  }\r\n\r\n  toBase64Image(...args) {\r\n    return this.canvas.toDataURL(...args);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  bindEvents() {\r\n    this.bindUserEvents();\r\n    if (this.options.responsive) {\r\n      this.bindResponsiveEvents();\r\n    } else {\r\n      this.attached = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindUserEvents() {\r\n    const listeners = this._listeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n\r\n    const listener = (e, x, y) => {\r\n      e.offsetX = x;\r\n      e.offsetY = y;\r\n      this._eventHandler(e);\r\n    };\r\n\r\n    each(this.options.events, (type) => _add(type, listener));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  bindResponsiveEvents() {\r\n    if (!this._responsiveListeners) {\r\n      this._responsiveListeners = {};\r\n    }\r\n    const listeners = this._responsiveListeners;\r\n    const platform = this.platform;\r\n\r\n    const _add = (type, listener) => {\r\n      platform.addEventListener(this, type, listener);\r\n      listeners[type] = listener;\r\n    };\r\n    const _remove = (type, listener) => {\r\n      if (listeners[type]) {\r\n        platform.removeEventListener(this, type, listener);\r\n        delete listeners[type];\r\n      }\r\n    };\r\n\r\n    const listener = (width, height) => {\r\n      if (this.canvas) {\r\n        this.resize(width, height);\r\n      }\r\n    };\r\n\r\n    let detached; // eslint-disable-line prefer-const\r\n    const attached = () => {\r\n      _remove('attach', attached);\r\n\r\n      this.attached = true;\r\n      this.resize();\r\n\r\n      _add('resize', listener);\r\n      _add('detach', detached);\r\n    };\r\n\r\n    detached = () => {\r\n      this.attached = false;\r\n\r\n      _remove('resize', listener);\r\n\r\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\r\n      this._stop();\r\n      this._resize(0, 0);\r\n\r\n      _add('attach', attached);\r\n    };\r\n\r\n    if (platform.isAttached(this.canvas)) {\r\n      attached();\r\n    } else {\r\n      detached();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  unbindEvents() {\r\n    each(this._listeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._listeners = {};\r\n\r\n    each(this._responsiveListeners, (listener, type) => {\r\n      this.platform.removeEventListener(this, type, listener);\r\n    });\r\n    this._responsiveListeners = undefined;\r\n  }\r\n\r\n  updateHoverStyle(items, mode, enabled) {\r\n    const prefix = enabled ? 'set' : 'remove';\r\n    let meta, item, i, ilen;\r\n\r\n    if (mode === 'dataset') {\r\n      meta = this.getDatasetMeta(items[0].datasetIndex);\r\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      item = items[i];\r\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\r\n      if (controller) {\r\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active (hovered) elements\r\n\t * @returns array\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active (hovered) elements\r\n\t * @param {array} activeElements New active data points\r\n\t */\r\n  setActiveElements(activeElements) {\r\n    const lastActive = this._active || [];\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.getDatasetMeta(datasetIndex);\r\n      if (!meta) {\r\n        throw new Error('No dataset found at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(active, lastActive);\r\n\r\n    if (changed) {\r\n      this._active = active;\r\n      // Make sure we don't use the previous mouse event to override the active elements in update.\r\n      this._lastEvent = null;\r\n      this._updateHoverStyles(active, lastActive);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Calls enabled plugins on the specified hook and with the given args.\r\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\r\n\t * returned value can be used, for instance, to interrupt the current action.\r\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\r\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\r\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\r\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\r\n\t */\r\n  notifyPlugins(hook, args, filter) {\r\n    return this._plugins.notify(this, hook, args, filter);\r\n  }\r\n\r\n  /**\r\n   * Check if a plugin with the specific ID is registered and enabled\r\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\r\n   * @returns {boolean}\r\n   */\r\n  isPluginEnabled(pluginId) {\r\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _updateHoverStyles(active, lastActive, replay) {\r\n    const hoverOptions = this.options.hover;\r\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\r\n    const deactivated = diff(lastActive, active);\r\n    const activated = replay ? active : diff(active, lastActive);\r\n\r\n    if (deactivated.length) {\r\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\r\n    }\r\n\r\n    if (activated.length && hoverOptions.mode) {\r\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _eventHandler(e, replay) {\r\n    const args = {\r\n      event: e,\r\n      replay,\r\n      cancelable: true,\r\n      inChartArea: this.isPointInArea(e)\r\n    };\r\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\r\n\r\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\r\n      return;\r\n    }\r\n\r\n    const changed = this._handleEvent(e, replay, args.inChartArea);\r\n\r\n    args.cancelable = false;\r\n    this.notifyPlugins('afterEvent', args, eventFilter);\r\n\r\n    if (changed || args.changed) {\r\n      this.render();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e the event to handle\r\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\r\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\r\n\t * @return {boolean} true if the chart needs to re-render\r\n\t * @private\r\n\t */\r\n  _handleEvent(e, replay, inChartArea) {\r\n    const {_active: lastActive = [], options} = this;\r\n\r\n    // If the event is replayed from `update`, we should evaluate with the final positions.\r\n    //\r\n    // The `replay`:\r\n    // It's the last event (excluding click) that has occurred before `update`.\r\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\r\n    //\r\n    // The why:\r\n    // If animations are active, the elements haven't moved yet compared to state before update.\r\n    // But if they will, we are activating the elements that would be active, if this check\r\n    // was done after the animations have completed. => \"final positions\".\r\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\r\n    // This is done so we do not have to evaluate the active elements each animation frame\r\n    // - it would be expensive.\r\n    const useFinalPosition = replay;\r\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\r\n    const isClick = _isClickEvent(e);\r\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\r\n\r\n    if (inChartArea) {\r\n      // Set _lastEvent to null while we are processing the event handlers.\r\n      // This prevents recursion if the handler calls chart.update()\r\n      this._lastEvent = null;\r\n\r\n      // Invoke onHover hook\r\n      callCallback(options.onHover, [e, active, this], this);\r\n\r\n      if (isClick) {\r\n        callCallback(options.onClick, [e, active, this], this);\r\n      }\r\n    }\r\n\r\n    const changed = !_elementsEqual(active, lastActive);\r\n    if (changed || replay) {\r\n      this._active = active;\r\n      this._updateHoverStyles(active, lastActive, replay);\r\n    }\r\n\r\n    this._lastEvent = lastEvent;\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n   * @param {ChartEvent} e - The event\r\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\r\n   * @param {boolean} inChartArea - Is the envent inside chartArea\r\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\r\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\r\n   * @pravate\r\n   */\r\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    const hoverOptions = this.options.hover;\r\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nfunction invalidatePlugins() {\r\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\r\n}\r\n\r\nexport default Chart;\r\n","import Element from '../core/core.element.js';\r\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\r\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\r\nimport {_readValueToProps} from '../helpers/helpers.options.js';\r\nimport type {ArcOptions, Point} from '../types/index.js';\r\n\r\n\r\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\r\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\r\n  let angleMargin = pixelMargin / outerRadius;\r\n\r\n  // Draw an inner border by clipping the arc and drawing a double-width border\r\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\r\n  if (innerRadius > pixelMargin) {\r\n    angleMargin = pixelMargin / innerRadius;\r\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\r\n  } else {\r\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\r\n  }\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction toRadiusCorners(value) {\r\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\r\n}\r\n\r\n/**\r\n * Parse border radius from the provided options\r\n */\r\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\r\n  const o = toRadiusCorners(arc.options.borderRadius);\r\n  const halfThickness = (outerRadius - innerRadius) / 2;\r\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\r\n\r\n  // Outer limits are complicated. We want to compute the available angular distance at\r\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\r\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\r\n  //\r\n  // If the borderRadius is large, that value can become negative.\r\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\r\n  // we know that the thickness term will dominate and compute the limits at that point\r\n  const computeOuterLimit = (val) => {\r\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\r\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\r\n  };\r\n\r\n  return {\r\n    outerStart: computeOuterLimit(o.outerStart),\r\n    outerEnd: computeOuterLimit(o.outerEnd),\r\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\r\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\r\n  };\r\n}\r\n\r\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\r\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\r\n  return {\r\n    x: x + r * Math.cos(theta),\r\n    y: y + r * Math.sin(theta),\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */\r\nfunction pathArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  end: number,\r\n  circular: boolean,\r\n) {\r\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\r\n\r\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\r\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\r\n\r\n  let spacingOffset = 0;\r\n  const alpha = end - start;\r\n\r\n  if (spacing) {\r\n    // When spacing is present, it is the same for all items\r\n    // So we adjust the start and end angle of the arc such that\r\n    // the distance is the same as it would be without the spacing\r\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\r\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\r\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\r\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\r\n    spacingOffset = (alpha - adjustedAngle) / 2;\r\n  }\r\n\r\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\r\n  const angleOffset = (alpha - beta) / 2;\r\n  const startAngle = start + angleOffset + spacingOffset;\r\n  const endAngle = end - angleOffset - spacingOffset;\r\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\r\n\r\n  const outerStartAdjustedRadius = outerRadius - outerStart;\r\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\r\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\r\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\r\n\r\n  const innerStartAdjustedRadius = innerRadius + innerStart;\r\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\r\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\r\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\r\n\r\n  ctx.beginPath();\r\n\r\n  if (circular) {\r\n    // The first arc segments from point 1 to point a to point 2\r\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\r\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\r\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\r\n\r\n    // The corner segment from point 2 to point 3\r\n    if (outerEnd > 0) {\r\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\r\n    }\r\n\r\n    // The line from point 3 to point 4\r\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\r\n    ctx.lineTo(p4.x, p4.y);\r\n\r\n    // The corner segment from point 4 to point 5\r\n    if (innerEnd > 0) {\r\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\r\n    }\r\n\r\n    // The inner arc from point 5 to point b to point 6\r\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\r\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\r\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\r\n\r\n    // The corner segment from point 6 to point 7\r\n    if (innerStart > 0) {\r\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\r\n    }\r\n\r\n    // The line from point 7 to point 8\r\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\r\n    ctx.lineTo(p8.x, p8.y);\r\n\r\n    // The corner segment from point 8 to point 1\r\n    if (outerStart > 0) {\r\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\r\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\r\n    }\r\n  } else {\r\n    ctx.moveTo(x, y);\r\n\r\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\r\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerStartX, outerStartY);\r\n\r\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\r\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\r\n    ctx.lineTo(outerEndX, outerEndY);\r\n  }\r\n\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawArc(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  circular: boolean,\r\n) {\r\n  const {fullCircles, startAngle, circumference} = element;\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.fill();\r\n    }\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + (circumference % TAU || TAU);\r\n    }\r\n  }\r\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n  ctx.fill();\r\n  return endAngle;\r\n}\r\n\r\nfunction drawBorder(\r\n  ctx: CanvasRenderingContext2D,\r\n  element: ArcElement,\r\n  offset: number,\r\n  spacing: number,\r\n  circular: boolean,\r\n) {\r\n  const {fullCircles, startAngle, circumference, options} = element;\r\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\r\n  const inner = options.borderAlign === 'inner';\r\n\r\n  if (!borderWidth) {\r\n    return;\r\n  }\r\n\r\n  ctx.setLineDash(borderDash || []);\r\n  ctx.lineDashOffset = borderDashOffset;\r\n\r\n  if (inner) {\r\n    ctx.lineWidth = borderWidth * 2;\r\n    ctx.lineJoin = borderJoinStyle || 'round';\r\n  } else {\r\n    ctx.lineWidth = borderWidth;\r\n    ctx.lineJoin = borderJoinStyle || 'bevel';\r\n  }\r\n\r\n  let endAngle = element.endAngle;\r\n  if (fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    for (let i = 0; i < fullCircles; ++i) {\r\n      ctx.stroke();\r\n    }\r\n    if (!isNaN(circumference)) {\r\n      endAngle = startAngle + (circumference % TAU || TAU);\r\n    }\r\n  }\r\n\r\n  if (inner) {\r\n    clipArc(ctx, element, endAngle);\r\n  }\r\n\r\n  if (!fullCircles) {\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nexport interface ArcProps extends Point {\r\n  startAngle: number;\r\n  endAngle: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  circumference: number;\r\n}\r\n\r\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\r\n\r\n  static id = 'arc';\r\n\r\n  static defaults = {\r\n    borderAlign: 'center',\r\n    borderColor: '#fff',\r\n    borderDash: [],\r\n    borderDashOffset: 0,\r\n    borderJoinStyle: undefined,\r\n    borderRadius: 0,\r\n    borderWidth: 2,\r\n    offset: 0,\r\n    spacing: 0,\r\n    angle: undefined,\r\n    circular: true,\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor'\r\n  };\r\n\r\n  static descriptors = {\r\n    _scriptable: true,\r\n    _indexable: (name) => name !== 'borderDash'\r\n  };\r\n\r\n  circumference: number;\r\n  endAngle: number;\r\n  fullCircles: number;\r\n  innerRadius: number;\r\n  outerRadius: number;\r\n  pixelMargin: number;\r\n  startAngle: number;\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.circumference = undefined;\r\n    this.startAngle = undefined;\r\n    this.endAngle = undefined;\r\n    this.innerRadius = undefined;\r\n    this.outerRadius = undefined;\r\n    this.pixelMargin = 0;\r\n    this.fullCircles = 0;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\r\n    const point = this.getProps(['x', 'y'], useFinalPosition);\r\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\r\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius',\r\n      'circumference'\r\n    ], useFinalPosition);\r\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\r\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\r\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\r\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\r\n\r\n    return (betweenAngles && withinRadius);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition: boolean) {\r\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\r\n      'x',\r\n      'y',\r\n      'startAngle',\r\n      'endAngle',\r\n      'innerRadius',\r\n      'outerRadius'\r\n    ], useFinalPosition);\r\n    const {offset, spacing} = this.options;\r\n    const halfAngle = (startAngle + endAngle) / 2;\r\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\r\n    return {\r\n      x: x + Math.cos(halfAngle) * halfRadius,\r\n      y: y + Math.sin(halfAngle) * halfRadius\r\n    };\r\n  }\r\n\r\n  tooltipPosition(useFinalPosition: boolean) {\r\n    return this.getCenterPoint(useFinalPosition);\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    const {options, circumference} = this;\r\n    const offset = (options.offset || 0) / 4;\r\n    const spacing = (options.spacing || 0) / 2;\r\n    const circular = options.circular;\r\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\r\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\r\n\r\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\r\n      return;\r\n    }\r\n\r\n    ctx.save();\r\n\r\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\r\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\r\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\r\n    const radiusOffset = offset * fix;\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n\r\n    drawArc(ctx, this, radiusOffset, spacing, circular);\r\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\r\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\r\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\r\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\r\nimport {valueOrDefault} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('./element.point.js').default } PointElement\r\n */\r\n\r\nfunction setStyle(ctx, options, style = options) {\r\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\r\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\r\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\r\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\r\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\r\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\r\n}\r\n\r\nfunction lineTo(ctx, previous, target) {\r\n  ctx.lineTo(target.x, target.y);\r\n}\r\n\r\n/**\r\n * @returns {any}\r\n */\r\nfunction getLineMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedLineTo;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierCurveTo;\r\n  }\r\n\r\n  return lineTo;\r\n}\r\n\r\nfunction pathVars(points, segment, params = {}) {\r\n  const count = points.length;\r\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\r\n  const {start: segmentStart, end: segmentEnd} = segment;\r\n  const start = Math.max(paramsStart, segmentStart);\r\n  const end = Math.min(paramsEnd, segmentEnd);\r\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\r\n\r\n  return {\r\n    count,\r\n    start,\r\n    loop: segment.loop,\r\n    ilen: end < start && !outside ? count + end - start : end - start\r\n  };\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction pathSegment(ctx, line, segment, params) {\r\n  const {points, options} = line;\r\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\r\n  const lineMethod = getLineMethod(options);\r\n  // eslint-disable-next-line prefer-const\r\n  let {move = true, reverse} = params || {};\r\n  let i, point, prev;\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[(start + (reverse ? ilen - i : i)) % count];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    } else if (move) {\r\n      ctx.moveTo(point.x, point.y);\r\n      move = false;\r\n    } else {\r\n      lineMethod(ctx, prev, point, reverse, options.stepped);\r\n    }\r\n\r\n    prev = point;\r\n  }\r\n\r\n  if (loop) {\r\n    point = points[(start + (reverse ? ilen : 0)) % count];\r\n    lineMethod(ctx, prev, point, reverse, options.stepped);\r\n  }\r\n\r\n  return !!loop;\r\n}\r\n\r\n/**\r\n * Create path from points, grouping by truncated x-coordinate\r\n * Points need to be in order by x-coordinate for this to work efficiently\r\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\r\n * @param {LineElement} line\r\n * @param {object} segment\r\n * @param {number} segment.start - start index of the segment, referring the points array\r\n * @param {number} segment.end - end index of the segment, referring the points array\r\n * @param {boolean} segment.loop - indicates that the segment is a loop\r\n * @param {object} params\r\n * @param {boolean} params.move - move to starting point (vs line to it)\r\n * @param {boolean} params.reverse - path the segment from end to start\r\n * @param {number} params.start - limit segment to points starting from `start` index\r\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n */\r\nfunction fastPathSegment(ctx, line, segment, params) {\r\n  const points = line.points;\r\n  const {count, start, ilen} = pathVars(points, segment, params);\r\n  const {move = true, reverse} = params || {};\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, prevX, minY, maxY, lastY;\r\n\r\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\r\n  const drawX = () => {\r\n    if (minY !== maxY) {\r\n      // Draw line to maxY and minY, using the average x-coordinate\r\n      ctx.lineTo(avgX, maxY);\r\n      ctx.lineTo(avgX, minY);\r\n      // Line to y-value of last point in group. So the line continues\r\n      // from correct position. Not using move, to have solid path.\r\n      ctx.lineTo(avgX, lastY);\r\n    }\r\n  };\r\n\r\n  if (move) {\r\n    point = points[pointIndex(0)];\r\n    ctx.moveTo(point.x, point.y);\r\n  }\r\n\r\n  for (i = 0; i <= ilen; ++i) {\r\n    point = points[pointIndex(i)];\r\n\r\n    if (point.skip) {\r\n      // If there is a skipped point inside a segment, spanGaps must be true\r\n      continue;\r\n    }\r\n\r\n    const x = point.x;\r\n    const y = point.y;\r\n    const truncX = x | 0; // truncated x-coordinate\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      avgX = (countX * avgX + x) / ++countX;\r\n    } else {\r\n      drawX();\r\n      // Draw line to next x-position, using the first (or only)\r\n      // y-value in that group\r\n      ctx.lineTo(x, y);\r\n\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n    }\r\n    // Keep track of the last y-value in group\r\n    lastY = y;\r\n  }\r\n  drawX();\r\n}\r\n\r\n/**\r\n * @param {LineElement} line - the line\r\n * @returns {function}\r\n * @private\r\n */\r\nfunction _getSegmentMethod(line) {\r\n  const opts = line.options;\r\n  const borderDash = opts.borderDash && opts.borderDash.length;\r\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\r\n  return useFastPath ? fastPathSegment : pathSegment;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction _getInterpolationMethod(options) {\r\n  if (options.stepped) {\r\n    return _steppedInterpolation;\r\n  }\r\n\r\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n    return _bezierInterpolation;\r\n  }\r\n\r\n  return _pointInLine;\r\n}\r\n\r\nfunction strokePathWithCache(ctx, line, start, count) {\r\n  let path = line._path;\r\n  if (!path) {\r\n    path = line._path = new Path2D();\r\n    if (line.path(path, start, count)) {\r\n      path.closePath();\r\n    }\r\n  }\r\n  setStyle(ctx, line.options);\r\n  ctx.stroke(path);\r\n}\r\n\r\nfunction strokePathDirect(ctx, line, start, count) {\r\n  const {segments, options} = line;\r\n  const segmentMethod = _getSegmentMethod(line);\r\n\r\n  for (const segment of segments) {\r\n    setStyle(ctx, options, segment.style);\r\n    ctx.beginPath();\r\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\r\n      ctx.closePath();\r\n    }\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nconst usePath2D = typeof Path2D === 'function';\r\n\r\nfunction draw(ctx, line, start, count) {\r\n  if (usePath2D && !line.options.segment) {\r\n    strokePathWithCache(ctx, line, start, count);\r\n  } else {\r\n    strokePathDirect(ctx, line, start, count);\r\n  }\r\n}\r\n\r\nexport default class LineElement extends Element {\r\n\r\n  static id = 'line';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0,\r\n    borderJoinStyle: 'miter',\r\n    borderWidth: 3,\r\n    capBezierPoints: true,\r\n    cubicInterpolationMode: 'default',\r\n    fill: false,\r\n    spanGaps: false,\r\n    stepped: false,\r\n    tension: 0,\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n\r\n  static descriptors = {\r\n    _scriptable: true,\r\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.animated = true;\r\n    this.options = undefined;\r\n    this._chart = undefined;\r\n    this._loop = undefined;\r\n    this._fullLoop = undefined;\r\n    this._path = undefined;\r\n    this._points = undefined;\r\n    this._segments = undefined;\r\n    this._decimated = false;\r\n    this._pointsUpdated = false;\r\n    this._datasetIndex = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  updateControlPoints(chartArea, indexAxis) {\r\n    const options = this.options;\r\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\r\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\r\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\r\n      this._pointsUpdated = true;\r\n    }\r\n  }\r\n\r\n  set points(points) {\r\n    this._points = points;\r\n    delete this._segments;\r\n    delete this._path;\r\n    this._pointsUpdated = false;\r\n  }\r\n\r\n  get points() {\r\n    return this._points;\r\n  }\r\n\r\n  get segments() {\r\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\r\n  }\r\n\r\n  /**\r\n\t * First non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  first() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    return segments.length && points[segments[0].start];\r\n  }\r\n\r\n  /**\r\n\t * Last non-skipped point on this line\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  last() {\r\n    const segments = this.segments;\r\n    const points = this.points;\r\n    const count = segments.length;\r\n    return count && points[segments[count - 1].end];\r\n  }\r\n\r\n  /**\r\n\t * Interpolate a point in this line at the same value on `property` as\r\n\t * the reference `point` provided\r\n\t * @param {PointElement} point - the reference point\r\n\t * @param {string} property - the property to match on\r\n\t * @returns {PointElement|undefined}\r\n\t */\r\n  interpolate(point, property) {\r\n    const options = this.options;\r\n    const value = point[property];\r\n    const points = this.points;\r\n    const segments = _boundSegments(this, {property, start: value, end: value});\r\n\r\n    if (!segments.length) {\r\n      return;\r\n    }\r\n\r\n    const result = [];\r\n    const _interpolate = _getInterpolationMethod(options);\r\n    let i, ilen;\r\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\r\n      const {start, end} = segments[i];\r\n      const p1 = points[start];\r\n      const p2 = points[end];\r\n      if (p1 === p2) {\r\n        result.push(p1);\r\n        continue;\r\n      }\r\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\r\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\r\n      interpolated[property] = point[property];\r\n      result.push(interpolated);\r\n    }\r\n    return result.length === 1 ? result[0] : result;\r\n  }\r\n\r\n  /**\r\n\t * Append a segment of this line to current path.\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} segment\r\n\t * @param {number} segment.start - start index of the segment, referring the points array\r\n \t * @param {number} segment.end - end index of the segment, referring the points array\r\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\r\n\t * @param {object} params\r\n\t * @param {boolean} params.move - move to starting point (vs line to it)\r\n\t * @param {boolean} params.reverse - path the segment from end to start\r\n\t * @param {number} params.start - limit segment to points starting from `start` index\r\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\r\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\r\n\t */\r\n  pathSegment(ctx, segment, params) {\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    return segmentMethod(ctx, this, segment, params);\r\n  }\r\n\r\n  /**\r\n\t * Append all segments of this line to current path.\r\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\r\n\t */\r\n  path(ctx, start, count) {\r\n    const segments = this.segments;\r\n    const segmentMethod = _getSegmentMethod(this);\r\n    let loop = this._loop;\r\n\r\n    start = start || 0;\r\n    count = count || (this.points.length - start);\r\n\r\n    for (const segment of segments) {\r\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\r\n    }\r\n    return !!loop;\r\n  }\r\n\r\n  /**\r\n\t * Draw\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {object} chartArea\r\n\t * @param {number} [start]\r\n\t * @param {number} [count]\r\n\t */\r\n  draw(ctx, chartArea, start, count) {\r\n    const options = this.options || {};\r\n    const points = this.points || [];\r\n\r\n    if (points.length && options.borderWidth) {\r\n      ctx.save();\r\n\r\n      draw(ctx, this, start, count);\r\n\r\n      ctx.restore();\r\n    }\r\n\r\n    if (this.animated) {\r\n      // When line is animated, the control points and path are not cached.\r\n      this._pointsUpdated = false;\r\n      this._path = undefined;\r\n    }\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\r\nimport type {\r\n  CartesianParsedData,\r\n  ChartArea,\r\n  Point,\r\n  PointHoverOptions,\r\n  PointOptions,\r\n} from '../types/index.js';\r\n\r\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\r\n  const options = el.options;\r\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\r\n\r\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\r\n}\r\n\r\nexport type PointProps = Point\r\n\r\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\r\n\r\n  static id = 'point';\r\n\r\n  parsed: CartesianParsedData;\r\n  skip?: boolean;\r\n  stop?: boolean;\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderWidth: 1,\r\n    hitRadius: 1,\r\n    hoverBorderWidth: 1,\r\n    hoverRadius: 4,\r\n    pointStyle: 'circle',\r\n    radius: 3,\r\n    rotation: 0\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.parsed = undefined;\r\n    this.skip = undefined;\r\n    this.stop = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\r\n    const options = this.options;\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\r\n  }\r\n\r\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseX, 'x', useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\r\n    return inRange(this, mouseY, 'y', useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition?: boolean) {\r\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\r\n    return {x, y};\r\n  }\r\n\r\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\r\n    options = options || this.options || {};\r\n    let radius = options.radius || 0;\r\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\r\n    const borderWidth = radius && options.borderWidth || 0;\r\n    return (radius + borderWidth) * 2;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\r\n    const options = this.options;\r\n\r\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\r\n      return;\r\n    }\r\n\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n    ctx.fillStyle = options.backgroundColor;\r\n    drawPoint(ctx, options, this.x, this.y);\r\n  }\r\n\r\n  getRange() {\r\n    const options = this.options || {};\r\n    // @ts-expect-error Fallbacks should never be hit in practice\r\n    return options.radius + options.hitRadius;\r\n  }\r\n}\r\n","import Element from '../core/core.element.js';\r\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\r\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\r\n\r\n/**\r\n * Helper function to get the bounds of the bar regardless of the orientation\r\n * @param {BarElement} bar the bar\r\n * @param {boolean} [useFinalPosition]\r\n * @return {object} bounds of the bar\r\n * @private\r\n */\r\nfunction getBarBounds(bar, useFinalPosition) {\r\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\r\n\r\n  let left, right, top, bottom, half;\r\n\r\n  if (bar.horizontal) {\r\n    half = height / 2;\r\n    left = Math.min(x, base);\r\n    right = Math.max(x, base);\r\n    top = y - half;\r\n    bottom = y + half;\r\n  } else {\r\n    half = width / 2;\r\n    left = x - half;\r\n    right = x + half;\r\n    top = Math.min(y, base);\r\n    bottom = Math.max(y, base);\r\n  }\r\n\r\n  return {left, top, right, bottom};\r\n}\r\n\r\nfunction skipOrLimit(skip, value, min, max) {\r\n  return skip ? 0 : _limitValue(value, min, max);\r\n}\r\n\r\nfunction parseBorderWidth(bar, maxW, maxH) {\r\n  const value = bar.options.borderWidth;\r\n  const skip = bar.borderSkipped;\r\n  const o = toTRBL(value);\r\n\r\n  return {\r\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\r\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\r\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\r\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\r\n  };\r\n}\r\n\r\nfunction parseBorderRadius(bar, maxW, maxH) {\r\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\r\n  const value = bar.options.borderRadius;\r\n  const o = toTRBLCorners(value);\r\n  const maxR = Math.min(maxW, maxH);\r\n  const skip = bar.borderSkipped;\r\n\r\n  // If the value is an object, assume the user knows what they are doing\r\n  // and apply as directed.\r\n  const enableBorder = enableBorderRadius || isObject(value);\r\n\r\n  return {\r\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\r\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\r\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\r\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\r\n  };\r\n}\r\n\r\nfunction boundingRects(bar) {\r\n  const bounds = getBarBounds(bar);\r\n  const width = bounds.right - bounds.left;\r\n  const height = bounds.bottom - bounds.top;\r\n  const border = parseBorderWidth(bar, width / 2, height / 2);\r\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\r\n\r\n  return {\r\n    outer: {\r\n      x: bounds.left,\r\n      y: bounds.top,\r\n      w: width,\r\n      h: height,\r\n      radius\r\n    },\r\n    inner: {\r\n      x: bounds.left + border.l,\r\n      y: bounds.top + border.t,\r\n      w: width - border.l - border.r,\r\n      h: height - border.t - border.b,\r\n      radius: {\r\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\r\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\r\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\r\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction inRange(bar, x, y, useFinalPosition) {\r\n  const skipX = x === null;\r\n  const skipY = y === null;\r\n  const skipBoth = skipX && skipY;\r\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\r\n\r\n  return bounds\r\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\r\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\r\n}\r\n\r\nfunction hasRadius(radius) {\r\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\r\n}\r\n\r\n/**\r\n * Add a path of a rectangle to the current sub-path\r\n * @param {CanvasRenderingContext2D} ctx Context\r\n * @param {*} rect Bounding rect\r\n */\r\nfunction addNormalRectPath(ctx, rect) {\r\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nfunction inflateRect(rect, amount, refRect = {}) {\r\n  const x = rect.x !== refRect.x ? -amount : 0;\r\n  const y = rect.y !== refRect.y ? -amount : 0;\r\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\r\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\r\n  return {\r\n    x: rect.x + x,\r\n    y: rect.y + y,\r\n    w: rect.w + w,\r\n    h: rect.h + h,\r\n    radius: rect.radius\r\n  };\r\n}\r\n\r\nexport default class BarElement extends Element {\r\n\r\n  static id = 'bar';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    borderSkipped: 'start',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    inflateAmount: 'auto',\r\n    pointStyle: undefined\r\n  };\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaultRoutes = {\r\n    backgroundColor: 'backgroundColor',\r\n    borderColor: 'borderColor'\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.horizontal = undefined;\r\n    this.base = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.inflateAmount = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\r\n    const {inner, outer} = boundingRects(this);\r\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\r\n\r\n    ctx.save();\r\n\r\n    if (outer.w !== inner.w || outer.h !== inner.h) {\r\n      ctx.beginPath();\r\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\r\n      ctx.clip();\r\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\r\n      ctx.fillStyle = borderColor;\r\n      ctx.fill('evenodd');\r\n    }\r\n\r\n    ctx.beginPath();\r\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    return inRange(this, mouseX, mouseY, useFinalPosition);\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, null, useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, null, mouseY, useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\r\n    return {\r\n      x: horizontal ? (x + base) / 2 : x,\r\n      y: horizontal ? y : (y + base) / 2\r\n    };\r\n  }\r\n\r\n  getRange(axis) {\r\n    return axis === 'x' ? this.width / 2 : this.height / 2;\r\n  }\r\n}\r\n","import {DoughnutController, PolarAreaController} from '../index.js';\r\nimport type {Chart, ChartDataset} from '../types.js';\r\n\r\nexport interface ColorsPluginOptions {\r\n  enabled?: boolean;\r\n  forceOverride?: boolean;\r\n}\r\n\r\ninterface ColorsDescriptor {\r\n  backgroundColor?: unknown;\r\n  borderColor?: unknown;\r\n}\r\n\r\nconst BORDER_COLORS = [\r\n  'rgb(54, 162, 235)', // blue\r\n  'rgb(255, 99, 132)', // red\r\n  'rgb(255, 159, 64)', // orange\r\n  'rgb(255, 205, 86)', // yellow\r\n  'rgb(75, 192, 192)', // green\r\n  'rgb(153, 102, 255)', // purple\r\n  'rgb(201, 203, 207)' // grey\r\n];\r\n\r\n// Border colors with 50% transparency\r\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\r\n\r\nfunction getBorderColor(i: number) {\r\n  return BORDER_COLORS[i % BORDER_COLORS.length];\r\n}\r\n\r\nfunction getBackgroundColor(i: number) {\r\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\r\n}\r\n\r\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\r\n  dataset.borderColor = getBorderColor(i);\r\n  dataset.backgroundColor = getBackgroundColor(i);\r\n\r\n  return ++i;\r\n}\r\n\r\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\r\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\r\n\r\n  return i;\r\n}\r\n\r\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\r\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\r\n\r\n  return i;\r\n}\r\n\r\nfunction getColorizer(chart: Chart) {\r\n  let i = 0;\r\n\r\n  return (dataset: ChartDataset, datasetIndex: number) => {\r\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n\r\n    if (controller instanceof DoughnutController) {\r\n      i = colorizeDoughnutDataset(dataset, i);\r\n    } else if (controller instanceof PolarAreaController) {\r\n      i = colorizePolarAreaDataset(dataset, i);\r\n    } else if (controller) {\r\n      i = colorizeDefaultDataset(dataset, i);\r\n    }\r\n  };\r\n}\r\n\r\nfunction containsColorsDefinitions(\r\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\r\n) {\r\n  let k: number | string;\r\n\r\n  for (k in descriptors) {\r\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction containsColorsDefinition(\r\n  descriptor: ColorsDescriptor\r\n) {\r\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\r\n}\r\n\r\nexport default {\r\n  id: 'colors',\r\n\r\n  defaults: {\r\n    enabled: true,\r\n    forceOverride: false\r\n  } as ColorsPluginOptions,\r\n\r\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\r\n    if (!options.enabled) {\r\n      return;\r\n    }\r\n\r\n    const {\r\n      data: {datasets},\r\n      options: chartOptions\r\n    } = chart.config;\r\n    const {elements} = chartOptions;\r\n\r\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\r\n      return;\r\n    }\r\n\r\n    const colorizer = getColorizer(chart);\r\n\r\n    datasets.forEach(colorizer);\r\n  }\r\n};\r\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\r\n\r\nfunction lttbDecimation(data, start, count, availableWidth, options) {\r\n  /**\r\n   * Implementation of the Largest Triangle Three Buckets algorithm.\r\n   *\r\n   * This implementation is based on the original implementation by Sveinn Steinarsson\r\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\r\n   *\r\n   * The original implementation is MIT licensed.\r\n   */\r\n  const samples = options.samples || availableWidth;\r\n  // There are less points than the threshold, returning the whole array\r\n  if (samples >= count) {\r\n    return data.slice(start, start + count);\r\n  }\r\n\r\n  const decimated = [];\r\n\r\n  const bucketWidth = (count - 2) / (samples - 2);\r\n  let sampledIndex = 0;\r\n  const endIndex = start + count - 1;\r\n  // Starting from offset\r\n  let a = start;\r\n  let i, maxAreaPoint, maxArea, area, nextA;\r\n\r\n  decimated[sampledIndex++] = data[a];\r\n\r\n  for (i = 0; i < samples - 2; i++) {\r\n    let avgX = 0;\r\n    let avgY = 0;\r\n    let j;\r\n\r\n    // Adding offset\r\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\r\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\r\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\r\n\r\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\r\n      avgX += data[j].x;\r\n      avgY += data[j].y;\r\n    }\r\n\r\n    avgX /= avgRangeLength;\r\n    avgY /= avgRangeLength;\r\n\r\n    // Adding offset\r\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\r\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\r\n    const {x: pointAx, y: pointAy} = data[a];\r\n\r\n    // Note that this is changed from the original algorithm which initializes these\r\n    // values to 1. The reason for this change is that if the area is small, nextA\r\n    // would never be set and thus a crash would occur in the next loop as `a` would become\r\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\r\n    // initializing with a negative number is the correct solution.\r\n    maxArea = area = -1;\r\n\r\n    for (j = rangeOffs; j < rangeTo; j++) {\r\n      area = 0.5 * Math.abs(\r\n        (pointAx - avgX) * (data[j].y - pointAy) -\r\n        (pointAx - data[j].x) * (avgY - pointAy)\r\n      );\r\n\r\n      if (area > maxArea) {\r\n        maxArea = area;\r\n        maxAreaPoint = data[j];\r\n        nextA = j;\r\n      }\r\n    }\r\n\r\n    decimated[sampledIndex++] = maxAreaPoint;\r\n    a = nextA;\r\n  }\r\n\r\n  // Include the last point\r\n  decimated[sampledIndex++] = data[endIndex];\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction minMaxDecimation(data, start, count, availableWidth) {\r\n  let avgX = 0;\r\n  let countX = 0;\r\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\r\n  const decimated = [];\r\n  const endIndex = start + count - 1;\r\n\r\n  const xMin = data[start].x;\r\n  const xMax = data[endIndex].x;\r\n  const dx = xMax - xMin;\r\n\r\n  for (i = start; i < start + count; ++i) {\r\n    point = data[i];\r\n    x = (point.x - xMin) / dx * availableWidth;\r\n    y = point.y;\r\n    const truncX = x | 0;\r\n\r\n    if (truncX === prevX) {\r\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\r\n      if (y < minY) {\r\n        minY = y;\r\n        minIndex = i;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n        maxIndex = i;\r\n      }\r\n      // For first point in group, countX is `0`, so average will be `x` / 1.\r\n      // Use point.x here because we're computing the average data `x` value\r\n      avgX = (countX * avgX + point.x) / ++countX;\r\n    } else {\r\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\r\n      const lastIndex = i - 1;\r\n\r\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\r\n        // The interval is defined by 4 points: start, min, max, end.\r\n        // The starting point is already considered at this point, so we need to determine which\r\n        // of the other points to add. We need to sort these points to ensure the decimated data\r\n        // is still sorted and then ensure there are no duplicates.\r\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\r\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\r\n\r\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex1],\r\n            x: avgX,\r\n          });\r\n        }\r\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\r\n          decimated.push({\r\n            ...data[intermediateIndex2],\r\n            x: avgX\r\n          });\r\n        }\r\n      }\r\n\r\n      // lastIndex === startIndex will occur when a range has only 1 point which could\r\n      // happen with very uneven data\r\n      if (i > 0 && lastIndex !== startIndex) {\r\n        // Last point in the previous interval\r\n        decimated.push(data[lastIndex]);\r\n      }\r\n\r\n      // Start of the new interval\r\n      decimated.push(point);\r\n      prevX = truncX;\r\n      countX = 0;\r\n      minY = maxY = y;\r\n      minIndex = maxIndex = startIndex = i;\r\n    }\r\n  }\r\n\r\n  return decimated;\r\n}\r\n\r\nfunction cleanDecimatedDataset(dataset) {\r\n  if (dataset._decimated) {\r\n    const data = dataset._data;\r\n    delete dataset._decimated;\r\n    delete dataset._data;\r\n    Object.defineProperty(dataset, 'data', {\r\n      configurable: true,\r\n      enumerable: true,\r\n      writable: true,\r\n      value: data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction cleanDecimatedData(chart) {\r\n  chart.data.datasets.forEach((dataset) => {\r\n    cleanDecimatedDataset(dataset);\r\n  });\r\n}\r\n\r\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\r\n  const pointCount = points.length;\r\n\r\n  let start = 0;\r\n  let count;\r\n\r\n  const {iScale} = meta;\r\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\r\n\r\n  if (minDefined) {\r\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\r\n  }\r\n  if (maxDefined) {\r\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\r\n  } else {\r\n    count = pointCount - start;\r\n  }\r\n\r\n  return {start, count};\r\n}\r\n\r\nexport default {\r\n  id: 'decimation',\r\n\r\n  defaults: {\r\n    algorithm: 'min-max',\r\n    enabled: false,\r\n  },\r\n\r\n  beforeElementsUpdate: (chart, args, options) => {\r\n    if (!options.enabled) {\r\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\r\n      cleanDecimatedData(chart);\r\n      return;\r\n    }\r\n\r\n    // Assume the entire chart is available to show a few more points than needed\r\n    const availableWidth = chart.width;\r\n\r\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\r\n      const {_data, indexAxis} = dataset;\r\n      const meta = chart.getDatasetMeta(datasetIndex);\r\n      const data = _data || dataset.data;\r\n\r\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\r\n        // Decimation is only supported for lines that have an X indexAxis\r\n        return;\r\n      }\r\n\r\n      if (!meta.controller.supportsDecimation) {\r\n        // Only line datasets are supported\r\n        return;\r\n      }\r\n\r\n      const xAxis = chart.scales[meta.xAxisID];\r\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\r\n        // Only linear interpolation is supported\r\n        return;\r\n      }\r\n\r\n      if (chart.options.parsing) {\r\n        // Plugin only supports data that does not need parsing\r\n        return;\r\n      }\r\n\r\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\r\n      const threshold = options.threshold || 4 * availableWidth;\r\n      if (count <= threshold) {\r\n        // No decimation is required until we are above this threshold\r\n        cleanDecimatedDataset(dataset);\r\n        return;\r\n      }\r\n\r\n      if (isNullOrUndef(_data)) {\r\n        // First time we are seeing this dataset\r\n        // We override the 'data' property with a setter that stores the\r\n        // raw data in _data, but reads the decimated data from _decimated\r\n        dataset._data = data;\r\n        delete dataset.data;\r\n        Object.defineProperty(dataset, 'data', {\r\n          configurable: true,\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._decimated;\r\n          },\r\n          set: function(d) {\r\n            this._data = d;\r\n          }\r\n        });\r\n      }\r\n\r\n      // Point the chart to the decimated data\r\n      let decimated;\r\n      switch (options.algorithm) {\r\n      case 'lttb':\r\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\r\n        break;\r\n      case 'min-max':\r\n        decimated = minMaxDecimation(data, start, count, availableWidth);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\r\n      }\r\n\r\n      dataset._decimated = decimated;\r\n    });\r\n  },\r\n\r\n  destroy(chart) {\r\n    cleanDecimatedData(chart);\r\n  }\r\n};\r\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\r\n\r\nexport function _segments(line, target, property) {\r\n  const segments = line.segments;\r\n  const points = line.points;\r\n  const tpoints = target.points;\r\n  const parts = [];\r\n\r\n  for (const segment of segments) {\r\n    let {start, end} = segment;\r\n    end = _findSegmentEnd(start, end, points);\r\n\r\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\r\n\r\n    if (!target.segments) {\r\n      // Special case for boundary not supporting `segments` (simpleArc)\r\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\r\n      parts.push({\r\n        source: segment,\r\n        target: bounds,\r\n        start: points[start],\r\n        end: points[end]\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\r\n    const targetSegments = _boundSegments(target, bounds);\r\n\r\n    for (const tgt of targetSegments) {\r\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\r\n      const fillSources = _boundSegment(segment, points, subBounds);\r\n\r\n      for (const fillSource of fillSources) {\r\n        parts.push({\r\n          source: fillSource,\r\n          target: tgt,\r\n          start: {\r\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\r\n          },\r\n          end: {\r\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return parts;\r\n}\r\n\r\nexport function _getBounds(property, first, last, loop) {\r\n  if (loop) {\r\n    return;\r\n  }\r\n  let start = first[property];\r\n  let end = last[property];\r\n\r\n  if (property === 'angle') {\r\n    start = _normalizeAngle(start);\r\n    end = _normalizeAngle(end);\r\n  }\r\n  return {property, start, end};\r\n}\r\n\r\nexport function _pointsFromSegments(boundary, line) {\r\n  const {x = null, y = null} = boundary || {};\r\n  const linePoints = line.points;\r\n  const points = [];\r\n  line.segments.forEach(({start, end}) => {\r\n    end = _findSegmentEnd(start, end, linePoints);\r\n    const first = linePoints[start];\r\n    const last = linePoints[end];\r\n    if (y !== null) {\r\n      points.push({x: first.x, y});\r\n      points.push({x: last.x, y});\r\n    } else if (x !== null) {\r\n      points.push({x, y: first.y});\r\n      points.push({x, y: last.y});\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nexport function _findSegmentEnd(start, end, points) {\r\n  for (;end > start; end--) {\r\n    const point = points[end];\r\n    if (!isNaN(point.x) && !isNaN(point.y)) {\r\n      break;\r\n    }\r\n  }\r\n  return end;\r\n}\r\n\r\nfunction _getEdge(a, b, prop, fn) {\r\n  if (a && b) {\r\n    return fn(a[prop], b[prop]);\r\n  }\r\n  return a ? a[prop] : b ? b[prop] : 0;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements/index.js';\r\nimport {isArray} from '../../helpers/index.js';\r\nimport {_pointsFromSegments} from './filler.segment.js';\r\n\r\n/**\r\n * @param {PointElement[] | { x: number; y: number; }} boundary\r\n * @param {LineElement} line\r\n * @return {LineElement?}\r\n */\r\nexport function _createBoundaryLine(boundary, line) {\r\n  let points = [];\r\n  let _loop = false;\r\n\r\n  if (isArray(boundary)) {\r\n    _loop = true;\r\n    // @ts-ignore\r\n    points = boundary;\r\n  } else {\r\n    points = _pointsFromSegments(boundary, line);\r\n  }\r\n\r\n  return points.length ? new LineElement({\r\n    points,\r\n    options: {tension: 0},\r\n    _loop,\r\n    _fullLoop: _loop\r\n  }) : null;\r\n}\r\n\r\nexport function _shouldApplyFill(source) {\r\n  return source && source.fill !== false;\r\n}\r\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\r\n\r\n/**\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.line.js').default } LineElement\r\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\r\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\r\n */\r\n\r\nexport function _resolveTarget(sources, index, propagate) {\r\n  const source = sources[index];\r\n  let fill = source.fill;\r\n  const visited = [index];\r\n  let target;\r\n\r\n  if (!propagate) {\r\n    return fill;\r\n  }\r\n\r\n  while (fill !== false && visited.indexOf(fill) === -1) {\r\n    if (!isFinite(fill)) {\r\n      return fill;\r\n    }\r\n\r\n    target = sources[fill];\r\n    if (!target) {\r\n      return false;\r\n    }\r\n\r\n    if (target.visible) {\r\n      return fill;\r\n    }\r\n\r\n    visited.push(fill);\r\n    fill = target.fill;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {number} index\r\n * @param {number} count\r\n */\r\nexport function _decodeFill(line, index, count) {\r\n  /** @type {string | {value: number}} */\r\n  const fill = parseFillOption(line);\r\n\r\n  if (isObject(fill)) {\r\n    return isNaN(fill.value) ? false : fill;\r\n  }\r\n\r\n  let target = parseFloat(fill);\r\n\r\n  if (isFinite(target) && Math.floor(target) === target) {\r\n    return decodeTargetIndex(fill[0], index, target, count);\r\n  }\r\n\r\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\r\n}\r\n\r\nfunction decodeTargetIndex(firstCh, index, target, count) {\r\n  if (firstCh === '-' || firstCh === '+') {\r\n    target = index + target;\r\n  }\r\n\r\n  if (target === index || target < 0 || target >= count) {\r\n    return false;\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @returns {number | null}\r\n */\r\nexport function _getTargetPixel(fill, scale) {\r\n  let pixel = null;\r\n  if (fill === 'start') {\r\n    pixel = scale.bottom;\r\n  } else if (fill === 'end') {\r\n    pixel = scale.top;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    pixel = scale.getPixelForValue(fill.value);\r\n  } else if (scale.getBasePixel) {\r\n    pixel = scale.getBasePixel();\r\n  }\r\n  return pixel;\r\n}\r\n\r\n/**\r\n * @param {FillTarget | ComplexFillTarget} fill\r\n * @param {Scale} scale\r\n * @param {number} startValue\r\n * @returns {number | undefined}\r\n */\r\nexport function _getTargetValue(fill, scale, startValue) {\r\n  let value;\r\n\r\n  if (fill === 'start') {\r\n    value = startValue;\r\n  } else if (fill === 'end') {\r\n    value = scale.options.reverse ? scale.min : scale.max;\r\n  } else if (isObject(fill)) {\r\n    // @ts-ignore\r\n    value = fill.value;\r\n  } else {\r\n    value = scale.getBaseValue();\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n */\r\nfunction parseFillOption(line) {\r\n  const options = line.options;\r\n  const fillOption = options.fill;\r\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\r\n\r\n  if (fill === undefined) {\r\n    fill = !!options.backgroundColor;\r\n  }\r\n\r\n  if (fill === false || fill === null) {\r\n    return false;\r\n  }\r\n\r\n  if (fill === true) {\r\n    return 'origin';\r\n  }\r\n  return fill;\r\n}\r\n","/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nimport {LineElement} from '../../elements/index.js';\r\nimport {_isBetween} from '../../helpers/index.js';\r\nimport {_createBoundaryLine} from './filler.helper.js';\r\n\r\n/**\r\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\r\n * @return {LineElement}\r\n */\r\nexport function _buildStackLine(source) {\r\n  const {scale, index, line} = source;\r\n  const points = [];\r\n  const segments = line.segments;\r\n  const sourcePoints = line.points;\r\n  const linesBelow = getLinesBelow(scale, index);\r\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\r\n\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    for (let j = segment.start; j <= segment.end; j++) {\r\n      addPointsBelow(points, sourcePoints[j], linesBelow);\r\n    }\r\n  }\r\n  return new LineElement({points, options: {}});\r\n}\r\n\r\n/**\r\n * @param {Scale} scale\r\n * @param {number} index\r\n * @return {LineElement[]}\r\n */\r\nfunction getLinesBelow(scale, index) {\r\n  const below = [];\r\n  const metas = scale.getMatchingVisibleMetas('line');\r\n\r\n  for (let i = 0; i < metas.length; i++) {\r\n    const meta = metas[i];\r\n    if (meta.index === index) {\r\n      break;\r\n    }\r\n    if (!meta.hidden) {\r\n      below.unshift(meta.dataset);\r\n    }\r\n  }\r\n  return below;\r\n}\r\n\r\n/**\r\n * @param {PointElement[]} points\r\n * @param {PointElement} sourcePoint\r\n * @param {LineElement[]} linesBelow\r\n */\r\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\r\n  const postponed = [];\r\n  for (let j = 0; j < linesBelow.length; j++) {\r\n    const line = linesBelow[j];\r\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\r\n\r\n    if (!point || (first && last)) {\r\n      continue;\r\n    }\r\n    if (first) {\r\n      // First point of an segment -> need to add another point before this,\r\n      // from next line below.\r\n      postponed.unshift(point);\r\n    } else {\r\n      points.push(point);\r\n      if (!last) {\r\n        // In the middle of an segment, no need to add more points.\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  points.push(...postponed);\r\n}\r\n\r\n/**\r\n * @param {LineElement} line\r\n * @param {PointElement} sourcePoint\r\n * @param {string} property\r\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\r\n */\r\nfunction findPoint(line, sourcePoint, property) {\r\n  const point = line.interpolate(sourcePoint, property);\r\n  if (!point) {\r\n    return {};\r\n  }\r\n\r\n  const pointValue = point[property];\r\n  const segments = line.segments;\r\n  const linePoints = line.points;\r\n  let first = false;\r\n  let last = false;\r\n  for (let i = 0; i < segments.length; i++) {\r\n    const segment = segments[i];\r\n    const firstValue = linePoints[segment.start][property];\r\n    const lastValue = linePoints[segment.end][property];\r\n    if (_isBetween(pointValue, firstValue, lastValue)) {\r\n      first = pointValue === firstValue;\r\n      last = pointValue === lastValue;\r\n      break;\r\n    }\r\n  }\r\n  return {first, last, point};\r\n}\r\n","import {TAU} from '../../helpers/index.js';\r\n\r\n// TODO: use elements.ArcElement instead\r\nexport class simpleArc {\r\n  constructor(opts) {\r\n    this.x = opts.x;\r\n    this.y = opts.y;\r\n    this.radius = opts.radius;\r\n  }\r\n\r\n  pathSegment(ctx, bounds, opts) {\r\n    const {x, y, radius} = this;\r\n    bounds = bounds || {start: 0, end: TAU};\r\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\r\n    return !opts.bounds;\r\n  }\r\n\r\n  interpolate(point) {\r\n    const {x, y, radius} = this;\r\n    const angle = point.angle;\r\n    return {\r\n      x: x + Math.cos(angle) * radius,\r\n      y: y + Math.sin(angle) * radius,\r\n      angle\r\n    };\r\n  }\r\n}\r\n","import {isFinite} from '../../helpers/index.js';\r\nimport {_createBoundaryLine} from './filler.helper.js';\r\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\r\nimport {_buildStackLine} from './filler.target.stack.js';\r\nimport {simpleArc} from './simpleArc.js';\r\n\r\n/**\r\n * @typedef { import('../../core/core.controller.js').default } Chart\r\n * @typedef { import('../../core/core.scale.js').default } Scale\r\n * @typedef { import('../../elements/element.point.js').default } PointElement\r\n */\r\n\r\nexport function _getTarget(source) {\r\n  const {chart, fill, line} = source;\r\n\r\n  if (isFinite(fill)) {\r\n    return getLineByIndex(chart, fill);\r\n  }\r\n\r\n  if (fill === 'stack') {\r\n    return _buildStackLine(source);\r\n  }\r\n\r\n  if (fill === 'shape') {\r\n    return true;\r\n  }\r\n\r\n  const boundary = computeBoundary(source);\r\n\r\n  if (boundary instanceof simpleArc) {\r\n    return boundary;\r\n  }\r\n\r\n  return _createBoundaryLine(boundary, line);\r\n}\r\n\r\n/**\r\n * @param {Chart} chart\r\n * @param {number} index\r\n */\r\nfunction getLineByIndex(chart, index) {\r\n  const meta = chart.getDatasetMeta(index);\r\n  const visible = meta && chart.isDatasetVisible(index);\r\n  return visible ? meta.dataset : null;\r\n}\r\n\r\nfunction computeBoundary(source) {\r\n  const scale = source.scale || {};\r\n\r\n  if (scale.getPointPositionForValue) {\r\n    return computeCircularBoundary(source);\r\n  }\r\n  return computeLinearBoundary(source);\r\n}\r\n\r\n\r\nfunction computeLinearBoundary(source) {\r\n  const {scale = {}, fill} = source;\r\n  const pixel = _getTargetPixel(fill, scale);\r\n\r\n  if (isFinite(pixel)) {\r\n    const horizontal = scale.isHorizontal();\r\n\r\n    return {\r\n      x: horizontal ? pixel : null,\r\n      y: horizontal ? null : pixel\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction computeCircularBoundary(source) {\r\n  const {scale, fill} = source;\r\n  const options = scale.options;\r\n  const length = scale.getLabels().length;\r\n  const start = options.reverse ? scale.max : scale.min;\r\n  const value = _getTargetValue(fill, scale, start);\r\n  const target = [];\r\n\r\n  if (options.grid.circular) {\r\n    const center = scale.getPointPositionForValue(0, start);\r\n    return new simpleArc({\r\n      x: center.x,\r\n      y: center.y,\r\n      radius: scale.getDistanceFromCenterForValue(value)\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    target.push(scale.getPointPositionForValue(i, value));\r\n  }\r\n  return target;\r\n}\r\n\r\n","import {clipArea, unclipArea} from '../../helpers/index.js';\r\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\r\nimport {_getTarget} from './filler.target.js';\r\n\r\nexport function _drawfill(ctx, source, area) {\r\n  const target = _getTarget(source);\r\n  const {line, scale, axis} = source;\r\n  const lineOpts = line.options;\r\n  const fillOption = lineOpts.fill;\r\n  const color = lineOpts.backgroundColor;\r\n  const {above = color, below = color} = fillOption || {};\r\n  if (target && line.points.length) {\r\n    clipArea(ctx, area);\r\n    doFill(ctx, {line, target, above, below, area, scale, axis});\r\n    unclipArea(ctx);\r\n  }\r\n}\r\n\r\nfunction doFill(ctx, cfg) {\r\n  const {line, target, above, below, area, scale} = cfg;\r\n  const property = line._loop ? 'angle' : cfg.axis;\r\n\r\n  ctx.save();\r\n\r\n  if (property === 'x' && below !== above) {\r\n    clipVertical(ctx, target, area.top);\r\n    fill(ctx, {line, target, color: above, scale, property});\r\n    ctx.restore();\r\n    ctx.save();\r\n    clipVertical(ctx, target, area.bottom);\r\n  }\r\n  fill(ctx, {line, target, color: below, scale, property});\r\n\r\n  ctx.restore();\r\n}\r\n\r\nfunction clipVertical(ctx, target, clipY) {\r\n  const {segments, points} = target;\r\n  let first = true;\r\n  let lineLoop = false;\r\n\r\n  ctx.beginPath();\r\n  for (const segment of segments) {\r\n    const {start, end} = segment;\r\n    const firstPoint = points[start];\r\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\r\n    if (first) {\r\n      ctx.moveTo(firstPoint.x, firstPoint.y);\r\n      first = false;\r\n    } else {\r\n      ctx.lineTo(firstPoint.x, clipY);\r\n      ctx.lineTo(firstPoint.x, firstPoint.y);\r\n    }\r\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\r\n    if (lineLoop) {\r\n      ctx.closePath();\r\n    } else {\r\n      ctx.lineTo(lastPoint.x, clipY);\r\n    }\r\n  }\r\n\r\n  ctx.lineTo(target.first().x, clipY);\r\n  ctx.closePath();\r\n  ctx.clip();\r\n}\r\n\r\nfunction fill(ctx, cfg) {\r\n  const {line, target, property, color, scale} = cfg;\r\n  const segments = _segments(line, target, property);\r\n\r\n  for (const {source: src, target: tgt, start, end} of segments) {\r\n    const {style: {backgroundColor = color} = {}} = src;\r\n    const notShape = target !== true;\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = backgroundColor;\r\n\r\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\r\n\r\n    ctx.beginPath();\r\n\r\n    const lineLoop = !!line.pathSegment(ctx, src);\r\n\r\n    let loop;\r\n    if (notShape) {\r\n      if (lineLoop) {\r\n        ctx.closePath();\r\n      } else {\r\n        interpolatedLineTo(ctx, target, end, property);\r\n      }\r\n\r\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\r\n      loop = lineLoop && targetLoop;\r\n      if (!loop) {\r\n        interpolatedLineTo(ctx, target, start, property);\r\n      }\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nfunction clipBounds(ctx, scale, bounds) {\r\n  const {top, bottom} = scale.chart.chartArea;\r\n  const {property, start, end} = bounds || {};\r\n  if (property === 'x') {\r\n    ctx.beginPath();\r\n    ctx.rect(start, top, end - start, bottom - top);\r\n    ctx.clip();\r\n  }\r\n}\r\n\r\nfunction interpolatedLineTo(ctx, target, point, property) {\r\n  const interpolatedPoint = target.interpolate(point, property);\r\n  if (interpolatedPoint) {\r\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\r\n  }\r\n}\r\n\r\n","/**\r\n * Plugin based on discussion from the following Chart.js issues:\r\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\r\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\r\n */\r\n\r\nimport LineElement from '../../elements/element.line.js';\r\nimport {_drawfill} from './filler.drawing.js';\r\nimport {_shouldApplyFill} from './filler.helper.js';\r\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\r\n\r\nexport default {\r\n  id: 'filler',\r\n\r\n  afterDatasetsUpdate(chart, _args, options) {\r\n    const count = (chart.data.datasets || []).length;\r\n    const sources = [];\r\n    let meta, i, line, source;\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      meta = chart.getDatasetMeta(i);\r\n      line = meta.dataset;\r\n      source = null;\r\n\r\n      if (line && line.options && line instanceof LineElement) {\r\n        source = {\r\n          visible: chart.isDatasetVisible(i),\r\n          index: i,\r\n          fill: _decodeFill(line, i, count),\r\n          chart,\r\n          axis: meta.controller.options.indexAxis,\r\n          scale: meta.vScale,\r\n          line,\r\n        };\r\n      }\r\n\r\n      meta.$filler = source;\r\n      sources.push(source);\r\n    }\r\n\r\n    for (i = 0; i < count; ++i) {\r\n      source = sources[i];\r\n      if (!source || source.fill === false) {\r\n        continue;\r\n      }\r\n\r\n      source.fill = _resolveTarget(sources, i, options.propagate);\r\n    }\r\n  },\r\n\r\n  beforeDraw(chart, _args, options) {\r\n    const draw = options.drawTime === 'beforeDraw';\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    const area = chart.chartArea;\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n      if (!source) {\r\n        continue;\r\n      }\r\n\r\n      source.line.updateControlPoints(area, source.axis);\r\n      if (draw && source.fill) {\r\n        _drawfill(chart.ctx, source, area);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetsDraw(chart, _args, options) {\r\n    if (options.drawTime !== 'beforeDatasetsDraw') {\r\n      return;\r\n    }\r\n\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    for (let i = metasets.length - 1; i >= 0; --i) {\r\n      const source = metasets[i].$filler;\r\n\r\n      if (_shouldApplyFill(source)) {\r\n        _drawfill(chart.ctx, source, chart.chartArea);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDatasetDraw(chart, args, options) {\r\n    const source = args.meta.$filler;\r\n\r\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\r\n      return;\r\n    }\r\n\r\n    _drawfill(chart.ctx, source, chart.chartArea);\r\n  },\r\n\r\n  defaults: {\r\n    propagate: true,\r\n    drawTime: 'beforeDatasetDraw'\r\n  }\r\n};\r\n","import defaults from '../core/core.defaults.js';\r\nimport Element from '../core/core.element.js';\r\nimport layouts from '../core/core.layouts.js';\r\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\r\nimport {\r\n  _isBetween,\r\n  callback as call,\r\n  clipArea,\r\n  getRtlAdapter,\r\n  overrideTextDirection,\r\n  restoreTextDirection,\r\n  toFont,\r\n  toPadding,\r\n  unclipArea,\r\n  valueOrDefault,\r\n} from '../helpers/index.js';\r\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\r\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\n/**\r\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\r\n */\r\n\r\nconst getBoxSize = (labelOpts, fontSize) => {\r\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\r\n\r\n  if (labelOpts.usePointStyle) {\r\n    boxHeight = Math.min(boxHeight, fontSize);\r\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\r\n  }\r\n\r\n  return {\r\n    boxWidth,\r\n    boxHeight,\r\n    itemHeight: Math.max(fontSize, boxHeight)\r\n  };\r\n};\r\n\r\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\r\n\r\nexport class Legend extends Element {\r\n\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this._added = false;\r\n\r\n    // Contains hit boxes for each dataset (in dataset order)\r\n    this.legendHitBoxes = [];\r\n\r\n    /**\r\n \t\t * @private\r\n \t\t */\r\n    this._hoveredItem = null;\r\n\r\n    // Are we in doughnut mode which has a different data type\r\n    this.doughnutMode = false;\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this.legendItems = undefined;\r\n    this.columnSizes = undefined;\r\n    this.lineWidths = undefined;\r\n    this.maxHeight = undefined;\r\n    this.maxWidth = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this._margins = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight, margins) {\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this._margins = margins;\r\n\r\n    this.setDimensions();\r\n    this.buildLabels();\r\n    this.fit();\r\n  }\r\n\r\n  setDimensions() {\r\n    if (this.isHorizontal()) {\r\n      this.width = this.maxWidth;\r\n      this.left = this._margins.left;\r\n      this.right = this.width;\r\n    } else {\r\n      this.height = this.maxHeight;\r\n      this.top = this._margins.top;\r\n      this.bottom = this.height;\r\n    }\r\n  }\r\n\r\n  buildLabels() {\r\n    const labelOpts = this.options.labels || {};\r\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\r\n\r\n    if (labelOpts.filter) {\r\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\r\n    }\r\n\r\n    if (labelOpts.sort) {\r\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\r\n    }\r\n\r\n    if (this.options.reverse) {\r\n      legendItems.reverse();\r\n    }\r\n\r\n    this.legendItems = legendItems;\r\n  }\r\n\r\n  fit() {\r\n    const {options, ctx} = this;\r\n\r\n    // The legend may not be displayed for a variety of reasons including\r\n    // the fact that the defaults got set to `false`.\r\n    // When the legend is not displayed, there are no guarantees that the options\r\n    // are correctly formatted so we need to bail out as early as possible.\r\n    if (!options.display) {\r\n      this.width = this.height = 0;\r\n      return;\r\n    }\r\n\r\n    const labelOpts = options.labels;\r\n    const labelFont = toFont(labelOpts.font);\r\n    const fontSize = labelFont.size;\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    let width, height;\r\n\r\n    ctx.font = labelFont.string;\r\n\r\n    if (this.isHorizontal()) {\r\n      width = this.maxWidth; // fill all the width\r\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\r\n    } else {\r\n      height = this.maxHeight; // fill all the height\r\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\r\n    }\r\n\r\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\r\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\r\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\r\n    const lineWidths = this.lineWidths = [0];\r\n    const lineHeight = itemHeight + padding;\r\n    let totalHeight = titleHeight;\r\n\r\n    ctx.textAlign = 'left';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    let row = -1;\r\n    let top = -lineHeight;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\r\n\r\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\r\n        totalHeight += lineHeight;\r\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n        top += lineHeight;\r\n        row++;\r\n      }\r\n\r\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\r\n\r\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\r\n    });\r\n\r\n    return totalHeight;\r\n  }\r\n\r\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\r\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\r\n    const hitboxes = this.legendHitBoxes = [];\r\n    const columnSizes = this.columnSizes = [];\r\n    const heightLimit = maxHeight - titleHeight;\r\n\r\n    let totalWidth = padding;\r\n    let currentColWidth = 0;\r\n    let currentColHeight = 0;\r\n\r\n    let left = 0;\r\n    let col = 0;\r\n\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\r\n\r\n      // If too tall, go to new column\r\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\r\n        totalWidth += currentColWidth + padding;\r\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n        left += currentColWidth + padding;\r\n        col++;\r\n        currentColWidth = currentColHeight = 0;\r\n      }\r\n\r\n      // Store the hitbox width and height here. Final position will be updated in `draw`\r\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\r\n\r\n      // Get max width\r\n      currentColWidth = Math.max(currentColWidth, itemWidth);\r\n      currentColHeight += itemHeight + padding;\r\n    });\r\n\r\n    totalWidth += currentColWidth;\r\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\r\n\r\n    return totalWidth;\r\n  }\r\n\r\n  adjustHitBoxes() {\r\n    if (!this.options.display) {\r\n      return;\r\n    }\r\n    const titleHeight = this._computeTitleHeight();\r\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\r\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\r\n    if (this.isHorizontal()) {\r\n      let row = 0;\r\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n      for (const hitbox of hitboxes) {\r\n        if (row !== hitbox.row) {\r\n          row = hitbox.row;\r\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n        }\r\n        hitbox.top += this.top + titleHeight + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\r\n        left += hitbox.width + padding;\r\n      }\r\n    } else {\r\n      let col = 0;\r\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n      for (const hitbox of hitboxes) {\r\n        if (hitbox.col !== col) {\r\n          col = hitbox.col;\r\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n        }\r\n        hitbox.top = top;\r\n        hitbox.left += this.left + padding;\r\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\r\n        top += hitbox.height + padding;\r\n      }\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    return this.options.position === 'top' || this.options.position === 'bottom';\r\n  }\r\n\r\n  draw() {\r\n    if (this.options.display) {\r\n      const ctx = this.ctx;\r\n      clipArea(ctx, this);\r\n\r\n      this._draw();\r\n\r\n      unclipArea(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _draw() {\r\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\r\n    const {align, labels: labelOpts} = opts;\r\n    const defaultColor = defaults.color;\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const labelFont = toFont(labelOpts.font);\r\n    const {padding} = labelOpts;\r\n    const fontSize = labelFont.size;\r\n    const halfFontSize = fontSize / 2;\r\n    let cursor;\r\n\r\n    this.drawTitle();\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign('left');\r\n    ctx.textBaseline = 'middle';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.font = labelFont.string;\r\n\r\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\r\n\r\n    // current position\r\n    const drawLegendBox = function(x, y, legendItem) {\r\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\r\n        return;\r\n      }\r\n\r\n      // Set the ctx for the box\r\n      ctx.save();\r\n\r\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\r\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\r\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\r\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\r\n      ctx.lineWidth = lineWidth;\r\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n\r\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\r\n\r\n      if (labelOpts.usePointStyle) {\r\n        // Recalculate x and y for drawPoint() because its expecting\r\n        // x and y to be center of figure (instead of top left)\r\n        const drawOptions = {\r\n          radius: boxHeight * Math.SQRT2 / 2,\r\n          pointStyle: legendItem.pointStyle,\r\n          rotation: legendItem.rotation,\r\n          borderWidth: lineWidth\r\n        };\r\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\r\n        const centerY = y + halfFontSize;\r\n\r\n        // Draw pointStyle as legend symbol\r\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\r\n      } else {\r\n        // Draw box as legend symbol\r\n        // Adjust position when boxHeight < fontSize (want it centered)\r\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\r\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\r\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\r\n\r\n        ctx.beginPath();\r\n\r\n        if (Object.values(borderRadius).some(v => v !== 0)) {\r\n          addRoundedRectPath(ctx, {\r\n            x: xBoxLeft,\r\n            y: yBoxTop,\r\n            w: boxWidth,\r\n            h: boxHeight,\r\n            radius: borderRadius,\r\n          });\r\n        } else {\r\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\r\n        }\r\n\r\n        ctx.fill();\r\n        if (lineWidth !== 0) {\r\n          ctx.stroke();\r\n        }\r\n      }\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n    const fillText = function(x, y, legendItem) {\r\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\r\n        strikethrough: legendItem.hidden,\r\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\r\n      });\r\n    };\r\n\r\n    // Horizontal\r\n    const isHorizontal = this.isHorizontal();\r\n    const titleHeight = this._computeTitleHeight();\r\n    if (isHorizontal) {\r\n      cursor = {\r\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\r\n        y: this.top + padding + titleHeight,\r\n        line: 0\r\n      };\r\n    } else {\r\n      cursor = {\r\n        x: this.left + padding,\r\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\r\n        line: 0\r\n      };\r\n    }\r\n\r\n    overrideTextDirection(this.ctx, opts.textDirection);\r\n\r\n    const lineHeight = itemHeight + padding;\r\n    this.legendItems.forEach((legendItem, i) => {\r\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\r\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\r\n\r\n      const textWidth = ctx.measureText(legendItem.text).width;\r\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\r\n      const width = boxWidth + halfFontSize + textWidth;\r\n      let x = cursor.x;\r\n      let y = cursor.y;\r\n\r\n      rtlHelper.setWidth(this.width);\r\n\r\n      if (isHorizontal) {\r\n        if (i > 0 && x + width + padding > this.right) {\r\n          y = cursor.y += lineHeight;\r\n          cursor.line++;\r\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\r\n        }\r\n      } else if (i > 0 && y + lineHeight > this.bottom) {\r\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\r\n        cursor.line++;\r\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\r\n      }\r\n\r\n      const realX = rtlHelper.x(x);\r\n\r\n      drawLegendBox(realX, y, legendItem);\r\n\r\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\r\n\r\n      // Fill the actual label\r\n      fillText(rtlHelper.x(x), y, legendItem);\r\n\r\n      if (isHorizontal) {\r\n        cursor.x += width + padding;\r\n      } else if (typeof legendItem.text !== 'string') {\r\n        const fontLineHeight = labelFont.lineHeight;\r\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\r\n      } else {\r\n        cursor.y += lineHeight;\r\n      }\r\n    });\r\n\r\n    restoreTextDirection(this.ctx, opts.textDirection);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {\r\n    const opts = this.options;\r\n    const titleOpts = opts.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n\r\n    if (!titleOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n    const ctx = this.ctx;\r\n    const position = titleOpts.position;\r\n    const halfFontSize = titleFont.size / 2;\r\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\r\n    let y;\r\n\r\n    // These defaults are used when the legend is vertical.\r\n    // When horizontal, they are computed below.\r\n    let left = this.left;\r\n    let maxWidth = this.width;\r\n\r\n    if (this.isHorizontal()) {\r\n      // Move left / right so that the title is above the legend lines\r\n      maxWidth = Math.max(...this.lineWidths);\r\n      y = this.top + topPaddingPlusHalfFontSize;\r\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\r\n    } else {\r\n      // Move down so that the title is above the legend stack in every alignment\r\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\r\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\r\n    }\r\n\r\n    // Now that we know the left edge of the inner legend box, compute the correct\r\n    // X coordinate from the title alignment\r\n    const x = _alignStartEnd(position, left, left + maxWidth);\r\n\r\n    // Canvas setup\r\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeStyle = titleOpts.color;\r\n    ctx.fillStyle = titleOpts.color;\r\n    ctx.font = titleFont.string;\r\n\r\n    renderText(ctx, titleOpts.text, x, y, titleFont);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _computeTitleHeight() {\r\n    const titleOpts = this.options.title;\r\n    const titleFont = toFont(titleOpts.font);\r\n    const titlePadding = toPadding(titleOpts.padding);\r\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLegendItemAt(x, y) {\r\n    let i, hitBox, lh;\r\n\r\n    if (_isBetween(x, this.left, this.right)\r\n      && _isBetween(y, this.top, this.bottom)) {\r\n      // See if we are touching one of the dataset boxes\r\n      lh = this.legendHitBoxes;\r\n      for (i = 0; i < lh.length; ++i) {\r\n        hitBox = lh[i];\r\n\r\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\r\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\r\n          // Touching an element\r\n          return this.legendItems[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t */\r\n  handleEvent(e) {\r\n    const opts = this.options;\r\n    if (!isListened(e.type, opts)) {\r\n      return;\r\n    }\r\n\r\n    // Chart event already has relative position in it\r\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\r\n\r\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\r\n      const previous = this._hoveredItem;\r\n      const sameItem = itemsEqual(previous, hoveredItem);\r\n      if (previous && !sameItem) {\r\n        call(opts.onLeave, [e, previous, this], this);\r\n      }\r\n\r\n      this._hoveredItem = hoveredItem;\r\n\r\n      if (hoveredItem && !sameItem) {\r\n        call(opts.onHover, [e, hoveredItem, this], this);\r\n      }\r\n    } else if (hoveredItem) {\r\n      call(opts.onClick, [e, hoveredItem, this], this);\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\r\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\r\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\r\n  return {itemWidth, itemHeight};\r\n}\r\n\r\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\r\n  let legendItemText = legendItem.text;\r\n  if (legendItemText && typeof legendItemText !== 'string') {\r\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\r\n  }\r\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\r\n}\r\n\r\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\r\n  let itemHeight = _itemHeight;\r\n  if (typeof legendItem.text !== 'string') {\r\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\r\n  }\r\n  return itemHeight;\r\n}\r\n\r\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\r\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\r\n  return fontLineHeight * labelHeight;\r\n}\r\n\r\nfunction isListened(type, opts) {\r\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\r\n    return true;\r\n  }\r\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  id: 'legend',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Legend,\r\n\r\n  start(chart, _args, options) {\r\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\r\n    layouts.configure(chart, legend, options);\r\n    layouts.addBox(chart, legend);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, chart.legend);\r\n    delete chart.legend;\r\n  },\r\n\r\n  // During the beforeUpdate step, the layout configuration needs to run\r\n  // This ensures that if the legend position changes (via an option update)\r\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\r\n  beforeUpdate(chart, _args, options) {\r\n    const legend = chart.legend;\r\n    layouts.configure(chart, legend, options);\r\n    legend.options = options;\r\n  },\r\n\r\n  // The labels need to be built after datasets are updated to ensure that colors\r\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\r\n  afterUpdate(chart) {\r\n    const legend = chart.legend;\r\n    legend.buildLabels();\r\n    legend.adjustHitBoxes();\r\n  },\r\n\r\n\r\n  afterEvent(chart, args) {\r\n    if (!args.replay) {\r\n      chart.legend.handleEvent(args.event);\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    display: true,\r\n    position: 'top',\r\n    align: 'center',\r\n    fullSize: true,\r\n    reverse: false,\r\n    weight: 1000,\r\n\r\n    // a callback that will handle\r\n    onClick(e, legendItem, legend) {\r\n      const index = legendItem.datasetIndex;\r\n      const ci = legend.chart;\r\n      if (ci.isDatasetVisible(index)) {\r\n        ci.hide(index);\r\n        legendItem.hidden = true;\r\n      } else {\r\n        ci.show(index);\r\n        legendItem.hidden = false;\r\n      }\r\n    },\r\n\r\n    onHover: null,\r\n    onLeave: null,\r\n\r\n    labels: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      boxWidth: 40,\r\n      padding: 10,\r\n      // Generates labels shown in the legend\r\n      // Valid properties to return:\r\n      // text : text to display\r\n      // fillStyle : fill of coloured box\r\n      // strokeStyle: stroke of coloured box\r\n      // hidden : if this legend item refers to a hidden item\r\n      // lineCap : cap style for line\r\n      // lineDash\r\n      // lineDashOffset :\r\n      // lineJoin :\r\n      // lineWidth :\r\n      generateLabels(chart) {\r\n        const datasets = chart.data.datasets;\r\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\r\n\r\n        return chart._getSortedDatasetMetas().map((meta) => {\r\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\r\n          const borderWidth = toPadding(style.borderWidth);\r\n\r\n          return {\r\n            text: datasets[meta.index].label,\r\n            fillStyle: style.backgroundColor,\r\n            fontColor: color,\r\n            hidden: !meta.visible,\r\n            lineCap: style.borderCapStyle,\r\n            lineDash: style.borderDash,\r\n            lineDashOffset: style.borderDashOffset,\r\n            lineJoin: style.borderJoinStyle,\r\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\r\n            strokeStyle: style.borderColor,\r\n            pointStyle: pointStyle || style.pointStyle,\r\n            rotation: style.rotation,\r\n            textAlign: textAlign || style.textAlign,\r\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\r\n\r\n            // Below is extra data used for toggling the datasets\r\n            datasetIndex: meta.index\r\n          };\r\n        }, this);\r\n      }\r\n    },\r\n\r\n    title: {\r\n      color: (ctx) => ctx.chart.options.color,\r\n      display: false,\r\n      position: 'center',\r\n      text: '',\r\n    }\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => !name.startsWith('on'),\r\n    labels: {\r\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\r\n    }\r\n  },\r\n};\r\n","import Element from '../core/core.element.js';\r\nimport layouts from '../core/core.layouts.js';\r\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\r\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\r\nimport {renderText} from '../helpers/helpers.canvas.js';\r\n\r\nexport class Title extends Element {\r\n  /**\r\n\t * @param {{ ctx: any; options: any; chart: any; }} config\r\n\t */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.ctx = config.ctx;\r\n    this._padding = undefined;\r\n    this.top = undefined;\r\n    this.bottom = undefined;\r\n    this.left = undefined;\r\n    this.right = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n    this.position = undefined;\r\n    this.weight = undefined;\r\n    this.fullSize = undefined;\r\n  }\r\n\r\n  update(maxWidth, maxHeight) {\r\n    const opts = this.options;\r\n\r\n    this.left = 0;\r\n    this.top = 0;\r\n\r\n    if (!opts.display) {\r\n      this.width = this.height = this.right = this.bottom = 0;\r\n      return;\r\n    }\r\n\r\n    this.width = this.right = maxWidth;\r\n    this.height = this.bottom = maxHeight;\r\n\r\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\r\n    this._padding = toPadding(opts.padding);\r\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\r\n\r\n    if (this.isHorizontal()) {\r\n      this.height = textSize;\r\n    } else {\r\n      this.width = textSize;\r\n    }\r\n  }\r\n\r\n  isHorizontal() {\r\n    const pos = this.options.position;\r\n    return pos === 'top' || pos === 'bottom';\r\n  }\r\n\r\n  _drawArgs(offset) {\r\n    const {top, left, bottom, right, options} = this;\r\n    const align = options.align;\r\n    let rotation = 0;\r\n    let maxWidth, titleX, titleY;\r\n\r\n    if (this.isHorizontal()) {\r\n      titleX = _alignStartEnd(align, left, right);\r\n      titleY = top + offset;\r\n      maxWidth = right - left;\r\n    } else {\r\n      if (options.position === 'left') {\r\n        titleX = left + offset;\r\n        titleY = _alignStartEnd(align, bottom, top);\r\n        rotation = PI * -0.5;\r\n      } else {\r\n        titleX = right - offset;\r\n        titleY = _alignStartEnd(align, top, bottom);\r\n        rotation = PI * 0.5;\r\n      }\r\n      maxWidth = bottom - top;\r\n    }\r\n    return {titleX, titleY, maxWidth, rotation};\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n\r\n    if (!opts.display) {\r\n      return;\r\n    }\r\n\r\n    const fontOpts = toFont(opts.font);\r\n    const lineHeight = fontOpts.lineHeight;\r\n    const offset = lineHeight / 2 + this._padding.top;\r\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\r\n\r\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\r\n      color: opts.color,\r\n      maxWidth,\r\n      rotation,\r\n      textAlign: _toLeftRightCenter(opts.align),\r\n      textBaseline: 'middle',\r\n      translation: [titleX, titleY],\r\n    });\r\n  }\r\n}\r\n\r\nfunction createTitle(chart, titleOpts) {\r\n  const title = new Title({\r\n    ctx: chart.ctx,\r\n    options: titleOpts,\r\n    chart\r\n  });\r\n\r\n  layouts.configure(chart, title, titleOpts);\r\n  layouts.addBox(chart, title);\r\n  chart.titleBlock = title;\r\n}\r\n\r\nexport default {\r\n  id: 'title',\r\n\r\n  /**\r\n\t * For tests\r\n\t * @private\r\n\t */\r\n  _element: Title,\r\n\r\n  start(chart, _args, options) {\r\n    createTitle(chart, options);\r\n  },\r\n\r\n  stop(chart) {\r\n    const titleBlock = chart.titleBlock;\r\n    layouts.removeBox(chart, titleBlock);\r\n    delete chart.titleBlock;\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = chart.titleBlock;\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'bold',\r\n    },\r\n    fullSize: true,\r\n    padding: 10,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 2000         // by default greater than legend (1000) to be above\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import {Title} from './plugin.title.js';\r\nimport layouts from '../core/core.layouts.js';\r\n\r\nconst map = new WeakMap();\r\n\r\nexport default {\r\n  id: 'subtitle',\r\n\r\n  start(chart, _args, options) {\r\n    const title = new Title({\r\n      ctx: chart.ctx,\r\n      options,\r\n      chart\r\n    });\r\n\r\n    layouts.configure(chart, title, options);\r\n    layouts.addBox(chart, title);\r\n    map.set(chart, title);\r\n  },\r\n\r\n  stop(chart) {\r\n    layouts.removeBox(chart, map.get(chart));\r\n    map.delete(chart);\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    const title = map.get(chart);\r\n    layouts.configure(chart, title, options);\r\n    title.options = options;\r\n  },\r\n\r\n  defaults: {\r\n    align: 'center',\r\n    display: false,\r\n    font: {\r\n      weight: 'normal',\r\n    },\r\n    fullSize: true,\r\n    padding: 0,\r\n    position: 'top',\r\n    text: '',\r\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\r\n  },\r\n\r\n  defaultRoutes: {\r\n    color: 'color'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: true,\r\n    _indexable: false,\r\n  },\r\n};\r\n","import Animations from '../core/core.animations.js';\r\nimport Element from '../core/core.element.js';\r\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\r\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\r\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\r\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\r\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\r\nimport {createContext, drawPoint} from '../helpers/index.js';\r\n\r\n/**\r\n * @typedef { import('../platform/platform.base.js').Chart } Chart\r\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\r\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\r\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\r\n */\r\n\r\nconst positioners = {\r\n  /**\r\n\t * Average mode places the tooltip at the average position of the elements shown\r\n\t */\r\n  average(items) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let i, len;\r\n    let x = 0;\r\n    let y = 0;\r\n    let count = 0;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const pos = el.tooltipPosition();\r\n        x += pos.x;\r\n        y += pos.y;\r\n        ++count;\r\n      }\r\n    }\r\n\r\n    return {\r\n      x: x / count,\r\n      y: y / count\r\n    };\r\n  },\r\n\r\n  /**\r\n\t * Gets the tooltip position nearest of the item nearest to the event position\r\n\t */\r\n  nearest(items, eventPosition) {\r\n    if (!items.length) {\r\n      return false;\r\n    }\r\n\r\n    let x = eventPosition.x;\r\n    let y = eventPosition.y;\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    let i, len, nearestElement;\r\n\r\n    for (i = 0, len = items.length; i < len; ++i) {\r\n      const el = items[i].element;\r\n      if (el && el.hasValue()) {\r\n        const center = el.getCenterPoint();\r\n        const d = distanceBetweenPoints(eventPosition, center);\r\n\r\n        if (d < minDistance) {\r\n          minDistance = d;\r\n          nearestElement = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nearestElement) {\r\n      const tp = nearestElement.tooltipPosition();\r\n      x = tp.x;\r\n      y = tp.y;\r\n    }\r\n\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  }\r\n};\r\n\r\n// Helper to push or concat based on if the 2nd parameter is an array or not\r\nfunction pushOrConcat(base, toPush) {\r\n  if (toPush) {\r\n    if (isArray(toPush)) {\r\n      // base = base.concat(toPush);\r\n      Array.prototype.push.apply(base, toPush);\r\n    } else {\r\n      base.push(toPush);\r\n    }\r\n  }\r\n\r\n  return base;\r\n}\r\n\r\n/**\r\n * Returns array of strings split by newline\r\n * @param {*} str - The value to split by newline.\r\n * @returns {string|string[]} value if newline present - Returned from String split() method\r\n * @function\r\n */\r\nfunction splitNewlines(str) {\r\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\r\n    return str.split('\\n');\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Private helper to create a tooltip item model\r\n * @param {Chart} chart\r\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\r\n * @return new tooltip item\r\n */\r\nfunction createTooltipItem(chart, item) {\r\n  const {element, datasetIndex, index} = item;\r\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n  const {label, value} = controller.getLabelAndValue(index);\r\n\r\n  return {\r\n    chart,\r\n    label,\r\n    parsed: controller.getParsed(index),\r\n    raw: chart.data.datasets[datasetIndex].data[index],\r\n    formattedValue: value,\r\n    dataset: controller.getDataset(),\r\n    dataIndex: index,\r\n    datasetIndex,\r\n    element\r\n  };\r\n}\r\n\r\n/**\r\n * Get the size of the tooltip\r\n */\r\nfunction getTooltipSize(tooltip, options) {\r\n  const ctx = tooltip.chart.ctx;\r\n  const {body, footer, title} = tooltip;\r\n  const {boxWidth, boxHeight} = options;\r\n  const bodyFont = toFont(options.bodyFont);\r\n  const titleFont = toFont(options.titleFont);\r\n  const footerFont = toFont(options.footerFont);\r\n  const titleLineCount = title.length;\r\n  const footerLineCount = footer.length;\r\n  const bodyLineItemCount = body.length;\r\n\r\n  const padding = toPadding(options.padding);\r\n  let height = padding.height;\r\n  let width = 0;\r\n\r\n  // Count of all lines in the body\r\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\r\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\r\n\r\n  if (titleLineCount) {\r\n    height += titleLineCount * titleFont.lineHeight\r\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\r\n\t\t\t+ options.titleMarginBottom;\r\n  }\r\n  if (combinedBodyLength) {\r\n    // Body lines may include some extra height depending on boxHeight\r\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\r\n    height += bodyLineItemCount * bodyLineHeight\r\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\r\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\r\n  }\r\n  if (footerLineCount) {\r\n    height += options.footerMarginTop\r\n\t\t\t+ footerLineCount * footerFont.lineHeight\r\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\r\n  }\r\n\r\n  // Title width\r\n  let widthPadding = 0;\r\n  const maxLineWidth = function(line) {\r\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\r\n  };\r\n\r\n  ctx.save();\r\n\r\n  ctx.font = titleFont.string;\r\n  each(tooltip.title, maxLineWidth);\r\n\r\n  // Body width\r\n  ctx.font = bodyFont.string;\r\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\r\n\r\n  // Body lines may include some extra width due to the color box\r\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\r\n  each(body, (bodyItem) => {\r\n    each(bodyItem.before, maxLineWidth);\r\n    each(bodyItem.lines, maxLineWidth);\r\n    each(bodyItem.after, maxLineWidth);\r\n  });\r\n\r\n  // Reset back to 0\r\n  widthPadding = 0;\r\n\r\n  // Footer width\r\n  ctx.font = footerFont.string;\r\n  each(tooltip.footer, maxLineWidth);\r\n\r\n  ctx.restore();\r\n\r\n  // Add padding\r\n  width += padding.width;\r\n\r\n  return {width, height};\r\n}\r\n\r\nfunction determineYAlign(chart, size) {\r\n  const {y, height} = size;\r\n\r\n  if (y < height / 2) {\r\n    return 'top';\r\n  } else if (y > (chart.height - height / 2)) {\r\n    return 'bottom';\r\n  }\r\n  return 'center';\r\n}\r\n\r\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\r\n  const {x, width} = size;\r\n  const caret = options.caretSize + options.caretPadding;\r\n  if (xAlign === 'left' && x + width + caret > chart.width) {\r\n    return true;\r\n  }\r\n\r\n  if (xAlign === 'right' && x - width - caret < 0) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction determineXAlign(chart, options, size, yAlign) {\r\n  const {x, width} = size;\r\n  const {width: chartWidth, chartArea: {left, right}} = chart;\r\n  let xAlign = 'center';\r\n\r\n  if (yAlign === 'center') {\r\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\r\n  } else if (x <= width / 2) {\r\n    xAlign = 'left';\r\n  } else if (x >= chartWidth - width / 2) {\r\n    xAlign = 'right';\r\n  }\r\n\r\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\r\n    xAlign = 'center';\r\n  }\r\n\r\n  return xAlign;\r\n}\r\n\r\n/**\r\n * Helper to get the alignment of a tooltip given the size\r\n */\r\nfunction determineAlignment(chart, options, size) {\r\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\r\n\r\n  return {\r\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\r\n    yAlign\r\n  };\r\n}\r\n\r\nfunction alignX(size, xAlign) {\r\n  let {x, width} = size;\r\n  if (xAlign === 'right') {\r\n    x -= width;\r\n  } else if (xAlign === 'center') {\r\n    x -= (width / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction alignY(size, yAlign, paddingAndSize) {\r\n  // eslint-disable-next-line prefer-const\r\n  let {y, height} = size;\r\n  if (yAlign === 'top') {\r\n    y += paddingAndSize;\r\n  } else if (yAlign === 'bottom') {\r\n    y -= height + paddingAndSize;\r\n  } else {\r\n    y -= (height / 2);\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\r\n */\r\nfunction getBackgroundPoint(options, size, alignment, chart) {\r\n  const {caretSize, caretPadding, cornerRadius} = options;\r\n  const {xAlign, yAlign} = alignment;\r\n  const paddingAndSize = caretSize + caretPadding;\r\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n\r\n  let x = alignX(size, xAlign);\r\n  const y = alignY(size, yAlign, paddingAndSize);\r\n\r\n  if (yAlign === 'center') {\r\n    if (xAlign === 'left') {\r\n      x += paddingAndSize;\r\n    } else if (xAlign === 'right') {\r\n      x -= paddingAndSize;\r\n    }\r\n  } else if (xAlign === 'left') {\r\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\r\n  } else if (xAlign === 'right') {\r\n    x += Math.max(topRight, bottomRight) + caretSize;\r\n  }\r\n\r\n  return {\r\n    x: _limitValue(x, 0, chart.width - size.width),\r\n    y: _limitValue(y, 0, chart.height - size.height)\r\n  };\r\n}\r\n\r\nfunction getAlignedX(tooltip, align, options) {\r\n  const padding = toPadding(options.padding);\r\n\r\n  return align === 'center'\r\n    ? tooltip.x + tooltip.width / 2\r\n    : align === 'right'\r\n      ? tooltip.x + tooltip.width - padding.right\r\n      : tooltip.x + padding.left;\r\n}\r\n\r\n/**\r\n * Helper to build before and after body lines\r\n */\r\nfunction getBeforeAfterBodyLines(callback) {\r\n  return pushOrConcat([], splitNewlines(callback));\r\n}\r\n\r\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\r\n  return createContext(parent, {\r\n    tooltip,\r\n    tooltipItems,\r\n    type: 'tooltip'\r\n  });\r\n}\r\n\r\nfunction overrideCallbacks(callbacks, context) {\r\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\r\n  return override ? callbacks.override(override) : callbacks;\r\n}\r\n\r\nconst defaultCallbacks = {\r\n  // Args are: (tooltipItems, data)\r\n  beforeTitle: noop,\r\n  title(tooltipItems) {\r\n    if (tooltipItems.length > 0) {\r\n      const item = tooltipItems[0];\r\n      const labels = item.chart.data.labels;\r\n      const labelCount = labels ? labels.length : 0;\r\n\r\n      if (this && this.options && this.options.mode === 'dataset') {\r\n        return item.dataset.label || '';\r\n      } else if (item.label) {\r\n        return item.label;\r\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\r\n        return labels[item.dataIndex];\r\n      }\r\n    }\r\n\r\n    return '';\r\n  },\r\n  afterTitle: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeBody: noop,\r\n\r\n  // Args are: (tooltipItem, data)\r\n  beforeLabel: noop,\r\n  label(tooltipItem) {\r\n    if (this && this.options && this.options.mode === 'dataset') {\r\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\r\n    }\r\n\r\n    let label = tooltipItem.dataset.label || '';\r\n\r\n    if (label) {\r\n      label += ': ';\r\n    }\r\n    const value = tooltipItem.formattedValue;\r\n    if (!isNullOrUndef(value)) {\r\n      label += value;\r\n    }\r\n    return label;\r\n  },\r\n  labelColor(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      borderColor: options.borderColor,\r\n      backgroundColor: options.backgroundColor,\r\n      borderWidth: options.borderWidth,\r\n      borderDash: options.borderDash,\r\n      borderDashOffset: options.borderDashOffset,\r\n      borderRadius: 0,\r\n    };\r\n  },\r\n  labelTextColor() {\r\n    return this.options.bodyColor;\r\n  },\r\n  labelPointStyle(tooltipItem) {\r\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n    return {\r\n      pointStyle: options.pointStyle,\r\n      rotation: options.rotation,\r\n    };\r\n  },\r\n  afterLabel: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  afterBody: noop,\r\n\r\n  // Args are: (tooltipItems, data)\r\n  beforeFooter: noop,\r\n  footer: noop,\r\n  afterFooter: noop\r\n};\r\n\r\n/**\r\n * Invoke callback from object with context and arguments.\r\n * If callback returns `undefined`, then will be invoked default callback.\r\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\r\n * @param {keyof typeof defaultCallbacks} name\r\n * @param {*} ctx\r\n * @param {*} arg\r\n * @returns {any}\r\n */\r\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\r\n  const result = callbacks[name].call(ctx, arg);\r\n\r\n  if (typeof result === 'undefined') {\r\n    return defaultCallbacks[name].call(ctx, arg);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport class Tooltip extends Element {\r\n\r\n  /**\r\n   * @namespace Chart.Tooltip.positioners\r\n   */\r\n  static positioners = positioners;\r\n\r\n  constructor(config) {\r\n    super();\r\n\r\n    this.opacity = 0;\r\n    this._active = [];\r\n    this._eventPosition = undefined;\r\n    this._size = undefined;\r\n    this._cachedAnimations = undefined;\r\n    this._tooltipItems = [];\r\n    this.$animations = undefined;\r\n    this.$context = undefined;\r\n    this.chart = config.chart;\r\n    this.options = config.options;\r\n    this.dataPoints = undefined;\r\n    this.title = undefined;\r\n    this.beforeBody = undefined;\r\n    this.body = undefined;\r\n    this.afterBody = undefined;\r\n    this.footer = undefined;\r\n    this.xAlign = undefined;\r\n    this.yAlign = undefined;\r\n    this.x = undefined;\r\n    this.y = undefined;\r\n    this.height = undefined;\r\n    this.width = undefined;\r\n    this.caretX = undefined;\r\n    this.caretY = undefined;\r\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\r\n    // and `labelTextColors` to create a single variable\r\n    this.labelColors = undefined;\r\n    this.labelPointStyles = undefined;\r\n    this.labelTextColors = undefined;\r\n  }\r\n\r\n  initialize(options) {\r\n    this.options = options;\r\n    this._cachedAnimations = undefined;\r\n    this.$context = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _resolveAnimations() {\r\n    const cached = this._cachedAnimations;\r\n\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    const chart = this.chart;\r\n    const options = this.options.setContext(this.getContext());\r\n    const opts = options.enabled && chart.options.animation && options.animations;\r\n    const animations = new Animations(this.chart, opts);\r\n    if (opts._cacheable) {\r\n      this._cachedAnimations = Object.freeze(animations);\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getContext() {\r\n    return this.$context ||\r\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\r\n  }\r\n\r\n  getTitle(context, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\r\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\r\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\r\n    lines = pushOrConcat(lines, splitNewlines(title));\r\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\r\n\r\n    return lines;\r\n  }\r\n\r\n  getBeforeBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  getBody(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n    const bodyItems = [];\r\n\r\n    each(tooltipItems, (context) => {\r\n      const bodyItem = {\r\n        before: [],\r\n        lines: [],\r\n        after: []\r\n      };\r\n      const scoped = overrideCallbacks(callbacks, context);\r\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\r\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\r\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\r\n\r\n      bodyItems.push(bodyItem);\r\n    });\r\n\r\n    return bodyItems;\r\n  }\r\n\r\n  getAfterBody(tooltipItems, options) {\r\n    return getBeforeAfterBodyLines(\r\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\r\n    );\r\n  }\r\n\r\n  // Get the footer and beforeFooter and afterFooter lines\r\n  getFooter(tooltipItems, options) {\r\n    const {callbacks} = options;\r\n\r\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\r\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\r\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\r\n\r\n    let lines = [];\r\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\r\n    lines = pushOrConcat(lines, splitNewlines(footer));\r\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\r\n\r\n    return lines;\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _createItems(options) {\r\n    const active = this._active;\r\n    const data = this.chart.data;\r\n    const labelColors = [];\r\n    const labelPointStyles = [];\r\n    const labelTextColors = [];\r\n    let tooltipItems = [];\r\n    let i, len;\r\n\r\n    for (i = 0, len = active.length; i < len; ++i) {\r\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\r\n    }\r\n\r\n    // If the user provided a filter function, use it to modify the tooltip items\r\n    if (options.filter) {\r\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\r\n    }\r\n\r\n    // If the user provided a sorting function, use it to modify the tooltip items\r\n    if (options.itemSort) {\r\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\r\n    }\r\n\r\n    // Determine colors for boxes\r\n    each(tooltipItems, (context) => {\r\n      const scoped = overrideCallbacks(options.callbacks, context);\r\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\r\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\r\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\r\n    });\r\n\r\n    this.labelColors = labelColors;\r\n    this.labelPointStyles = labelPointStyles;\r\n    this.labelTextColors = labelTextColors;\r\n    this.dataPoints = tooltipItems;\r\n    return tooltipItems;\r\n  }\r\n\r\n  update(changed, replay) {\r\n    const options = this.options.setContext(this.getContext());\r\n    const active = this._active;\r\n    let properties;\r\n    let tooltipItems = [];\r\n\r\n    if (!active.length) {\r\n      if (this.opacity !== 0) {\r\n        properties = {\r\n          opacity: 0\r\n        };\r\n      }\r\n    } else {\r\n      const position = positioners[options.position].call(this, active, this._eventPosition);\r\n      tooltipItems = this._createItems(options);\r\n\r\n      this.title = this.getTitle(tooltipItems, options);\r\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\r\n      this.body = this.getBody(tooltipItems, options);\r\n      this.afterBody = this.getAfterBody(tooltipItems, options);\r\n      this.footer = this.getFooter(tooltipItems, options);\r\n\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, size);\r\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\r\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\r\n\r\n      this.xAlign = alignment.xAlign;\r\n      this.yAlign = alignment.yAlign;\r\n\r\n      properties = {\r\n        opacity: 1,\r\n        x: backgroundPoint.x,\r\n        y: backgroundPoint.y,\r\n        width: size.width,\r\n        height: size.height,\r\n        caretX: position.x,\r\n        caretY: position.y\r\n      };\r\n    }\r\n\r\n    this._tooltipItems = tooltipItems;\r\n    this.$context = undefined;\r\n\r\n    if (properties) {\r\n      this._resolveAnimations().update(this, properties);\r\n    }\r\n\r\n    if (changed && options.external) {\r\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\r\n    }\r\n  }\r\n\r\n  drawCaret(tooltipPoint, ctx, size, options) {\r\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\r\n\r\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\r\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\r\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\r\n  }\r\n\r\n  getCaretPosition(tooltipPoint, size, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {caretSize, cornerRadius} = options;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\r\n    const {x: ptX, y: ptY} = tooltipPoint;\r\n    const {width, height} = size;\r\n    let x1, x2, x3, y1, y2, y3;\r\n\r\n    if (yAlign === 'center') {\r\n      y2 = ptY + (height / 2);\r\n\r\n      if (xAlign === 'left') {\r\n        x1 = ptX;\r\n        x2 = x1 - caretSize;\r\n\r\n        // Left draws bottom -> top, this y1 is on the bottom\r\n        y1 = y2 + caretSize;\r\n        y3 = y2 - caretSize;\r\n      } else {\r\n        x1 = ptX + width;\r\n        x2 = x1 + caretSize;\r\n\r\n        // Right draws top -> bottom, thus y1 is on the top\r\n        y1 = y2 - caretSize;\r\n        y3 = y2 + caretSize;\r\n      }\r\n\r\n      x3 = x1;\r\n    } else {\r\n      if (xAlign === 'left') {\r\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\r\n      } else if (xAlign === 'right') {\r\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\r\n      } else {\r\n        x2 = this.caretX;\r\n      }\r\n\r\n      if (yAlign === 'top') {\r\n        y1 = ptY;\r\n        y2 = y1 - caretSize;\r\n\r\n        // Top draws left -> right, thus x1 is on the left\r\n        x1 = x2 - caretSize;\r\n        x3 = x2 + caretSize;\r\n      } else {\r\n        y1 = ptY + height;\r\n        y2 = y1 + caretSize;\r\n\r\n        // Bottom draws right -> left, thus x1 is on the right\r\n        x1 = x2 + caretSize;\r\n        x3 = x2 - caretSize;\r\n      }\r\n      y3 = y1;\r\n    }\r\n    return {x1, x2, x3, y1, y2, y3};\r\n  }\r\n\r\n  drawTitle(pt, ctx, options) {\r\n    const title = this.title;\r\n    const length = title.length;\r\n    let titleFont, titleSpacing, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.titleAlign, options);\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      titleFont = toFont(options.titleFont);\r\n      titleSpacing = options.titleSpacing;\r\n\r\n      ctx.fillStyle = options.titleColor;\r\n      ctx.font = titleFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\r\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\r\n\r\n        if (i + 1 === length) {\r\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\r\n    const labelColor = this.labelColors[i];\r\n    const labelPointStyle = this.labelPointStyles[i];\r\n    const {boxHeight, boxWidth} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    const colorX = getAlignedX(this, 'left', options);\r\n    const rtlColorX = rtlHelper.x(colorX);\r\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\r\n    const colorY = pt.y + yOffSet;\r\n\r\n    if (options.usePointStyle) {\r\n      const drawOptions = {\r\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\r\n        pointStyle: labelPointStyle.pointStyle,\r\n        rotation: labelPointStyle.rotation,\r\n        borderWidth: 1\r\n      };\r\n      // Recalculate x and y for drawPoint() because its expecting\r\n      // x and y to be center of figure (instead of top left)\r\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\r\n      const centerY = colorY + boxHeight / 2;\r\n\r\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\r\n      ctx.strokeStyle = options.multiKeyBackground;\r\n      ctx.fillStyle = options.multiKeyBackground;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n\r\n      // Draw the point\r\n      ctx.strokeStyle = labelColor.borderColor;\r\n      ctx.fillStyle = labelColor.backgroundColor;\r\n      drawPoint(ctx, drawOptions, centerX, centerY);\r\n    } else {\r\n      // Border\r\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\r\n      ctx.strokeStyle = labelColor.borderColor;\r\n      ctx.setLineDash(labelColor.borderDash || []);\r\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\r\n\r\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\r\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\r\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\r\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\r\n\r\n      if (Object.values(borderRadius).some(v => v !== 0)) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        addRoundedRectPath(ctx, {\r\n          x: outerX,\r\n          y: colorY,\r\n          w: boxWidth,\r\n          h: boxHeight,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        // Inner square\r\n        ctx.fillStyle = labelColor.backgroundColor;\r\n        ctx.beginPath();\r\n        addRoundedRectPath(ctx, {\r\n          x: innerX,\r\n          y: colorY + 1,\r\n          w: boxWidth - 2,\r\n          h: boxHeight - 2,\r\n          radius: borderRadius,\r\n        });\r\n        ctx.fill();\r\n      } else {\r\n        // Normal rect\r\n        ctx.fillStyle = options.multiKeyBackground;\r\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\r\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\r\n        // Inner square\r\n        ctx.fillStyle = labelColor.backgroundColor;\r\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\r\n      }\r\n    }\r\n\r\n    // restore fillStyle\r\n    ctx.fillStyle = this.labelTextColors[i];\r\n  }\r\n\r\n  drawBody(pt, ctx, options) {\r\n    const {body} = this;\r\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    let bodyLineHeight = bodyFont.lineHeight;\r\n    let xLinePadding = 0;\r\n\r\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n    const fillLineOfText = function(line) {\r\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\r\n      pt.y += bodyLineHeight + bodySpacing;\r\n    };\r\n\r\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\r\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\r\n\r\n    ctx.textAlign = bodyAlign;\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = bodyFont.string;\r\n\r\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\r\n\r\n    // Before body lines\r\n    ctx.fillStyle = options.bodyColor;\r\n    each(this.beforeBody, fillLineOfText);\r\n\r\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\r\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\r\n      : 0;\r\n\r\n    // Draw body lines now\r\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\r\n      bodyItem = body[i];\r\n      textColor = this.labelTextColors[i];\r\n\r\n      ctx.fillStyle = textColor;\r\n      each(bodyItem.before, fillLineOfText);\r\n\r\n      lines = bodyItem.lines;\r\n      // Draw Legend-like boxes if needed\r\n      if (displayColors && lines.length) {\r\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\r\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\r\n      }\r\n\r\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\r\n        fillLineOfText(lines[j]);\r\n        // Reset for any lines that don't include colorbox\r\n        bodyLineHeight = bodyFont.lineHeight;\r\n      }\r\n\r\n      each(bodyItem.after, fillLineOfText);\r\n    }\r\n\r\n    // Reset back to 0 for after body\r\n    xLinePadding = 0;\r\n    bodyLineHeight = bodyFont.lineHeight;\r\n\r\n    // After body lines\r\n    each(this.afterBody, fillLineOfText);\r\n    pt.y -= bodySpacing; // Remove last body spacing\r\n  }\r\n\r\n  drawFooter(pt, ctx, options) {\r\n    const footer = this.footer;\r\n    const length = footer.length;\r\n    let footerFont, i;\r\n\r\n    if (length) {\r\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n\r\n      pt.x = getAlignedX(this, options.footerAlign, options);\r\n      pt.y += options.footerMarginTop;\r\n\r\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\r\n      ctx.textBaseline = 'middle';\r\n\r\n      footerFont = toFont(options.footerFont);\r\n\r\n      ctx.fillStyle = options.footerColor;\r\n      ctx.font = footerFont.string;\r\n\r\n      for (i = 0; i < length; ++i) {\r\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\r\n        pt.y += footerFont.lineHeight + options.footerSpacing;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawBackground(pt, ctx, tooltipSize, options) {\r\n    const {xAlign, yAlign} = this;\r\n    const {x, y} = pt;\r\n    const {width, height} = tooltipSize;\r\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\r\n\r\n    ctx.fillStyle = options.backgroundColor;\r\n    ctx.strokeStyle = options.borderColor;\r\n    ctx.lineWidth = options.borderWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + topLeft, y);\r\n    if (yAlign === 'top') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width - topRight, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\r\n    if (yAlign === 'center' && xAlign === 'right') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + width, y + height - bottomRight);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\r\n    if (yAlign === 'bottom') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x + bottomLeft, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\r\n    if (yAlign === 'center' && xAlign === 'left') {\r\n      this.drawCaret(pt, ctx, tooltipSize, options);\r\n    }\r\n    ctx.lineTo(x, y + topLeft);\r\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\r\n    ctx.closePath();\r\n\r\n    ctx.fill();\r\n\r\n    if (options.borderWidth > 0) {\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Update x/y animation targets when _active elements are animating too\r\n\t * @private\r\n\t */\r\n  _updateAnimationTarget(options) {\r\n    const chart = this.chart;\r\n    const anims = this.$animations;\r\n    const animX = anims && anims.x;\r\n    const animY = anims && anims.y;\r\n    if (animX || animY) {\r\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      const size = this._size = getTooltipSize(this, options);\r\n      const positionAndSize = Object.assign({}, position, this._size);\r\n      const alignment = determineAlignment(chart, options, positionAndSize);\r\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\r\n      if (animX._to !== point.x || animY._to !== point.y) {\r\n        this.xAlign = alignment.xAlign;\r\n        this.yAlign = alignment.yAlign;\r\n        this.width = size.width;\r\n        this.height = size.height;\r\n        this.caretX = position.x;\r\n        this.caretY = position.y;\r\n        this._resolveAnimations().update(this, point);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if the tooltip will draw anything\r\n   * @returns {boolean} True if the tooltip will render\r\n   */\r\n  _willRender() {\r\n    return !!this.opacity;\r\n  }\r\n\r\n  draw(ctx) {\r\n    const options = this.options.setContext(this.getContext());\r\n    let opacity = this.opacity;\r\n\r\n    if (!opacity) {\r\n      return;\r\n    }\r\n\r\n    this._updateAnimationTarget(options);\r\n\r\n    const tooltipSize = {\r\n      width: this.width,\r\n      height: this.height\r\n    };\r\n    const pt = {\r\n      x: this.x,\r\n      y: this.y\r\n    };\r\n\r\n    // IE11/Edge does not like very small opacities, so snap to 0\r\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\r\n\r\n    const padding = toPadding(options.padding);\r\n\r\n    // Truthy/falsey value for empty tooltip\r\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\r\n\r\n    if (options.enabled && hasTooltipContent) {\r\n      ctx.save();\r\n      ctx.globalAlpha = opacity;\r\n\r\n      // Draw Background\r\n      this.drawBackground(pt, ctx, tooltipSize, options);\r\n\r\n      overrideTextDirection(ctx, options.textDirection);\r\n\r\n      pt.y += padding.top;\r\n\r\n      // Titles\r\n      this.drawTitle(pt, ctx, options);\r\n\r\n      // Body\r\n      this.drawBody(pt, ctx, options);\r\n\r\n      // Footer\r\n      this.drawFooter(pt, ctx, options);\r\n\r\n      restoreTextDirection(ctx, options.textDirection);\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Get active elements in the tooltip\r\n\t * @returns {Array} Array of elements that are active in the tooltip\r\n\t */\r\n  getActiveElements() {\r\n    return this._active || [];\r\n  }\r\n\r\n  /**\r\n\t * Set active elements in the tooltip\r\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\r\n\t * @param {object} eventPosition Synthetic event position used in positioning\r\n\t */\r\n  setActiveElements(activeElements, eventPosition) {\r\n    const lastActive = this._active;\r\n    const active = activeElements.map(({datasetIndex, index}) => {\r\n      const meta = this.chart.getDatasetMeta(datasetIndex);\r\n\r\n      if (!meta) {\r\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\r\n      }\r\n\r\n      return {\r\n        datasetIndex,\r\n        element: meta.data[index],\r\n        index,\r\n      };\r\n    });\r\n    const changed = !_elementsEqual(lastActive, active);\r\n    const positionChanged = this._positionChanged(active, eventPosition);\r\n\r\n    if (changed || positionChanged) {\r\n      this._active = active;\r\n      this._eventPosition = eventPosition;\r\n      this._ignoreReplayEvents = true;\r\n      this.update(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Handle an event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {boolean} true if the tooltip changed\r\n\t */\r\n  handleEvent(e, replay, inChartArea = true) {\r\n    if (replay && this._ignoreReplayEvents) {\r\n      return false;\r\n    }\r\n    this._ignoreReplayEvents = false;\r\n\r\n    const options = this.options;\r\n    const lastActive = this._active || [];\r\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\r\n\r\n    // When there are multiple items shown, but the tooltip position is nearest mode\r\n    // an update may need to be made because our position may have changed even though\r\n    // the items are the same as before.\r\n    const positionChanged = this._positionChanged(active, e);\r\n\r\n    // Remember Last Actives\r\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\r\n\r\n    // Only handle target event on tooltip change\r\n    if (changed) {\r\n      this._active = active;\r\n\r\n      if (options.enabled || options.external) {\r\n        this._eventPosition = {\r\n          x: e.x,\r\n          y: e.y\r\n        };\r\n\r\n        this.update(true, replay);\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n\r\n  /**\r\n\t * Helper for determining the active elements for event\r\n\t * @param {ChartEvent} e - The event to handle\r\n\t * @param {InteractionItem[]} lastActive - Previously active elements\r\n\t * @param {boolean} [replay] - This is a replayed event (from update)\r\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\r\n\t * @returns {InteractionItem[]} - Active elements\r\n\t * @private\r\n\t */\r\n  _getActiveElements(e, lastActive, replay, inChartArea) {\r\n    const options = this.options;\r\n\r\n    if (e.type === 'mouseout') {\r\n      return [];\r\n    }\r\n\r\n    if (!inChartArea) {\r\n      // Let user control the active elements outside chartArea. Eg. using Legend.\r\n      return lastActive;\r\n    }\r\n\r\n    // Find Active Elements for tooltips\r\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\r\n\r\n    if (options.reverse) {\r\n      active.reverse();\r\n    }\r\n\r\n    return active;\r\n  }\r\n\r\n  /**\r\n\t * Determine if the active elements + event combination changes the\r\n\t * tooltip position\r\n\t * @param {array} active - Active elements\r\n\t * @param {ChartEvent} e - Event that triggered the position change\r\n\t * @returns {boolean} True if the position has changed\r\n\t */\r\n  _positionChanged(active, e) {\r\n    const {caretX, caretY, options} = this;\r\n    const position = positioners[options.position].call(this, active, e);\r\n    return position !== false && (caretX !== position.x || caretY !== position.y);\r\n  }\r\n}\r\n\r\nexport default {\r\n  id: 'tooltip',\r\n  _element: Tooltip,\r\n  positioners,\r\n\r\n  afterInit(chart, _args, options) {\r\n    if (options) {\r\n      chart.tooltip = new Tooltip({chart, options});\r\n    }\r\n  },\r\n\r\n  beforeUpdate(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  reset(chart, _args, options) {\r\n    if (chart.tooltip) {\r\n      chart.tooltip.initialize(options);\r\n    }\r\n  },\r\n\r\n  afterDraw(chart) {\r\n    const tooltip = chart.tooltip;\r\n\r\n    if (tooltip && tooltip._willRender()) {\r\n      const args = {\r\n        tooltip\r\n      };\r\n\r\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\r\n        return;\r\n      }\r\n\r\n      tooltip.draw(chart.ctx);\r\n\r\n      chart.notifyPlugins('afterTooltipDraw', args);\r\n    }\r\n  },\r\n\r\n  afterEvent(chart, args) {\r\n    if (chart.tooltip) {\r\n      // If the event is replayed from `update`, we should evaluate with the final positions.\r\n      const useFinalPosition = args.replay;\r\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\r\n        // notify chart about the change, so it will render\r\n        args.changed = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  defaults: {\r\n    enabled: true,\r\n    external: null,\r\n    position: 'average',\r\n    backgroundColor: 'rgba(0,0,0,0.8)',\r\n    titleColor: '#fff',\r\n    titleFont: {\r\n      weight: 'bold',\r\n    },\r\n    titleSpacing: 2,\r\n    titleMarginBottom: 6,\r\n    titleAlign: 'left',\r\n    bodyColor: '#fff',\r\n    bodySpacing: 2,\r\n    bodyFont: {\r\n    },\r\n    bodyAlign: 'left',\r\n    footerColor: '#fff',\r\n    footerSpacing: 2,\r\n    footerMarginTop: 6,\r\n    footerFont: {\r\n      weight: 'bold',\r\n    },\r\n    footerAlign: 'left',\r\n    padding: 6,\r\n    caretPadding: 2,\r\n    caretSize: 5,\r\n    cornerRadius: 6,\r\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\r\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\r\n    multiKeyBackground: '#fff',\r\n    displayColors: true,\r\n    boxPadding: 0,\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    animation: {\r\n      duration: 400,\r\n      easing: 'easeOutQuart',\r\n    },\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\r\n      },\r\n      opacity: {\r\n        easing: 'linear',\r\n        duration: 200\r\n      }\r\n    },\r\n    callbacks: defaultCallbacks\r\n  },\r\n\r\n  defaultRoutes: {\r\n    bodyFont: 'font',\r\n    footerFont: 'font',\r\n    titleFont: 'font'\r\n  },\r\n\r\n  descriptors: {\r\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\r\n    _indexable: false,\r\n    callbacks: {\r\n      _scriptable: false,\r\n      _indexable: false,\r\n    },\r\n    animation: {\r\n      _fallback: false\r\n    },\r\n    animations: {\r\n      _fallback: 'animation'\r\n    }\r\n  },\r\n\r\n  // Resolve additionally from `interaction` options and defaults.\r\n  additionalOptionScopes: ['interaction']\r\n};\r\n","import Scale from '../core/core.scale.js';\r\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\r\n\r\nconst addIfString = (labels, raw, index, addedLabels) => {\r\n  if (typeof raw === 'string') {\r\n    index = labels.push(raw) - 1;\r\n    addedLabels.unshift({index, label: raw});\r\n  } else if (isNaN(raw)) {\r\n    index = null;\r\n  }\r\n  return index;\r\n};\r\n\r\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\r\n  const first = labels.indexOf(raw);\r\n  if (first === -1) {\r\n    return addIfString(labels, raw, index, addedLabels);\r\n  }\r\n  const last = labels.lastIndexOf(raw);\r\n  return first !== last ? index : first;\r\n}\r\n\r\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\r\n\r\nfunction _getLabelForValue(value) {\r\n  const labels = this.getLabels();\r\n\r\n  if (value >= 0 && value < labels.length) {\r\n    return labels[value];\r\n  }\r\n  return value;\r\n}\r\n\r\nexport default class CategoryScale extends Scale {\r\n\r\n  static id = 'category';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: _getLabelForValue\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n    this._addedLabels = [];\r\n  }\r\n\r\n  init(scaleOptions) {\r\n    const added = this._addedLabels;\r\n    if (added.length) {\r\n      const labels = this.getLabels();\r\n      for (const {index, label} of added) {\r\n        if (labels[index] === label) {\r\n          labels.splice(index, 1);\r\n        }\r\n      }\r\n      this._addedLabels = [];\r\n    }\r\n    super.init(scaleOptions);\r\n  }\r\n\r\n  parse(raw, index) {\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    const labels = this.getLabels();\r\n    index = isFinite(index) && labels[index] === raw ? index\r\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\r\n    return validIndex(index, labels.length - 1);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this.getMinMax(true);\r\n\r\n    if (this.options.bounds === 'ticks') {\r\n      if (!minDefined) {\r\n        min = 0;\r\n      }\r\n      if (!maxDefined) {\r\n        max = this.getLabels().length - 1;\r\n      }\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const offset = this.options.offset;\r\n    const ticks = [];\r\n    let labels = this.getLabels();\r\n\r\n    // If we are viewing some subset of labels, slice the original array\r\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\r\n\r\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\r\n    this._startValue = this.min - (offset ? 0.5 : 0);\r\n\r\n    for (let value = min; value <= max; value++) {\r\n      ticks.push({value});\r\n    }\r\n    return ticks;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return _getLabelForValue.call(this, value);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    super.configure();\r\n\r\n    if (!this.isHorizontal()) {\r\n      // For backward compatibility, vertical category scale reverse is inverted.\r\n      this._reversePixels = !this._reversePixels;\r\n    }\r\n  }\r\n\r\n  // Used to get data value locations. Value can either be an index or a numerical value\r\n  getPixelForValue(value) {\r\n    if (typeof value !== 'number') {\r\n      value = this.parse(value);\r\n    }\r\n\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  // Must override base implementation because it calls getPixelForValue\r\n  // and category scale can have duplicate values\r\n  getPixelForTick(index) {\r\n    const ticks = this.ticks;\r\n    if (index < 0 || index > ticks.length - 1) {\r\n      return null;\r\n    }\r\n    return this.getPixelForValue(ticks[index].value);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\r\n  }\r\n\r\n  getBasePixel() {\r\n    return this.bottom;\r\n  }\r\n}\r\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\r\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\n\r\n/**\r\n * Generate a set of linear ticks for an axis\r\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\r\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\r\n *    Note that the generationOptions.maxCount setting is respected in this scenario\r\n *\r\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\r\n *    spacing = (max - min) / count\r\n *    Ticks are generated as [min, min + spacing, ..., max]\r\n *\r\n * 3. If generationOptions.count is defined\r\n *    spacing = (niceMax - niceMin) / count\r\n *\r\n * 4. Compute optimal spacing of ticks using niceNum algorithm\r\n *\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, dataRange) {\r\n  const ticks = [];\r\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\r\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\r\n  // for details.\r\n\r\n  const MIN_SPACING = 1e-14;\r\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\r\n  const unit = step || 1;\r\n  const maxSpaces = maxTicks - 1;\r\n  const {min: rmin, max: rmax} = dataRange;\r\n  const minDefined = !isNullOrUndef(min);\r\n  const maxDefined = !isNullOrUndef(max);\r\n  const countDefined = !isNullOrUndef(count);\r\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\r\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\r\n  let factor, niceMin, niceMax, numSpaces;\r\n\r\n  // Beyond MIN_SPACING floating point numbers being to lose precision\r\n  // such that we can't do the math necessary to generate ticks\r\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\r\n    return [{value: rmin}, {value: rmax}];\r\n  }\r\n\r\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\r\n  if (numSpaces > maxSpaces) {\r\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\r\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\r\n  }\r\n\r\n  if (!isNullOrUndef(precision)) {\r\n    // If the user specified a precision, round to that number of decimal places\r\n    factor = Math.pow(10, precision);\r\n    spacing = Math.ceil(spacing * factor) / factor;\r\n  }\r\n\r\n  if (bounds === 'ticks') {\r\n    niceMin = Math.floor(rmin / spacing) * spacing;\r\n    niceMax = Math.ceil(rmax / spacing) * spacing;\r\n  } else {\r\n    niceMin = rmin;\r\n    niceMax = rmax;\r\n  }\r\n\r\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\r\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\r\n    // spacing = step;\r\n    // numSpaces = (max - min) / spacing;\r\n    // Note that we round here to handle the case where almostWhole translated an FP error\r\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\r\n    spacing = (max - min) / numSpaces;\r\n    niceMin = min;\r\n    niceMax = max;\r\n  } else if (countDefined) {\r\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\r\n    // Sometimes these are no-ops, but it makes the code a lot clearer\r\n    // and when a user defined range is specified, we want the correct ticks\r\n    niceMin = minDefined ? min : niceMin;\r\n    niceMax = maxDefined ? max : niceMax;\r\n    numSpaces = count - 1;\r\n    spacing = (niceMax - niceMin) / numSpaces;\r\n  } else {\r\n    // Case 4\r\n    numSpaces = (niceMax - niceMin) / spacing;\r\n\r\n    // If very close to our rounded value, use it.\r\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\r\n      numSpaces = Math.round(numSpaces);\r\n    } else {\r\n      numSpaces = Math.ceil(numSpaces);\r\n    }\r\n  }\r\n\r\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\r\n  // until this point\r\n  const decimalPlaces = Math.max(\r\n    _decimalPlaces(spacing),\r\n    _decimalPlaces(niceMin)\r\n  );\r\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\r\n  niceMin = Math.round(niceMin * factor) / factor;\r\n  niceMax = Math.round(niceMax * factor) / factor;\r\n\r\n  let j = 0;\r\n  if (minDefined) {\r\n    if (includeBounds && niceMin !== min) {\r\n      ticks.push({value: min});\r\n\r\n      if (niceMin < min) {\r\n        j++; // Skip niceMin\r\n      }\r\n      // If the next nice tick is close to min, skip it\r\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\r\n        j++;\r\n      }\r\n    } else if (niceMin < min) {\r\n      j++;\r\n    }\r\n  }\r\n\r\n  for (; j < numSpaces; ++j) {\r\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\r\n    if (maxDefined && tickValue > max) {\r\n      break;\r\n    }\r\n    ticks.push({value: tickValue});\r\n  }\r\n\r\n  if (maxDefined && includeBounds && niceMax !== max) {\r\n    // If the previous tick is too close to max, replace it with max, else add max\r\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\r\n      ticks[ticks.length - 1].value = max;\r\n    } else {\r\n      ticks.push({value: max});\r\n    }\r\n  } else if (!maxDefined || niceMax === max) {\r\n    ticks.push({value: niceMax});\r\n  }\r\n\r\n  return ticks;\r\n}\r\n\r\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\r\n  const rad = toRadians(minRotation);\r\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\r\n  const length = 0.75 * minSpacing * ('' + value).length;\r\n  return Math.min(minSpacing / ratio, length);\r\n}\r\n\r\nexport default class LinearScaleBase extends Scale {\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    /** @type {number} */\r\n    this._endValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (isNullOrUndef(raw)) {\r\n      return null;\r\n    }\r\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\r\n      return null;\r\n    }\r\n\r\n    return +raw;\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {beginAtZero} = this.options;\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let {min, max} = this;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (beginAtZero) {\r\n      const minSign = sign(min);\r\n      const maxSign = sign(max);\r\n\r\n      if (minSign < 0 && maxSign < 0) {\r\n        setMax(0);\r\n      } else if (minSign > 0 && maxSign > 0) {\r\n        setMin(0);\r\n      }\r\n    }\r\n\r\n    if (min === max) {\r\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\r\n\r\n      setMax(max + offset);\r\n\r\n      if (!beginAtZero) {\r\n        setMin(min - offset);\r\n      }\r\n    }\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  getTickLimit() {\r\n    const tickOpts = this.options.ticks;\r\n    // eslint-disable-next-line prefer-const\r\n    let {maxTicksLimit, stepSize} = tickOpts;\r\n    let maxTicks;\r\n\r\n    if (stepSize) {\r\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\r\n      if (maxTicks > 1000) {\r\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\r\n        maxTicks = 1000;\r\n      }\r\n    } else {\r\n      maxTicks = this.computeTickLimit();\r\n      maxTicksLimit = maxTicksLimit || 11;\r\n    }\r\n\r\n    if (maxTicksLimit) {\r\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\r\n    }\r\n\r\n    return maxTicks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Number.POSITIVE_INFINITY;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    // Figure out what the max number of ticks we can support it is based on the size of\r\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\r\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\r\n    // the graph. Make sure we always have at least 2 ticks\r\n    let maxTicks = this.getTickLimit();\r\n    maxTicks = Math.max(2, maxTicks);\r\n\r\n    const numericGeneratorOptions = {\r\n      maxTicks,\r\n      bounds: opts.bounds,\r\n      min: opts.min,\r\n      max: opts.max,\r\n      precision: tickOpts.precision,\r\n      step: tickOpts.stepSize,\r\n      count: tickOpts.count,\r\n      maxDigits: this._maxDigits(),\r\n      horizontal: this.isHorizontal(),\r\n      minRotation: tickOpts.minRotation || 0,\r\n      includeBounds: tickOpts.includeBounds !== false\r\n    };\r\n    const dataRange = this._range || this;\r\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const ticks = this.ticks;\r\n    let start = this.min;\r\n    let end = this.max;\r\n\r\n    super.configure();\r\n\r\n    if (this.options.offset && ticks.length) {\r\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\r\n      start -= offset;\r\n      end += offset;\r\n    }\r\n    this._startValue = start;\r\n    this._endValue = end;\r\n    this._valueRange = end - start;\r\n  }\r\n\r\n  getLabelForValue(value) {\r\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n}\r\n","import {isFinite} from '../helpers/helpers.core.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\nimport {toRadians} from '../helpers/index.js';\r\n\r\nexport default class LinearScale extends LinearScaleBase {\r\n\r\n  static id = 'linear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.numeric\r\n    }\r\n  };\r\n\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? min : 0;\r\n    this.max = isFinite(max) ? max : 1;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n \t */\r\n  computeTickLimit() {\r\n    const horizontal = this.isHorizontal();\r\n    const length = horizontal ? this.width : this.height;\r\n    const minRotation = toRadians(this.options.ticks.minRotation);\r\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\r\n    const tickFont = this._resolveTickFontOptions(0);\r\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\r\n  }\r\n\r\n  // Utils\r\n  getPixelForValue(value) {\r\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\r\n  }\r\n}\r\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\r\nimport {formatNumber} from '../helpers/helpers.intl.js';\r\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\n\r\nconst log10Floor = v => Math.floor(log10(v));\r\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\r\n\r\nfunction isMajor(tickVal) {\r\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\r\n  return remain === 1;\r\n}\r\n\r\nfunction steps(min, max, rangeExp) {\r\n  const rangeStep = Math.pow(10, rangeExp);\r\n  const start = Math.floor(min / rangeStep);\r\n  const end = Math.ceil(max / rangeStep);\r\n  return end - start;\r\n}\r\n\r\nfunction startExp(min, max) {\r\n  const range = max - min;\r\n  let rangeExp = log10Floor(range);\r\n  while (steps(min, max, rangeExp) > 10) {\r\n    rangeExp++;\r\n  }\r\n  while (steps(min, max, rangeExp) < 10) {\r\n    rangeExp--;\r\n  }\r\n  return Math.min(rangeExp, log10Floor(min));\r\n}\r\n\r\n\r\n/**\r\n * Generate a set of logarithmic ticks\r\n * @param generationOptions the options used to generate the ticks\r\n * @param dataRange the range of the data\r\n * @returns {object[]} array of tick objects\r\n */\r\nfunction generateTicks(generationOptions, {min, max}) {\r\n  min = finiteOrDefault(generationOptions.min, min);\r\n  const ticks = [];\r\n  const minExp = log10Floor(min);\r\n  let exp = startExp(min, max);\r\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\r\n  const stepSize = Math.pow(10, exp);\r\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\r\n  const start = Math.round((min - base) * precision) / precision;\r\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\r\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\r\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\r\n  while (value < max) {\r\n    ticks.push({value, major: isMajor(value), significand});\r\n    if (significand >= 10) {\r\n      significand = significand < 15 ? 15 : 20;\r\n    } else {\r\n      significand++;\r\n    }\r\n    if (significand >= 20) {\r\n      exp++;\r\n      significand = 2;\r\n      precision = exp >= 0 ? 1 : precision;\r\n    }\r\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\r\n  }\r\n  const lastTick = finiteOrDefault(generationOptions.max, value);\r\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\r\n\r\n  return ticks;\r\n}\r\n\r\nexport default class LogarithmicScale extends Scale {\r\n\r\n  static id = 'logarithmic';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    ticks: {\r\n      callback: Ticks.formatters.logarithmic,\r\n      major: {\r\n        enabled: true\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.start = undefined;\r\n    /** @type {number} */\r\n    this.end = undefined;\r\n    /** @type {number} */\r\n    this._startValue = undefined;\r\n    this._valueRange = 0;\r\n  }\r\n\r\n  parse(raw, index) {\r\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\r\n    if (value === 0) {\r\n      this._zero = true;\r\n      return undefined;\r\n    }\r\n    return isFinite(value) && value > 0 ? value : null;\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(true);\r\n\r\n    this.min = isFinite(min) ? Math.max(0, min) : null;\r\n    this.max = isFinite(max) ? Math.max(0, max) : null;\r\n\r\n    if (this.options.beginAtZero) {\r\n      this._zero = true;\r\n    }\r\n\r\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\r\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\r\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\r\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\r\n    }\r\n\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  handleTickRangeOptions() {\r\n    const {minDefined, maxDefined} = this.getUserBounds();\r\n    let min = this.min;\r\n    let max = this.max;\r\n\r\n    const setMin = v => (min = minDefined ? min : v);\r\n    const setMax = v => (max = maxDefined ? max : v);\r\n\r\n    if (min === max) {\r\n      if (min <= 0) { // includes null\r\n        setMin(1);\r\n        setMax(10);\r\n      } else {\r\n        setMin(changeExponent(min, -1));\r\n        setMax(changeExponent(max, +1));\r\n      }\r\n    }\r\n    if (min <= 0) {\r\n      setMin(changeExponent(max, -1));\r\n    }\r\n    if (max <= 0) {\r\n\r\n      setMax(changeExponent(min, +1));\r\n    }\r\n\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n  buildTicks() {\r\n    const opts = this.options;\r\n\r\n    const generationOptions = {\r\n      min: this._userMin,\r\n      max: this._userMax\r\n    };\r\n    const ticks = generateTicks(generationOptions, this);\r\n\r\n    // At this point, we need to update our max and min given the tick values,\r\n    // since we probably have expanded the range of the scale\r\n    if (opts.bounds === 'ticks') {\r\n      _setMinAndMaxByKey(ticks, this, 'value');\r\n    }\r\n\r\n    if (opts.reverse) {\r\n      ticks.reverse();\r\n\r\n      this.start = this.max;\r\n      this.end = this.min;\r\n    } else {\r\n      this.start = this.min;\r\n      this.end = this.max;\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    return value === undefined\r\n      ? '0'\r\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  configure() {\r\n    const start = this.min;\r\n\r\n    super.configure();\r\n\r\n    this._startValue = log10(start);\r\n    this._valueRange = log10(this.max) - log10(start);\r\n  }\r\n\r\n  getPixelForValue(value) {\r\n    if (value === undefined || value === 0) {\r\n      value = this.min;\r\n    }\r\n    if (value === null || isNaN(value)) {\r\n      return NaN;\r\n    }\r\n    return this.getPixelForDecimal(value === this.min\r\n      ? 0\r\n      : (log10(value) - this._startValue) / this._valueRange);\r\n  }\r\n\r\n  getValueForPixel(pixel) {\r\n    const decimal = this.getDecimalForPixel(pixel);\r\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\r\n  }\r\n}\r\n","import defaults from '../core/core.defaults.js';\r\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\r\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\r\nimport LinearScaleBase from './scale.linearbase.js';\r\nimport Ticks from '../core/core.ticks.js';\r\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\r\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\r\n\r\nfunction getTickBackdropHeight(opts) {\r\n  const tickOpts = opts.ticks;\r\n\r\n  if (tickOpts.display && opts.display) {\r\n    const padding = toPadding(tickOpts.backdropPadding);\r\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction measureLabelSize(ctx, font, label) {\r\n  label = isArray(label) ? label : [label];\r\n  return {\r\n    w: _longestText(ctx, font.string, label),\r\n    h: label.length * font.lineHeight\r\n  };\r\n}\r\n\r\nfunction determineLimits(angle, pos, size, min, max) {\r\n  if (angle === min || angle === max) {\r\n    return {\r\n      start: pos - (size / 2),\r\n      end: pos + (size / 2)\r\n    };\r\n  } else if (angle < min || angle > max) {\r\n    return {\r\n      start: pos - size,\r\n      end: pos\r\n    };\r\n  }\r\n\r\n  return {\r\n    start: pos,\r\n    end: pos + size\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to fit a radial linear scale with point labels\r\n */\r\nfunction fitWithPointLabels(scale) {\r\n\r\n  // Right, this is really confusing and there is a lot of maths going on here\r\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\r\n  //\r\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\r\n  //\r\n  // Solution:\r\n  //\r\n  // We assume the radius of the polygon is half the size of the canvas at first\r\n  // at each index we check if the text overlaps.\r\n  //\r\n  // Where it does, we store that angle and that index.\r\n  //\r\n  // After finding the largest index and angle we calculate how much we need to remove\r\n  // from the shape radius to move the point inwards by that x.\r\n  //\r\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\r\n  // along with labels.\r\n  //\r\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\r\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\r\n  //\r\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\r\n  // and position it in the most space efficient manner\r\n  //\r\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\r\n\r\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\r\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\r\n  const orig = {\r\n    l: scale.left + scale._padding.left,\r\n    r: scale.right - scale._padding.right,\r\n    t: scale.top + scale._padding.top,\r\n    b: scale.bottom - scale._padding.bottom\r\n  };\r\n  const limits = Object.assign({}, orig);\r\n  const labelSizes = [];\r\n  const padding = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const pointLabelOpts = scale.options.pointLabels;\r\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\r\n    padding[i] = opts.padding;\r\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\r\n    const plFont = toFont(opts.font);\r\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\r\n    labelSizes[i] = textSize;\r\n\r\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\r\n    const angle = Math.round(toDegrees(angleRadians));\r\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\r\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\r\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\r\n  }\r\n\r\n  scale.setCenterPoint(\r\n    orig.l - limits.l,\r\n    limits.r - orig.r,\r\n    orig.t - limits.t,\r\n    limits.b - orig.b\r\n  );\r\n\r\n  // Now that text size is determined, compute the full positions\r\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\r\n}\r\n\r\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\r\n  const sin = Math.abs(Math.sin(angle));\r\n  const cos = Math.abs(Math.cos(angle));\r\n  let x = 0;\r\n  let y = 0;\r\n  if (hLimits.start < orig.l) {\r\n    x = (orig.l - hLimits.start) / sin;\r\n    limits.l = Math.min(limits.l, orig.l - x);\r\n  } else if (hLimits.end > orig.r) {\r\n    x = (hLimits.end - orig.r) / sin;\r\n    limits.r = Math.max(limits.r, orig.r + x);\r\n  }\r\n  if (vLimits.start < orig.t) {\r\n    y = (orig.t - vLimits.start) / cos;\r\n    limits.t = Math.min(limits.t, orig.t - y);\r\n  } else if (vLimits.end > orig.b) {\r\n    y = (vLimits.end - orig.b) / cos;\r\n    limits.b = Math.max(limits.b, orig.b + y);\r\n  }\r\n}\r\n\r\nfunction createPointLabelItem(scale, index, itemOpts) {\r\n  const outerDistance = scale.drawingArea;\r\n  const {extra, additionalAngle, padding, size} = itemOpts;\r\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\r\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\r\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\r\n  const textAlign = getTextAlignForAngle(angle);\r\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\r\n  return {\r\n    // if to draw or overlapped\r\n    visible: true,\r\n\r\n    // Text position\r\n    x: pointLabelPosition.x,\r\n    y,\r\n\r\n    // Text rendering data\r\n    textAlign,\r\n\r\n    // Bounding box\r\n    left,\r\n    top: y,\r\n    right: left + size.w,\r\n    bottom: y + size.h\r\n  };\r\n}\r\n\r\nfunction isNotOverlapped(item, area) {\r\n  if (!area) {\r\n    return true;\r\n  }\r\n  const {left, top, right, bottom} = item;\r\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\r\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\r\n  return !apexesInArea;\r\n}\r\n\r\nfunction buildPointLabelItems(scale, labelSizes, padding) {\r\n  const items = [];\r\n  const valueCount = scale._pointLabels.length;\r\n  const opts = scale.options;\r\n  const {centerPointLabels, display} = opts.pointLabels;\r\n  const itemOpts = {\r\n    extra: getTickBackdropHeight(opts) / 2,\r\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\r\n  };\r\n  let area;\r\n\r\n  for (let i = 0; i < valueCount; i++) {\r\n    itemOpts.padding = padding[i];\r\n    itemOpts.size = labelSizes[i];\r\n\r\n    const item = createPointLabelItem(scale, i, itemOpts);\r\n    items.push(item);\r\n    if (display === 'auto') {\r\n      item.visible = isNotOverlapped(item, area);\r\n      if (item.visible) {\r\n        area = item;\r\n      }\r\n    }\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction getTextAlignForAngle(angle) {\r\n  if (angle === 0 || angle === 180) {\r\n    return 'center';\r\n  } else if (angle < 180) {\r\n    return 'left';\r\n  }\r\n\r\n  return 'right';\r\n}\r\n\r\nfunction leftForTextAlign(x, w, align) {\r\n  if (align === 'right') {\r\n    x -= w;\r\n  } else if (align === 'center') {\r\n    x -= (w / 2);\r\n  }\r\n  return x;\r\n}\r\n\r\nfunction yForAngle(y, h, angle) {\r\n  if (angle === 90 || angle === 270) {\r\n    y -= (h / 2);\r\n  } else if (angle > 270 || angle < 90) {\r\n    y -= h;\r\n  }\r\n  return y;\r\n}\r\n\r\nfunction drawPointLabelBox(ctx, opts, item) {\r\n  const {left, top, right, bottom} = item;\r\n  const {backdropColor} = opts;\r\n\r\n  if (!isNullOrUndef(backdropColor)) {\r\n    const borderRadius = toTRBLCorners(opts.borderRadius);\r\n    const padding = toPadding(opts.backdropPadding);\r\n    ctx.fillStyle = backdropColor;\r\n\r\n    const backdropLeft = left - padding.left;\r\n    const backdropTop = top - padding.top;\r\n    const backdropWidth = right - left + padding.width;\r\n    const backdropHeight = bottom - top + padding.height;\r\n\r\n    if (Object.values(borderRadius).some(v => v !== 0)) {\r\n      ctx.beginPath();\r\n      addRoundedRectPath(ctx, {\r\n        x: backdropLeft,\r\n        y: backdropTop,\r\n        w: backdropWidth,\r\n        h: backdropHeight,\r\n        radius: borderRadius,\r\n      });\r\n      ctx.fill();\r\n    } else {\r\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawPointLabels(scale, labelCount) {\r\n  const {ctx, options: {pointLabels}} = scale;\r\n\r\n  for (let i = labelCount - 1; i >= 0; i--) {\r\n    const item = scale._pointLabelItems[i];\r\n    if (!item.visible) {\r\n      // overlapping\r\n      continue;\r\n    }\r\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\r\n    drawPointLabelBox(ctx, optsAtIndex, item);\r\n    const plFont = toFont(optsAtIndex.font);\r\n    const {x, y, textAlign} = item;\r\n\r\n    renderText(\r\n      ctx,\r\n      scale._pointLabels[i],\r\n      x,\r\n      y + (plFont.lineHeight / 2),\r\n      plFont,\r\n      {\r\n        color: optsAtIndex.color,\r\n        textAlign: textAlign,\r\n        textBaseline: 'middle'\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\r\n  const {ctx} = scale;\r\n  if (circular) {\r\n    // Draw circular arcs between the points\r\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\r\n  } else {\r\n    // Draw straight lines connecting each index\r\n    let pointPosition = scale.getPointPosition(0, radius);\r\n    ctx.moveTo(pointPosition.x, pointPosition.y);\r\n\r\n    for (let i = 1; i < labelCount; i++) {\r\n      pointPosition = scale.getPointPosition(i, radius);\r\n      ctx.lineTo(pointPosition.x, pointPosition.y);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\r\n  const ctx = scale.ctx;\r\n  const circular = gridLineOpts.circular;\r\n\r\n  const {color, lineWidth} = gridLineOpts;\r\n\r\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\r\n    return;\r\n  }\r\n\r\n  ctx.save();\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.setLineDash(borderOpts.dash);\r\n  ctx.lineDashOffset = borderOpts.dashOffset;\r\n\r\n  ctx.beginPath();\r\n  pathRadiusLine(scale, radius, circular, labelCount);\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction createPointLabelContext(parent, index, label) {\r\n  return createContext(parent, {\r\n    label,\r\n    index,\r\n    type: 'pointLabel'\r\n  });\r\n}\r\n\r\nexport default class RadialLinearScale extends LinearScaleBase {\r\n\r\n  static id = 'radialLinear';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    display: true,\r\n\r\n    // Boolean - Whether to animate scaling the chart from the centre\r\n    animate: true,\r\n    position: 'chartArea',\r\n\r\n    angleLines: {\r\n      display: true,\r\n      lineWidth: 1,\r\n      borderDash: [],\r\n      borderDashOffset: 0.0\r\n    },\r\n\r\n    grid: {\r\n      circular: false\r\n    },\r\n\r\n    startAngle: 0,\r\n\r\n    // label settings\r\n    ticks: {\r\n      // Boolean - Show a backdrop to the scale label\r\n      showLabelBackdrop: true,\r\n\r\n      callback: Ticks.formatters.numeric\r\n    },\r\n\r\n    pointLabels: {\r\n      backdropColor: undefined,\r\n\r\n      // Number - The backdrop padding above & below the label in pixels\r\n      backdropPadding: 2,\r\n\r\n      // Boolean - if true, show point labels\r\n      display: true,\r\n\r\n      // Number - Point label font size in pixels\r\n      font: {\r\n        size: 10\r\n      },\r\n\r\n      // Function - Used to convert point labels\r\n      callback(label) {\r\n        return label;\r\n      },\r\n\r\n      // Number - Additionl padding between scale and pointLabel\r\n      padding: 5,\r\n\r\n      // Boolean - if true, center point labels to slices in polar chart\r\n      centerPointLabels: false\r\n    }\r\n  };\r\n\r\n  static defaultRoutes = {\r\n    'angleLines.color': 'borderColor',\r\n    'pointLabels.color': 'color',\r\n    'ticks.color': 'color'\r\n  };\r\n\r\n  static descriptors = {\r\n    angleLines: {\r\n      _fallback: 'grid'\r\n    }\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super(cfg);\r\n\r\n    /** @type {number} */\r\n    this.xCenter = undefined;\r\n    /** @type {number} */\r\n    this.yCenter = undefined;\r\n    /** @type {number} */\r\n    this.drawingArea = undefined;\r\n    /** @type {string[]} */\r\n    this._pointLabels = [];\r\n    this._pointLabelItems = [];\r\n  }\r\n\r\n  setDimensions() {\r\n    // Set the unconstrained dimension before label rotation\r\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\r\n    const w = this.width = this.maxWidth - padding.width;\r\n    const h = this.height = this.maxHeight - padding.height;\r\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\r\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\r\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const {min, max} = this.getMinMax(false);\r\n\r\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\r\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\r\n\r\n    // Common base implementation to handle min, max, beginAtZero\r\n    this.handleTickRangeOptions();\r\n  }\r\n\r\n  /**\r\n\t * Returns the maximum number of ticks based on the scale dimension\r\n\t * @protected\r\n\t */\r\n  computeTickLimit() {\r\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\r\n  }\r\n\r\n  generateTickLabels(ticks) {\r\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\r\n\r\n    // Point labels\r\n    this._pointLabels = this.getLabels()\r\n      .map((value, index) => {\r\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\r\n        return label || label === 0 ? label : '';\r\n      })\r\n      .filter((v, i) => this.chart.getDataVisibility(i));\r\n  }\r\n\r\n  fit() {\r\n    const opts = this.options;\r\n\r\n    if (opts.display && opts.pointLabels.display) {\r\n      fitWithPointLabels(this);\r\n    } else {\r\n      this.setCenterPoint(0, 0, 0, 0);\r\n    }\r\n  }\r\n\r\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\r\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\r\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\r\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\r\n  }\r\n\r\n  getIndexAngle(index) {\r\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\r\n    const startAngle = this.options.startAngle || 0;\r\n\r\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\r\n  }\r\n\r\n  getDistanceFromCenterForValue(value) {\r\n    if (isNullOrUndef(value)) {\r\n      return NaN;\r\n    }\r\n\r\n    // Take into account half font size + the yPadding of the top value\r\n    const scalingFactor = this.drawingArea / (this.max - this.min);\r\n    if (this.options.reverse) {\r\n      return (this.max - value) * scalingFactor;\r\n    }\r\n    return (value - this.min) * scalingFactor;\r\n  }\r\n\r\n  getValueForDistanceFromCenter(distance) {\r\n    if (isNullOrUndef(distance)) {\r\n      return NaN;\r\n    }\r\n\r\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\r\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\r\n  }\r\n\r\n  getPointLabelContext(index) {\r\n    const pointLabels = this._pointLabels || [];\r\n\r\n    if (index >= 0 && index < pointLabels.length) {\r\n      const pointLabel = pointLabels[index];\r\n      return createPointLabelContext(this.getContext(), index, pointLabel);\r\n    }\r\n  }\r\n\r\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\r\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\r\n    return {\r\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\r\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\r\n      angle\r\n    };\r\n  }\r\n\r\n  getPointPositionForValue(index, value) {\r\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\r\n  }\r\n\r\n  getBasePosition(index) {\r\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\r\n  }\r\n\r\n  getPointLabelPosition(index) {\r\n    const {left, top, right, bottom} = this._pointLabelItems[index];\r\n    return {\r\n      left,\r\n      top,\r\n      right,\r\n      bottom,\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBackground() {\r\n    const {backgroundColor, grid: {circular}} = this.options;\r\n    if (backgroundColor) {\r\n      const ctx = this.ctx;\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\r\n      ctx.closePath();\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawGrid() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const {angleLines, grid, border} = opts;\r\n    const labelCount = this._pointLabels.length;\r\n\r\n    let i, offset, position;\r\n\r\n    if (opts.pointLabels.display) {\r\n      drawPointLabels(this, labelCount);\r\n    }\r\n\r\n    if (grid.display) {\r\n      this.ticks.forEach((tick, index) => {\r\n        if (index !== 0) {\r\n          offset = this.getDistanceFromCenterForValue(tick.value);\r\n          const context = this.getContext(index);\r\n          const optsAtIndex = grid.setContext(context);\r\n          const optsAtIndexBorder = border.setContext(context);\r\n\r\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (angleLines.display) {\r\n      ctx.save();\r\n\r\n      for (i = labelCount - 1; i >= 0; i--) {\r\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\r\n        const {color, lineWidth} = optsAtIndex;\r\n\r\n        if (!lineWidth || !color) {\r\n          continue;\r\n        }\r\n\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = color;\r\n\r\n        ctx.setLineDash(optsAtIndex.borderDash);\r\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\r\n\r\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\r\n        position = this.getPointPosition(i, offset);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.xCenter, this.yCenter);\r\n        ctx.lineTo(position.x, position.y);\r\n        ctx.stroke();\r\n      }\r\n\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawBorder() {}\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawLabels() {\r\n    const ctx = this.ctx;\r\n    const opts = this.options;\r\n    const tickOpts = opts.ticks;\r\n\r\n    if (!tickOpts.display) {\r\n      return;\r\n    }\r\n\r\n    const startAngle = this.getIndexAngle(0);\r\n    let offset, width;\r\n\r\n    ctx.save();\r\n    ctx.translate(this.xCenter, this.yCenter);\r\n    ctx.rotate(startAngle);\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    this.ticks.forEach((tick, index) => {\r\n      if (index === 0 && !opts.reverse) {\r\n        return;\r\n      }\r\n\r\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\r\n      const tickFont = toFont(optsAtIndex.font);\r\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\r\n\r\n      if (optsAtIndex.showLabelBackdrop) {\r\n        ctx.font = tickFont.string;\r\n        width = ctx.measureText(tick.label).width;\r\n        ctx.fillStyle = optsAtIndex.backdropColor;\r\n\r\n        const padding = toPadding(optsAtIndex.backdropPadding);\r\n        ctx.fillRect(\r\n          -width / 2 - padding.left,\r\n          -offset - tickFont.size / 2 - padding.top,\r\n          width + padding.width,\r\n          tickFont.size + padding.height\r\n        );\r\n      }\r\n\r\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\r\n        color: optsAtIndex.color,\r\n        strokeColor: optsAtIndex.textStrokeColor,\r\n        strokeWidth: optsAtIndex.textStrokeWidth,\r\n      });\r\n    });\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  drawTitle() {}\r\n}\r\n","import adapters from '../core/core.adapters.js';\r\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\r\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\r\nimport Scale from '../core/core.scale.js';\r\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\r\n\r\n/**\r\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\r\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\r\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\r\n */\r\n\r\n/**\r\n * @type {Object<Unit, Interval>}\r\n */\r\nconst INTERVALS = {\r\n  millisecond: {common: true, size: 1, steps: 1000},\r\n  second: {common: true, size: 1000, steps: 60},\r\n  minute: {common: true, size: 60000, steps: 60},\r\n  hour: {common: true, size: 3600000, steps: 24},\r\n  day: {common: true, size: 86400000, steps: 30},\r\n  week: {common: false, size: 604800000, steps: 4},\r\n  month: {common: true, size: 2.628e9, steps: 12},\r\n  quarter: {common: false, size: 7.884e9, steps: 4},\r\n  year: {common: true, size: 3.154e10}\r\n};\r\n\r\n/**\r\n * @type {Unit[]}\r\n */\r\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nfunction sorter(a, b) {\r\n  return a - b;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {*} input\r\n * @return {number}\r\n */\r\nfunction parse(scale, input) {\r\n  if (isNullOrUndef(input)) {\r\n    return null;\r\n  }\r\n\r\n  const adapter = scale._adapter;\r\n  const {parser, round, isoWeekday} = scale._parseOpts;\r\n  let value = input;\r\n\r\n  if (typeof parser === 'function') {\r\n    value = parser(value);\r\n  }\r\n\r\n  // Only parse if it's not a timestamp already\r\n  if (!isFinite(value)) {\r\n    value = typeof parser === 'string'\r\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\r\n      : adapter.parse(value);\r\n  }\r\n\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n\r\n  if (round) {\r\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\r\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\r\n      : adapter.startOf(value, round);\r\n  }\r\n\r\n  return +value;\r\n}\r\n\r\n/**\r\n * Figures out what unit results in an appropriate number of auto-generated ticks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @param {number} capacity\r\n * @return {object}\r\n */\r\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\r\n  const ilen = UNITS.length;\r\n\r\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\r\n    const interval = INTERVALS[UNITS[i]];\r\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\r\n\r\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n\r\n  return UNITS[ilen - 1];\r\n}\r\n\r\n/**\r\n * Figures out what unit to format a set of ticks with\r\n * @param {TimeScale} scale\r\n * @param {number} numTicks\r\n * @param {Unit} minUnit\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {Unit}\r\n */\r\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\r\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\r\n    const unit = UNITS[i];\r\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\r\n      return unit;\r\n    }\r\n  }\r\n\r\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\r\n}\r\n\r\n/**\r\n * @param {Unit} unit\r\n * @return {object}\r\n */\r\nfunction determineMajorUnit(unit) {\r\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\r\n    if (INTERVALS[UNITS[i]].common) {\r\n      return UNITS[i];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {object} ticks\r\n * @param {number} time\r\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\r\n */\r\nfunction addTick(ticks, time, timestamps) {\r\n  if (!timestamps) {\r\n    ticks[time] = true;\r\n  } else if (timestamps.length) {\r\n    const {lo, hi} = _lookup(timestamps, time);\r\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\r\n    ticks[timestamp] = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {object[]} ticks\r\n * @param {object} map\r\n * @param {Unit} majorUnit\r\n * @return {object[]}\r\n */\r\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\r\n  const adapter = scale._adapter;\r\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\r\n  const last = ticks[ticks.length - 1].value;\r\n  let major, index;\r\n\r\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\r\n    index = map[major];\r\n    if (index >= 0) {\r\n      ticks[index].major = true;\r\n    }\r\n  }\r\n  return ticks;\r\n}\r\n\r\n/**\r\n * @param {TimeScale} scale\r\n * @param {number[]} values\r\n * @param {Unit|undefined} [majorUnit]\r\n * @return {object[]}\r\n */\r\nfunction ticksFromTimestamps(scale, values, majorUnit) {\r\n  const ticks = [];\r\n  /** @type {Object<number,object>} */\r\n  const map = {};\r\n  const ilen = values.length;\r\n  let i, value;\r\n\r\n  for (i = 0; i < ilen; ++i) {\r\n    value = values[i];\r\n    map[value] = i;\r\n\r\n    ticks.push({\r\n      value,\r\n      major: false\r\n    });\r\n  }\r\n\r\n  // We set the major ticks separately from the above loop because calling startOf for every tick\r\n  // is expensive when there is a large number of ticks\r\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\r\n}\r\n\r\nexport default class TimeScale extends Scale {\r\n\r\n  static id = 'time';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = {\r\n    /**\r\n     * Scale boundary strategy (bypassed by min/max time options)\r\n     * - `data`: make sure data are fully visible, ticks outside are removed\r\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\r\n     * @see https://github.com/chartjs/Chart.js/pull/4556\r\n     * @since 2.7.0\r\n     */\r\n    bounds: 'data',\r\n\r\n    adapters: {},\r\n    time: {\r\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\r\n      unit: false, // false == automatic or override with week, month, year, etc.\r\n      round: false, // none, or override with week, month, year, etc.\r\n      isoWeekday: false, // override week start day\r\n      minUnit: 'millisecond',\r\n      displayFormats: {}\r\n    },\r\n    ticks: {\r\n      /**\r\n       * Ticks generation input values:\r\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\r\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\r\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\r\n       * @see https://github.com/chartjs/Chart.js/pull/4507\r\n       * @since 2.7.0\r\n       */\r\n      source: 'auto',\r\n\r\n      callback: false,\r\n\r\n      major: {\r\n        enabled: false\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {{data: number[], labels: number[], all: number[]}} */\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n\r\n    /** @type {Unit} */\r\n    this._unit = 'day';\r\n    /** @type {Unit=} */\r\n    this._majorUnit = undefined;\r\n    this._offsets = {};\r\n    this._normalized = false;\r\n    this._parseOpts = undefined;\r\n  }\r\n\r\n  init(scaleOpts, opts = {}) {\r\n    const time = scaleOpts.time || (scaleOpts.time = {});\r\n    /** @type {DateAdapter} */\r\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\r\n\r\n    adapter.init(opts);\r\n\r\n    // Backward compatibility: before introducing adapter, `displayFormats` was\r\n    // supposed to contain *all* unit/string pairs but this can't be resolved\r\n    // when loading the scale (adapters are loaded afterward), so let's populate\r\n    // missing formats on update\r\n    mergeIf(time.displayFormats, adapter.formats());\r\n\r\n    this._parseOpts = {\r\n      parser: time.parser,\r\n      round: time.round,\r\n      isoWeekday: time.isoWeekday\r\n    };\r\n\r\n    super.init(scaleOpts);\r\n\r\n    this._normalized = opts.normalized;\r\n  }\r\n\r\n  /**\r\n\t * @param {*} raw\r\n\t * @param {number?} [index]\r\n\t * @return {number}\r\n\t */\r\n  parse(raw, index) { // eslint-disable-line no-unused-vars\r\n    if (raw === undefined) {\r\n      return null;\r\n    }\r\n    return parse(this, raw);\r\n  }\r\n\r\n  beforeLayout() {\r\n    super.beforeLayout();\r\n    this._cache = {\r\n      data: [],\r\n      labels: [],\r\n      all: []\r\n    };\r\n  }\r\n\r\n  determineDataLimits() {\r\n    const options = this.options;\r\n    const adapter = this._adapter;\r\n    const unit = options.time.unit || 'day';\r\n    // eslint-disable-next-line prefer-const\r\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\r\n\r\n    /**\r\n\t\t * @param {object} bounds\r\n\t\t */\r\n    function _applyBounds(bounds) {\r\n      if (!minDefined && !isNaN(bounds.min)) {\r\n        min = Math.min(min, bounds.min);\r\n      }\r\n      if (!maxDefined && !isNaN(bounds.max)) {\r\n        max = Math.max(max, bounds.max);\r\n      }\r\n    }\r\n\r\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\r\n    if (!minDefined || !maxDefined) {\r\n      // Labels are always considered, when user did not force bounds\r\n      _applyBounds(this._getLabelBounds());\r\n\r\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\r\n      // data bounds are ignored (and don't need to be determined)\r\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\r\n        _applyBounds(this.getMinMax(false));\r\n      }\r\n    }\r\n\r\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\r\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\r\n\r\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\r\n    this.min = Math.min(min, max - 1);\r\n    this.max = Math.max(min + 1, max);\r\n  }\r\n\r\n  /**\r\n\t * @private\r\n\t */\r\n  _getLabelBounds() {\r\n    const arr = this.getLabelTimestamps();\r\n    let min = Number.POSITIVE_INFINITY;\r\n    let max = Number.NEGATIVE_INFINITY;\r\n\r\n    if (arr.length) {\r\n      min = arr[0];\r\n      max = arr[arr.length - 1];\r\n    }\r\n    return {min, max};\r\n  }\r\n\r\n  /**\r\n\t * @return {object[]}\r\n\t */\r\n  buildTicks() {\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    const tickOpts = options.ticks;\r\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\r\n\r\n    if (options.bounds === 'ticks' && timestamps.length) {\r\n      this.min = this._userMin || timestamps[0];\r\n      this.max = this._userMax || timestamps[timestamps.length - 1];\r\n    }\r\n\r\n    const min = this.min;\r\n    const max = this.max;\r\n\r\n    const ticks = _filterBetween(timestamps, min, max);\r\n\r\n    // PRIVATE\r\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\r\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\r\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\r\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\r\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\r\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\r\n      : determineMajorUnit(this._unit);\r\n    this.initOffsets(timestamps);\r\n\r\n    if (options.reverse) {\r\n      ticks.reverse();\r\n    }\r\n\r\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\r\n  }\r\n\r\n  afterAutoSkip() {\r\n    // Offsets for bar charts need to be handled with the auto skipped\r\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\r\n    if (this.options.offsetAfterAutoskip) {\r\n      this.initOffsets(this.ticks.map(tick => +tick.value));\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Returns the start and end offsets from edges in the form of {start, end}\r\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\r\n\t * They add extra margins on the both sides by scaling down the original scale.\r\n\t * Offsets are added when the `offset` option is true.\r\n\t * @param {number[]} timestamps\r\n\t * @protected\r\n\t */\r\n  initOffsets(timestamps = []) {\r\n    let start = 0;\r\n    let end = 0;\r\n    let first, last;\r\n\r\n    if (this.options.offset && timestamps.length) {\r\n      first = this.getDecimalForValue(timestamps[0]);\r\n      if (timestamps.length === 1) {\r\n        start = 1 - first;\r\n      } else {\r\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\r\n      }\r\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\r\n      if (timestamps.length === 1) {\r\n        end = last;\r\n      } else {\r\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\r\n      }\r\n    }\r\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\r\n    start = _limitValue(start, 0, limit);\r\n    end = _limitValue(end, 0, limit);\r\n\r\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\r\n  }\r\n\r\n  /**\r\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\r\n\t * `minor` unit using the given scale time `options`.\r\n\t * Important: this method can return ticks outside the min and max range, it's the\r\n\t * responsibility of the calling code to clamp values if needed.\r\n\t * @protected\r\n\t */\r\n  _generate() {\r\n    const adapter = this._adapter;\r\n    const min = this.min;\r\n    const max = this.max;\r\n    const options = this.options;\r\n    const timeOpts = options.time;\r\n    // @ts-ignore\r\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\r\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\r\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\r\n    const hasWeekday = isNumber(weekday) || weekday === true;\r\n    const ticks = {};\r\n    let first = min;\r\n    let time, count;\r\n\r\n    // For 'week' unit, handle the first day of week option\r\n    if (hasWeekday) {\r\n      first = +adapter.startOf(first, 'isoWeek', weekday);\r\n    }\r\n\r\n    // Align first ticks on unit\r\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\r\n\r\n    // Prevent browser from freezing in case user options request millions of milliseconds\r\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\r\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\r\n    }\r\n\r\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\r\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    if (time === max || options.bounds === 'ticks' || count === 1) {\r\n      addTick(ticks, time, timestamps);\r\n    }\r\n\r\n    // @ts-ignore\r\n    return Object.keys(ticks).sort(sorter).map(x => +x);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @return {string}\r\n\t */\r\n  getLabelForValue(value) {\r\n    const adapter = this._adapter;\r\n    const timeOpts = this.options.time;\r\n\r\n    if (timeOpts.tooltipFormat) {\r\n      return adapter.format(value, timeOpts.tooltipFormat);\r\n    }\r\n    return adapter.format(value, timeOpts.displayFormats.datetime);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value\r\n\t * @param {string|undefined} format\r\n\t * @return {string}\r\n\t */\r\n  format(value, format) {\r\n    const options = this.options;\r\n    const formats = options.time.displayFormats;\r\n    const unit = this._unit;\r\n    const fmt = format || formats[unit];\r\n    return this._adapter.format(value, fmt);\r\n  }\r\n\r\n  /**\r\n\t * Function to format an individual tick mark\r\n\t * @param {number} time\r\n\t * @param {number} index\r\n\t * @param {object[]} ticks\r\n\t * @param {string|undefined} [format]\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n  _tickFormatFunction(time, index, ticks, format) {\r\n    const options = this.options;\r\n    const formatter = options.ticks.callback;\r\n\r\n    if (formatter) {\r\n      return call(formatter, [time, index, ticks], this);\r\n    }\r\n\r\n    const formats = options.time.displayFormats;\r\n    const unit = this._unit;\r\n    const majorUnit = this._majorUnit;\r\n    const minorFormat = unit && formats[unit];\r\n    const majorFormat = majorUnit && formats[majorUnit];\r\n    const tick = ticks[index];\r\n    const major = majorUnit && majorFormat && tick && tick.major;\r\n\r\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\r\n  }\r\n\r\n  /**\r\n\t * @param {object[]} ticks\r\n\t */\r\n  generateTickLabels(ticks) {\r\n    let i, ilen, tick;\r\n\r\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\r\n      tick = ticks[i];\r\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getPixelForValue(value) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForValue(value);\r\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return this.min + pos * (this.max - this.min);\r\n  }\r\n\r\n  /**\r\n\t * @param {string} label\r\n\t * @return {{w:number, h:number}}\r\n\t * @private\r\n\t */\r\n  _getLabelSize(label) {\r\n    const ticksOpts = this.options.ticks;\r\n    const tickLabelWidth = this.ctx.measureText(label).width;\r\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\r\n    const cosRotation = Math.cos(angle);\r\n    const sinRotation = Math.sin(angle);\r\n    const tickFontSize = this._resolveTickFontOptions(0).size;\r\n\r\n    return {\r\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\r\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\r\n    };\r\n  }\r\n\r\n  /**\r\n\t * @param {number} exampleTime\r\n\t * @return {number}\r\n\t * @private\r\n\t */\r\n  _getLabelCapacity(exampleTime) {\r\n    const timeOpts = this.options.time;\r\n    const displayFormats = timeOpts.displayFormats;\r\n\r\n    // pick the longest format (milliseconds) for guesstimation\r\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\r\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\r\n    const size = this._getLabelSize(exampleLabel);\r\n    // subtract 1 - if offset then there's one less label than tick\r\n    // if not offset then one half label padding is added to each end leaving room for one less label\r\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\r\n    return capacity > 0 ? capacity : 1;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getDataTimestamps() {\r\n    let timestamps = this._cache.data || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const metas = this.getMatchingVisibleMetas();\r\n\r\n    if (this._normalized && metas.length) {\r\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\r\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\r\n    }\r\n\r\n    return (this._cache.data = this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  getLabelTimestamps() {\r\n    const timestamps = this._cache.labels || [];\r\n    let i, ilen;\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const labels = this.getLabels();\r\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\r\n      timestamps.push(parse(this, labels[i]));\r\n    }\r\n\r\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\r\n  }\r\n\r\n  /**\r\n\t * @param {number[]} values\r\n\t * @protected\r\n\t */\r\n  normalize(values) {\r\n    // It seems to be somewhat faster to do sorting first\r\n    return _arrayUnique(values.sort(sorter));\r\n  }\r\n}\r\n","import TimeScale from './scale.time.js';\r\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\r\n\r\n/**\r\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\r\n * at edges are used for the interpolation.\r\n * @param {object} table\r\n * @param {number} val\r\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\r\n * @return {object}\r\n */\r\nfunction interpolate(table, val, reverse) {\r\n  let lo = 0;\r\n  let hi = table.length - 1;\r\n  let prevSource, nextSource, prevTarget, nextTarget;\r\n  if (reverse) {\r\n    if (val >= table[lo].pos && val <= table[hi].pos) {\r\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\r\n    }\r\n    ({pos: prevSource, time: prevTarget} = table[lo]);\r\n    ({pos: nextSource, time: nextTarget} = table[hi]);\r\n  } else {\r\n    if (val >= table[lo].time && val <= table[hi].time) {\r\n      ({lo, hi} = _lookupByKey(table, 'time', val));\r\n    }\r\n    ({time: prevSource, pos: prevTarget} = table[lo]);\r\n    ({time: nextSource, pos: nextTarget} = table[hi]);\r\n  }\r\n\r\n  const span = nextSource - prevSource;\r\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\r\n}\r\n\r\nclass TimeSeriesScale extends TimeScale {\r\n\r\n  static id = 'timeseries';\r\n\r\n  /**\r\n   * @type {any}\r\n   */\r\n  static defaults = TimeScale.defaults;\r\n\r\n  /**\r\n\t * @param {object} props\r\n\t */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /** @type {object[]} */\r\n    this._table = [];\r\n    /** @type {number} */\r\n    this._minPos = undefined;\r\n    /** @type {number} */\r\n    this._tableRange = undefined;\r\n  }\r\n\r\n  /**\r\n\t * @protected\r\n\t */\r\n  initOffsets() {\r\n    const timestamps = this._getTimestampsForTable();\r\n    const table = this._table = this.buildLookupTable(timestamps);\r\n    this._minPos = interpolate(table, this.min);\r\n    this._tableRange = interpolate(table, this.max) - this._minPos;\r\n    super.initOffsets(timestamps);\r\n  }\r\n\r\n  /**\r\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\r\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\r\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\r\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\r\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\r\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\r\n\t * @param {number[]} timestamps\r\n\t * @return {object[]}\r\n\t * @protected\r\n\t */\r\n  buildLookupTable(timestamps) {\r\n    const {min, max} = this;\r\n    const items = [];\r\n    const table = [];\r\n    let i, ilen, prev, curr, next;\r\n\r\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\r\n      curr = timestamps[i];\r\n      if (curr >= min && curr <= max) {\r\n        items.push(curr);\r\n      }\r\n    }\r\n\r\n    if (items.length < 2) {\r\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\r\n      return [\r\n        {time: min, pos: 0},\r\n        {time: max, pos: 1}\r\n      ];\r\n    }\r\n\r\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\r\n      next = items[i + 1];\r\n      prev = items[i - 1];\r\n      curr = items[i];\r\n\r\n      // only add points that breaks the scale linearity\r\n      if (Math.round((next + prev) / 2) !== curr) {\r\n        table.push({time: curr, pos: i / (ilen - 1)});\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  /**\r\n    * Generates all timestamps defined in the data.\r\n    * Important: this method can return ticks outside the min and max range, it's the\r\n    * responsibility of the calling code to clamp values if needed.\r\n    * @protected\r\n    */\r\n  _generate() {\r\n    const min = this.min;\r\n    const max = this.max;\r\n    let timestamps = super.getDataTimestamps();\r\n    if (!timestamps.includes(min) || !timestamps.length) {\r\n      timestamps.splice(0, 0, min);\r\n    }\r\n    if (!timestamps.includes(max) || timestamps.length === 1) {\r\n      timestamps.push(max);\r\n    }\r\n    return timestamps.sort((a, b) => a - b);\r\n  }\r\n\r\n  /**\r\n\t * Returns all timestamps\r\n\t * @return {number[]}\r\n\t * @private\r\n\t */\r\n  _getTimestampsForTable() {\r\n    let timestamps = this._cache.all || [];\r\n\r\n    if (timestamps.length) {\r\n      return timestamps;\r\n    }\r\n\r\n    const data = this.getDataTimestamps();\r\n    const label = this.getLabelTimestamps();\r\n    if (data.length && label.length) {\r\n      // If combining labels and data (data might not contain all labels),\r\n      // we need to recheck uniqueness and sort\r\n      timestamps = this.normalize(data.concat(label));\r\n    } else {\r\n      timestamps = data.length ? data : label;\r\n    }\r\n    timestamps = this._cache.all = timestamps;\r\n\r\n    return timestamps;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\r\n\t * @return {number}\r\n\t */\r\n  getDecimalForValue(value) {\r\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\r\n  }\r\n\r\n  /**\r\n\t * @param {number} pixel\r\n\t * @return {number}\r\n\t */\r\n  getValueForPixel(pixel) {\r\n    const offsets = this._offsets;\r\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\r\n  }\r\n}\r\n\r\nexport default TimeSeriesScale;\r\n","export * from './controllers/index.js';\r\nexport * from './core/index.js';\r\nexport * from './elements/index.js';\r\nexport * from './platform/index.js';\r\nexport * from './plugins/index.js';\r\nexport * from './scales/index.js';\r\n\r\nimport * as controllers from './controllers/index.js';\r\nimport * as elements from './elements/index.js';\r\nimport * as plugins from './plugins/index.js';\r\nimport * as scales from './scales/index.js';\r\n\r\nexport {\r\n  controllers,\r\n  elements,\r\n  plugins,\r\n  scales,\r\n};\r\n\r\nexport const registerables = [\r\n  controllers,\r\n  elements,\r\n  plugins,\r\n  scales,\r\n];\r\n"],"names":["Animator","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","_request","_running","requestAnimFrame","call","window","_update","Date","now","remaining","_charts","running","items","length","i","draw","item","_active","_total","tick","pop","_lastDate","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","constructor","Map","undefined","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","active","update","cfg","currentValue","_target","_prop","elapsed","_start","remain","floor","_loop","loop","_to","resolve","_from","prop","_easing","_fn","wait","promises","_promises","Promise","res","rej","resolved","method","target","effects","easing","linear","delay","Animations","configure","config","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","_properties","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","_chart","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getMeta","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_data","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","_syncList","datasetElementType","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","_type","scopes","getOptionScopes","createResolver","getContext","_parsing","parsing","_cachedDataOpts","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","ctx","_ctx","elements","area","chartArea","_drawStart","_drawCount","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","$context","_resolveElementOptions","dataElementType","elementType","cache","cacheKey","sharing","enableOptionSharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","_sharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_objectData","supportsDecimation","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","outerRadius","toDimension","innerRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","defaultRoutes","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","setContext","_userMin","_userMax","_suggestedMin","suggestedMin","_suggestedMax","suggestedMax","finiteOrDefault","metas","paddingLeft","paddingTop","paddingRight","paddingBottom","getTicks","xLabels","yLabels","getLabelItems","_labelItems","_computeLabelItems","_dataLimitsCached","beforeUpdate","margins","grace","sampleSize","_margins","_labelSizes","_gridLineItems","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_range","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","labelRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","_longestTextCache","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","_ticksLength","_borderValue","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","scope","registerDefaults","unregister","create","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_each","addControllers","controllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","_typedRegistries","PluginService","notify","hook","_init","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","platform","_config","clearCache","_scopeCache","clear","_resolverCache","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","maintainAspectRatio","_aspectRatio","_options","_initialize","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","attached","_doResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_metasets","_destroyDatasetMeta","_sortedMetasets","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_plugins","_minPadding","autoPadding","_updateLayout","_updateDatasets","_lastEvent","_eventHandler","_updateHoverStyles","existingEvents","_listeners","newEvents","events","setsEqual","_responsiveListeners","unbindEvents","_hiddenIndices","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","userConfig","initialCanvas","existingChart","uid","debounce","resizeDelay","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_pointsUpdated","_updateBezierControlPoints","_points","_segments","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","buildLabels","legendItems","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","legendHitBoxes","lineWidths","totalHeight","row","itemWidth","measureText","_itemHeight","columnSizes","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","_hoveredItem","sameItem","onLeave","_added","doughnutMode","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","_cachedAnimations","_tooltipItems","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","labelColors","labelPointStyles","labelTextColors","itemSort","dataPoints","opacity","_eventPosition","_size","positionAndSize","backgroundPoint","caretX","caretY","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","added","_addedLabels","_valueRange","_startValue","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","_endValue","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_unit","_getLabelCapacity","_majorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","_offsets","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_getTimestampsForTable","_table","buildLookupTable","_minPos","_tableRange","registerables"],"mappings":"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"}